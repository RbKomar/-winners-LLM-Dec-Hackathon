docstring,code,code_start_line,code_end_line,file,module,name,parent,type,len,generated_docstring
,"from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.messages.views import SuccessMessageMixin
from django.shortcuts import HttpResponseRedirect, redirect, render
from django.urls import reverse_lazy
from django.views.generic import ListView, TemplateView, View
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from .forms import AcademicSessionForm, AcademicTermForm, CurrentSessionForm, SiteConfigForm, StudentClassForm, SubjectForm
from .models import AcademicSession, AcademicTerm, SiteConfig, StudentClass, Subject


class IndexView(LoginRequiredMixin, TemplateView):
    template_name = 'index.html'


class SiteConfigView(LoginRequiredMixin, View):
    """"""Site Config View""""""
    form_class = SiteConfigForm
    template_name = 'corecode/siteconfig.html'

    def get(self, request, *args, **kwargs):
        formset = self.form_class(queryset=SiteConfig.objects.all())
        context = {'formset': formset}
        return render(request, self.template_name, context)

    def post(self, request, *args, **kwargs):
        formset = self.form_class(request.POST)
        if formset.is_valid():
            formset.save()
            messages.success(request, 'Configurations successfully updated')
        context = {'formset': formset, 'title': 'Configuration'}
        return render(request, self.template_name, context)


class SessionListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = AcademicSession
    template_name = 'corecode/session_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = AcademicSessionForm()
        return context


class SessionCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = AcademicSession
    form_class = AcademicSessionForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('sessions')
    success_message = 'New session successfully added'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Add new session'
        return context


class SessionUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = AcademicSession
    form_class = AcademicSessionForm
    success_url = reverse_lazy('sessions')
    success_message = 'Session successfully updated.'
    template_name = 'corecode/mgt_form.html'

    def form_valid(self, form):
        obj = self.object
        if obj.current == False:
            terms = AcademicSession.objects.filter(current=True).exclude(name
                =obj.name).exists()
            if not terms:
                messages.warning(self.request,
                    'You must set a session to current.')
                return redirect('session-list')
        return super().form_valid(form)


class SessionDeleteView(LoginRequiredMixin, DeleteView):
    model = AcademicSession
    success_url = reverse_lazy('sessions')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The session {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        if obj.current == True:
            messages.warning(request,
                'Cannot delete session as it is set to current')
            return redirect('sessions')
        messages.success(self.request, self.success_message.format(obj.name))
        return super(SessionDeleteView, self).delete(request, *args, **kwargs)


class TermListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = AcademicTerm
    template_name = 'corecode/term_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = AcademicTermForm()
        return context


class TermCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = AcademicTerm
    form_class = AcademicTermForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('terms')
    success_message = 'New term successfully added'


class TermUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = AcademicTerm
    form_class = AcademicTermForm
    success_url = reverse_lazy('terms')
    success_message = 'Term successfully updated.'
    template_name = 'corecode/mgt_form.html'

    def form_valid(self, form):
        obj = self.object
        if obj.current == False:
            terms = AcademicTerm.objects.filter(current=True).exclude(name=
                obj.name).exists()
            if not terms:
                messages.warning(self.request,
                    'You must set a term to current.')
                return redirect('term')
        return super().form_valid(form)


class TermDeleteView(LoginRequiredMixin, DeleteView):
    model = AcademicTerm
    success_url = reverse_lazy('terms')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The term {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        if obj.current == True:
            messages.warning(request,
                'Cannot delete term as it is set to current')
            return redirect('terms')
        messages.success(self.request, self.success_message.format(obj.name))
        return super(TermDeleteView, self).delete(request, *args, **kwargs)


class ClassListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = StudentClass
    template_name = 'corecode/class_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = StudentClassForm()
        return context


class ClassCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = StudentClass
    form_class = StudentClassForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('classes')
    success_message = 'New class successfully added'


class ClassUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = StudentClass
    fields = ['name']
    success_url = reverse_lazy('classes')
    success_message = 'class successfully updated.'
    template_name = 'corecode/mgt_form.html'


class ClassDeleteView(LoginRequiredMixin, DeleteView):
    model = StudentClass
    success_url = reverse_lazy('classes')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The class {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        print(obj.name)
        messages.success(self.request, self.success_message.format(obj.name))
        return super(ClassDeleteView, self).delete(request, *args, **kwargs)


class SubjectListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = Subject
    template_name = 'corecode/subject_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = SubjectForm()
        return context


class SubjectCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Subject
    form_class = SubjectForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('subjects')
    success_message = 'New subject successfully added'


class SubjectUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Subject
    fields = ['name']
    success_url = reverse_lazy('subjects')
    success_message = 'Subject successfully updated.'
    template_name = 'corecode/mgt_form.html'


class SubjectDeleteView(LoginRequiredMixin, DeleteView):
    model = Subject
    success_url = reverse_lazy('subjects')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The subject {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        messages.success(self.request, self.success_message.format(obj.name))
        return super(SubjectDeleteView, self).delete(request, *args, **kwargs)


class CurrentSessionAndTermView(LoginRequiredMixin, View):
    """"""Current SEssion and Term""""""
    form_class = CurrentSessionForm
    template_name = 'corecode/current_session.html'

    def get(self, request, *args, **kwargs):
        form = self.form_class(initial={'current_session': AcademicSession.
            objects.get(current=True), 'current_term': AcademicTerm.objects
            .get(current=True)})
        return render(request, self.template_name, {'form': form})

    def post(self, request, *args, **kwargs):
        form = self.form_class(request.POST, initial={'current_session':
            AcademicSession.objects.get(current=True), 'current_term':
            AcademicTerm.objects.get(current=True)})
        if form.is_valid():
            session = form.cleaned_data['current_session']
            term = form.cleaned_data['current_term']
            AcademicSession.objects.filter(name=session).update(current=True)
            AcademicSession.objects.exclude(name=session).update(current=False)
            AcademicTerm.objects.filter(name=term).update(current=True)
        return render(request, self.template_name, {'form': form})
",0,,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,views,,module,9495,nan
,"from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import redirect, render
from django.urls import reverse_lazy
from django.views.generic import DetailView, ListView
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from apps.students.models import Student
from .forms import InvoiceItemFormset, InvoiceReceiptFormSet, Invoices
from .models import Invoice, InvoiceItem, Receipt


class InvoiceListView(LoginRequiredMixin, ListView):
    model = Invoice


class InvoiceCreateView(LoginRequiredMixin, CreateView):
    model = Invoice
    fields = '__all__'
    success_url = '/finance/list'

    def get_context_data(self, **kwargs):
        context = super(InvoiceCreateView, self).get_context_data(**kwargs)
        if self.request.POST:
            context['items'] = InvoiceItemFormset(self.request.POST, prefix
                ='invoiceitem_set')
        else:
            context['items'] = InvoiceItemFormset(prefix='invoiceitem_set')
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        formset = context['items']
        self.object = form.save()
        if self.object.id != None:
            if form.is_valid() and formset.is_valid():
                formset.instance = self.object
                formset.save()
        return super().form_valid(form)


class InvoiceDetailView(LoginRequiredMixin, DetailView):
    model = Invoice
    fields = '__all__'

    def get_context_data(self, **kwargs):
        context = super(InvoiceDetailView, self).get_context_data(**kwargs)
        context['receipts'] = Receipt.objects.filter(invoice=self.object)
        context['items'] = InvoiceItem.objects.filter(invoice=self.object)
        return context


class InvoiceUpdateView(LoginRequiredMixin, UpdateView):
    model = Invoice
    fields = ['student', 'session', 'term', 'class_for',
        'balance_from_previous_term']

    def get_context_data(self, **kwargs):
        context = super(InvoiceUpdateView, self).get_context_data(**kwargs)
        if self.request.POST:
            context['receipts'] = InvoiceReceiptFormSet(self.request.POST,
                instance=self.object)
            context['items'] = InvoiceItemFormset(self.request.POST,
                instance=self.object)
        else:
            context['receipts'] = InvoiceReceiptFormSet(instance=self.object)
            context['items'] = InvoiceItemFormset(instance=self.object)
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        formset = context['receipts']
        itemsformset = context['items']
        if form.is_valid() and formset.is_valid() and itemsformset.is_valid():
            form.save()
            formset.save()
            itemsformset.save()
        return super().form_valid(form)


class InvoiceDeleteView(LoginRequiredMixin, DeleteView):
    model = Invoice
    success_url = reverse_lazy('invoice-list')


class ReceiptCreateView(LoginRequiredMixin, CreateView):
    model = Receipt
    fields = ['amount_paid', 'date_paid', 'comment']
    success_url = reverse_lazy('invoice-list')

    def form_valid(self, form):
        obj = form.save(commit=False)
        invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
        obj.invoice = invoice
        obj.save()
        return redirect('invoice-list')

    def get_context_data(self, **kwargs):
        context = super(ReceiptCreateView, self).get_context_data(**kwargs)
        invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
        context['invoice'] = invoice
        return context


class ReceiptUpdateView(LoginRequiredMixin, UpdateView):
    model = Receipt
    fields = ['amount_paid', 'date_paid', 'comment']
    success_url = reverse_lazy('invoice-list')


class ReceiptDeleteView(LoginRequiredMixin, DeleteView):
    model = Receipt
    success_url = reverse_lazy('invoice-list')


@login_required
def bulk_invoice(request):
    return render(request, 'finance/bulk_invoice.html')
",0,,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,views,,module,4093,nan
,"from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import redirect, render
from django.views.generic import DetailView, ListView, View
from apps.students.models import Student
from .forms import CreateResults, EditResults
from .models import Result


@login_required
def create_result(request):
    students = Student.objects.all()
    if request.method == 'POST':
        if 'finish' in request.POST:
            form = CreateResults(request.POST)
            if form.is_valid():
                subjects = form.cleaned_data['subjects']
                session = form.cleaned_data['session']
                term = form.cleaned_data['term']
                students = request.POST['students']
                results = []
                for student in students.split(','):
                    stu = Student.objects.get(pk=student)
                    if stu.current_class:
                        for subject in subjects:
                            check = Result.objects.filter(session=session,
                                term=term, current_class=stu.current_class,
                                subject=subject, student=stu).first()
                            if not check:
                                results.append(Result(session=session, term
                                    =term, current_class=stu.current_class,
                                    subject=subject, student=stu))
                Result.objects.bulk_create(results)
                return redirect('edit-results')
        id_list = request.POST.getlist('students')
        if id_list:
            form = CreateResults(initial={'session': request.
                current_session, 'term': request.current_term})
            studentlist = ','.join(id_list)
            return render(request, 'result/create_result_page2.html', {
                'students': studentlist, 'form': form, 'count': len(id_list)})
        else:
            messages.warning(request, 'You didnt select any student.')
    return render(request, 'result/create_result.html', {'students': students})


@login_required
def edit_results(request):
    if request.method == 'POST':
        form = EditResults(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Results successfully updated')
            return redirect('edit-results')
    else:
        results = Result.objects.filter(session=request.current_session,
            term=request.current_term)
        form = EditResults(queryset=results)
    return render(request, 'result/edit_results.html', {'formset': form})


class ResultListView(LoginRequiredMixin, View):

    def get(self, request, *args, **kwargs):
        results = Result.objects.filter(session=request.current_session,
            term=request.current_term)
        bulk = {}
        for result in results:
            test_total = 0
            exam_total = 0
            subjects = []
            for subject in results:
                if subject.student == result.student:
                    subjects.append(subject)
                    test_total += subject.test_score
                    exam_total += subject.exam_score
            bulk[result.student.id] = {'student': result.student,
                'subjects': subjects, 'test_total': test_total,
                'exam_total': exam_total, 'total_total': test_total +
                exam_total}
        context = {'results': bulk}
        return render(request, 'result/all_results.html', context)
",0,,../../dziwne/Django-School-Management-System/apps/result/views.py,views,views,,module,3621,nan
"Django settings for school_app project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/","""""""
Django settings for school_app project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
""""""
import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SECRET_KEY = '__$1ud47e&nyso5h5o3fwnqu4+hfqcply9h$k*h2s34)hn5@nc'
DEBUG = True
ALLOWED_HOSTS = []
INSTALLED_APPS = ['django.contrib.auth', 'django.contrib.contenttypes',
    'django.contrib.sessions', 'django.contrib.messages',
    'django.contrib.staticfiles', 'django.contrib.humanize',
    'widget_tweaks', 'apps.corecode', 'apps.students', 'apps.staffs',
    'apps.finance', 'apps.result']
MIDDLEWARE = ['django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.corecode.middleware.SiteWideConfigs']
ROOT_URLCONF = 'school_app.urls'
TEMPLATES = [{'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [os.path.join(BASE_DIR, 'templates')], 'APP_DIRS': True,
    'OPTIONS': {'context_processors': [
    'django.template.context_processors.debug',
    'django.template.context_processors.request',
    'django.contrib.auth.context_processors.auth',
    'django.contrib.messages.context_processors.messages',
    'apps.corecode.context_processors.site_defaults']}}]
WSGI_APPLICATION = 'school_app.wsgi.application'
DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': os
    .path.join(BASE_DIR, 'db.sqlite3')}}
AUTH_PASSWORD_VALIDATORS = [{'NAME':
    'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'
    }, {'NAME':
    'django.contrib.auth.password_validation.MinimumLengthValidator'}, {
    'NAME':
    'django.contrib.auth.password_validation.CommonPasswordValidator'}, {
    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}
    ]
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240
STATIC_URL = '/static/'
STATICFILES_DIRS = os.path.join(BASE_DIR, 'static'),
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 10800
LOGGING = {'version': 1, 'disable_existing_loggers': False, 'formatters': {
    'verbose': {'format': '{levelname} {asctime} {message}', 'style': '{'}},
    'handlers': {'file': {'level': 'INFO', 'class':
    'logging.handlers.TimedRotatingFileHandler', 'when': 'W6', 'interval': 
    4, 'backupCount': 3, 'encoding': 'utf8', 'filename': os.path.join(
    BASE_DIR, 'debug.log'), 'formatter': 'verbose'}}, 'loggers': {'django':
    {'handlers': ['file'], 'level': 'INFO', 'propagate': True}}}
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
",0,,../../dziwne/Django-School-Management-System/school_app/settings.py,settings,settings,,module,3281,nan
,"import csv
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.messages.views import SuccessMessageMixin
from django.forms import widgets
from django.http import HttpResponse
from django.urls import reverse_lazy
from django.views.generic import DetailView, ListView, View
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from apps.finance.models import Invoice
from .models import Student, StudentBulkUpload


class StudentListView(LoginRequiredMixin, ListView):
    model = Student
    template_name = 'students/student_list.html'


class StudentDetailView(LoginRequiredMixin, DetailView):
    model = Student
    template_name = 'students/student_detail.html'

    def get_context_data(self, **kwargs):
        context = super(StudentDetailView, self).get_context_data(**kwargs)
        context['payments'] = Invoice.objects.filter(student=self.object)
        return context


class StudentCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Student
    fields = '__all__'
    success_message = 'New student successfully added.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StudentCreateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
        return form


class StudentUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Student
    fields = '__all__'
    success_message = 'Record successfully updated.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StudentUpdateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
        return form


class StudentDeleteView(LoginRequiredMixin, DeleteView):
    model = Student
    success_url = reverse_lazy('student-list')


class StudentBulkUploadView(LoginRequiredMixin, SuccessMessageMixin, CreateView
    ):
    model = StudentBulkUpload
    template_name = 'students/students_upload.html'
    fields = ['csv_file']
    success_url = '/student/list'
    success_message = 'Successfully uploaded students'


class DownloadCSVViewdownloadcsv(LoginRequiredMixin, View):

    def get(self, request, *args, **kwargs):
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'
            ] = 'attachment; filename=""student_template.csv""'
        writer = csv.writer(response)
        writer.writerow(['registration_number', 'surname', 'firstname',
            'other_names', 'gender', 'parent_number', 'address',
            'current_class'])
        return response
",0,,../../dziwne/Django-School-Management-System/apps/students/views.py,views,views,,module,3081,nan
,"import csv
import os
from io import StringIO
from django.db.models.signals import post_delete, post_save
from django.dispatch import receiver
from apps.corecode.models import StudentClass
from .models import Student, StudentBulkUpload


@receiver(post_save, sender=StudentBulkUpload)
def create_bulk_student(sender, created, instance, *args, **kwargs):
    if created:
        opened = StringIO(instance.csv_file.read().decode())
        reading = csv.DictReader(opened, delimiter=',')
        students = []
        for row in reading:
            if 'registration_number' in row and row['registration_number']:
                reg = row['registration_number']
                surname = row['surname'] if 'surname' in row and row['surname'
                    ] else ''
                firstname = row['firstname'] if 'firstname' in row and row[
                    'firstname'] else ''
                other_names = row['other_names'
                    ] if 'other_names' in row and row['other_names'] else ''
                gender = row['gender'].lower() if 'gender' in row and row[
                    'gender'] else ''
                phone = row['parent_number'] if 'parent_number' in row and row[
                    'parent_number'] else ''
                address = row['address'] if 'address' in row and row['address'
                    ] else ''
                current_class = row['current_class'
                    ] if 'current_class' in row and row['current_class'
                    ] else ''
                if current_class:
                    theclass, kind = StudentClass.objects.get_or_create(name
                        =current_class)
                check = Student.objects.filter(registration_number=reg).exists(
                    )
                if not check:
                    students.append(Student(registration_number=reg,
                        surname=surname, firstname=firstname, other_name=
                        other_names, gender=gender, current_class=theclass,
                        parent_mobile_number=phone, address=address,
                        current_status='active'))
        Student.objects.bulk_create(students)
        instance.csv_file.close()
        instance.delete()


def _delete_file(path):
    """"""Deletes file from filesystem.""""""
    if os.path.isfile(path):
        os.remove(path)


@receiver(post_delete, sender=StudentBulkUpload)
def delete_csv_file(sender, instance, *args, **kwargs):
    if instance.csv_file:
        _delete_file(instance.csv_file.path)


@receiver(post_delete, sender=Student)
def delete_passport_on_delete(sender, instance, *args, **kwargs):
    if instance.passport:
        _delete_file(instance.passport.path)
",0,,../../dziwne/Django-School-Management-System/apps/students/signals.py,signals,signals,,module,2715,nan
,"from django.db import models
from django.urls import reverse
from django.utils import timezone
from apps.corecode.models import AcademicSession, AcademicTerm, StudentClass
from apps.students.models import Student


class Invoice(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)
    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)
    class_for = models.ForeignKey(StudentClass, on_delete=models.CASCADE)
    balance_from_previous_term = models.IntegerField(default=0)
    status = models.CharField(max_length=20, choices=[('active', 'Active'),
        ('closed', 'Closed')], default='active')


    class Meta:
        ordering = ['student', 'term']

    def __str__(self):
        return f'{self.student}'

    def balance(self):
        payable = self.total_amount_payable()
        paid = self.total_amount_paid()
        return payable - paid

    def amount_payable(self):
        items = InvoiceItem.objects.filter(invoice=self)
        total = 0
        for item in items:
            total += item.amount
        return total

    def total_amount_payable(self):
        return self.balance_from_previous_term + self.amount_payable()

    def total_amount_paid(self):
        receipts = Receipt.objects.filter(invoice=self)
        amount = 0
        for receipt in receipts:
            amount += receipt.amount_paid
        return amount

    def get_absolute_url(self):
        return reverse('invoice-detail', kwargs={'pk': self.pk})


class InvoiceItem(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)
    description = models.CharField(max_length=200)
    amount = models.IntegerField()


class Receipt(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)
    amount_paid = models.IntegerField()
    date_paid = models.DateField(default=timezone.now)
    comment = models.CharField(max_length=200, blank=True)

    def __str__(self):
        return f'Receipt on {self.date_paid}'
",0,,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,models,,module,2081,nan
,"from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True
    dependencies = [('students', '0001_initial'), ('corecode', '0001_initial')]
    operations = [migrations.CreateModel(name='Invoice', fields=[('id',
        models.AutoField(auto_created=True, primary_key=True, serialize=
        False, verbose_name='ID')), ('balance_from_previous_term', models.
        IntegerField(default=0)), ('status', models.CharField(choices=[(
        'active', 'Active'), ('closed', 'Closed')], default='active',
        max_length=20)), ('class_for', models.ForeignKey(on_delete=django.
        db.models.deletion.CASCADE, to='corecode.StudentClass')), (
        'session', models.ForeignKey(on_delete=django.db.models.deletion.
        CASCADE, to='corecode.AcademicSession')), ('student', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'students.Student')), ('term', models.ForeignKey(on_delete=django.
        db.models.deletion.CASCADE, to='corecode.AcademicTerm'))], options=
        {'ordering': ['student', 'term']}), migrations.CreateModel(name=
        'Receipt', fields=[('id', models.AutoField(auto_created=True,
        primary_key=True, serialize=False, verbose_name='ID')), (
        'amount_paid', models.IntegerField()), ('date_paid', models.
        DateField(default=django.utils.timezone.now)), ('comment', models.
        CharField(blank=True, max_length=200)), ('invoice', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'finance.Invoice'))]), migrations.CreateModel(name='InvoiceItem',
        fields=[('id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('description', models.
        CharField(max_length=200)), ('amount', models.IntegerField()), (
        'invoice', models.ForeignKey(on_delete=django.db.models.deletion.
        CASCADE, to='finance.Invoice'))])]
",0,,../../dziwne/Django-School-Management-System/apps/finance/migrations/0001_initial.py,0001_initial,0001_initial,,module,2012,nan
,"@receiver(post_save, sender=StudentBulkUpload)
def create_bulk_student(sender, created, instance, *args, **kwargs):
    if created:
        opened = StringIO(instance.csv_file.read().decode())
        reading = csv.DictReader(opened, delimiter=',')
        students = []
        for row in reading:
            if 'registration_number' in row and row['registration_number']:
                reg = row['registration_number']
                surname = row['surname'] if 'surname' in row and row['surname'
                    ] else ''
                firstname = row['firstname'] if 'firstname' in row and row[
                    'firstname'] else ''
                other_names = row['other_names'
                    ] if 'other_names' in row and row['other_names'] else ''
                gender = row['gender'].lower() if 'gender' in row and row[
                    'gender'] else ''
                phone = row['parent_number'] if 'parent_number' in row and row[
                    'parent_number'] else ''
                address = row['address'] if 'address' in row and row['address'
                    ] else ''
                current_class = row['current_class'
                    ] if 'current_class' in row and row['current_class'
                    ] else ''
                if current_class:
                    theclass, kind = StudentClass.objects.get_or_create(name
                        =current_class)
                check = Student.objects.filter(registration_number=reg).exists(
                    )
                if not check:
                    students.append(Student(registration_number=reg,
                        surname=surname, firstname=firstname, other_name=
                        other_names, gender=gender, current_class=theclass,
                        parent_mobile_number=phone, address=address,
                        current_status='active'))
        Student.objects.bulk_create(students)
        instance.csv_file.close()
        instance.delete()
",14,68.0,../../dziwne/Django-School-Management-System/apps/students/signals.py,signals,create_bulk_student,signals,function,2003,"This function is a callback for the post_save signal of a StudentBulkUpload model.

When a StudentBulkUpload instance is created, this function reads the CSV file attached to the instance,
parses it, and creates Student objects in bulk based on the data from the CSV file. It only processes a row
if it has a 'registration_number' field with a value. Optional fields include 'surname', 'firstname',
'other_names', 'gender', 'parent_number', 'address', and 'current_class'. If 'current_class' is provided,
it ensures that a StudentClass object exists with that name or creates it.

After processing all the rows and creating a list of Student objects, it performs a bulk creation in the
Student model. It also handles closing the CSV file and deleting the StudentBulkUpload instance after
processing.

Parameters:
- sender: The model class that sent the signal.
- created: A boolean indicating whether a new record was created.
- instance: The actual instance of StudentBulkUpload being saved.
- *args: Variable length argument list.
- **kwargs: Arbitrary keyword arguments.

Note: This function is meant to be connected to the post_save signal of the StudentBulkUpload model and
should not be called directly."
,"from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True
    dependencies = [('corecode', '0001_initial')]
    operations = [migrations.CreateModel(name='StudentBulkUpload', fields=[
        ('id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('date_uploaded', models.
        DateTimeField(auto_now=True)), ('csv_file', models.FileField(
        upload_to='students/bulkupload/'))]), migrations.CreateModel(name=
        'Student', fields=[('id', models.AutoField(auto_created=True,
        primary_key=True, serialize=False, verbose_name='ID')), (
        'current_status', models.CharField(choices=[('active', 'Active'), (
        'inactive', 'Inactive')], default='active', max_length=10)), (
        'registration_number', models.CharField(max_length=200, unique=True
        )), ('surname', models.CharField(max_length=200)), ('firstname',
        models.CharField(max_length=200)), ('other_name', models.CharField(
        blank=True, max_length=200)), ('gender', models.CharField(choices=[
        ('male', 'Male'), ('female', 'Female')], default='male', max_length
        =10)), ('date_of_birth', models.DateField(default=django.utils.
        timezone.now)), ('date_of_admission', models.DateField(default=
        django.utils.timezone.now)), ('parent_mobile_number', models.
        CharField(blank=True, max_length=15)), ('address', models.TextField
        (blank=True)), ('others', models.TextField(blank=True)), (
        'passport', models.ImageField(blank=True, upload_to=
        'students/passports/')), ('current_class', models.ForeignKey(blank=
        True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=
        'corecode.StudentClass'))], options={'ordering': ['surname',
        'firstname', 'other_name']})]
",0,,../../dziwne/Django-School-Management-System/apps/students/migrations/0001_initial.py,0001_initial,0001_initial,,module,1911,nan
,"class Migration(migrations.Migration):
    initial = True
    dependencies = [('students', '0001_initial'), ('corecode', '0001_initial')]
    operations = [migrations.CreateModel(name='Invoice', fields=[('id',
        models.AutoField(auto_created=True, primary_key=True, serialize=
        False, verbose_name='ID')), ('balance_from_previous_term', models.
        IntegerField(default=0)), ('status', models.CharField(choices=[(
        'active', 'Active'), ('closed', 'Closed')], default='active',
        max_length=20)), ('class_for', models.ForeignKey(on_delete=django.
        db.models.deletion.CASCADE, to='corecode.StudentClass')), (
        'session', models.ForeignKey(on_delete=django.db.models.deletion.
        CASCADE, to='corecode.AcademicSession')), ('student', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'students.Student')), ('term', models.ForeignKey(on_delete=django.
        db.models.deletion.CASCADE, to='corecode.AcademicTerm'))], options=
        {'ordering': ['student', 'term']}), migrations.CreateModel(name=
        'Receipt', fields=[('id', models.AutoField(auto_created=True,
        primary_key=True, serialize=False, verbose_name='ID')), (
        'amount_paid', models.IntegerField()), ('date_paid', models.
        DateField(default=django.utils.timezone.now)), ('comment', models.
        CharField(blank=True, max_length=200)), ('invoice', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'finance.Invoice'))]), migrations.CreateModel(name='InvoiceItem',
        fields=[('id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('description', models.
        CharField(max_length=200)), ('amount', models.IntegerField()), (
        'invoice', models.ForeignKey(on_delete=django.db.models.deletion.
        CASCADE, to='finance.Invoice'))])]
",8,119.0,../../dziwne/Django-School-Management-System/apps/finance/migrations/0001_initial.py,0001_initial,Migration,,class,1907,"This migration class sets up the initial database schema for the finance module, including
the creation of 'Invoice', 'Receipt', and 'InvoiceItem' models with their respective fields
and relationships.

The 'Invoice' model includes fields for tracking the balance from the previous term, status,
associated class, session, student, and term, and is ordered by student and term.

The 'Receipt' model records payments toward invoices, including the amount paid, date of
payment, an optional comment, and a foreign key to the associated invoice.

The 'InvoiceItem' model represents individual items on an invoice, with fields for the
description, amount of the item, and a foreign key to the invoice it belongs to.

Dependencies are set on 'students' and 'corecode' apps to ensure the database is properly
set up with the required initial migrations."
,"from django.core.validators import RegexValidator
from django.db import models
from django.urls import reverse
from django.utils import timezone
from apps.corecode.models import StudentClass


class Student(models.Model):
    STATUS_CHOICES = [('active', 'Active'), ('inactive', 'Inactive')]
    GENDER_CHOICES = [('male', 'Male'), ('female', 'Female')]
    current_status = models.CharField(max_length=10, choices=STATUS_CHOICES,
        default='active')
    registration_number = models.CharField(max_length=200, unique=True)
    surname = models.CharField(max_length=200)
    firstname = models.CharField(max_length=200)
    other_name = models.CharField(max_length=200, blank=True)
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES,
        default='male')
    date_of_birth = models.DateField(default=timezone.now)
    current_class = models.ForeignKey(StudentClass, on_delete=models.
        SET_NULL, blank=True, null=True)
    date_of_admission = models.DateField(default=timezone.now)
    mobile_num_regex = RegexValidator(regex='^[0-9]{10,15}$', message=
        ""Entered mobile number isn't in a right format!"")
    parent_mobile_number = models.CharField(validators=[mobile_num_regex],
        max_length=13, blank=True)
    address = models.TextField(blank=True)
    others = models.TextField(blank=True)
    passport = models.ImageField(blank=True, upload_to='students/passports/')


    class Meta:
        ordering = ['surname', 'firstname', 'other_name']

    def __str__(self):
        return (
            f'{self.surname} {self.firstname} {self.other_name} ({self.registration_number})'
            )

    def get_absolute_url(self):
        return reverse('student-detail', kwargs={'pk': self.pk})


class StudentBulkUpload(models.Model):
    date_uploaded = models.DateTimeField(auto_now=True)
    csv_file = models.FileField(upload_to='students/bulkupload/')
",0,,../../dziwne/Django-School-Management-System/apps/students/models.py,models,models,,module,1901,nan
,"from django.urls import path
from .views import ClassCreateView, ClassDeleteView, ClassListView, ClassUpdateView, CurrentSessionAndTermView, IndexView, SessionCreateView, SessionDeleteView, SessionListView, SessionUpdateView, SiteConfigView, SubjectCreateView, SubjectDeleteView, SubjectListView, SubjectUpdateView, TermCreateView, TermDeleteView, TermListView, TermUpdateView
urlpatterns = [path('', IndexView.as_view(), name='home'), path(
    'site-config', SiteConfigView.as_view(), name='configs'), path(
    'current-session/', CurrentSessionAndTermView.as_view(), name=
    'current-session'), path('session/list/', SessionListView.as_view(),
    name='sessions'), path('session/create/', SessionCreateView.as_view(),
    name='session-create'), path('session/<int:pk>/update/',
    SessionUpdateView.as_view(), name='session-update'), path(
    'session/<int:pk>/delete/', SessionDeleteView.as_view(), name=
    'session-delete'), path('term/list/', TermListView.as_view(), name=
    'terms'), path('term/create/', TermCreateView.as_view(), name=
    'term-create'), path('term/<int:pk>/update/', TermUpdateView.as_view(),
    name='term-update'), path('term/<int:pk>/delete/', TermDeleteView.
    as_view(), name='term-delete'), path('class/list/', ClassListView.
    as_view(), name='classes'), path('class/create/', ClassCreateView.
    as_view(), name='class-create'), path('class/<int:pk>/update/',
    ClassUpdateView.as_view(), name='class-update'), path(
    'class/<int:pk>/delete/', ClassDeleteView.as_view(), name=
    'class-delete'), path('subject/list/', SubjectListView.as_view(), name=
    'subjects'), path('subject/create/', SubjectCreateView.as_view(), name=
    'subject-create'), path('subject/<int:pk>/update/', SubjectUpdateView.
    as_view(), name='subject-update'), path('subject/<int:pk>/delete/',
    SubjectDeleteView.as_view(), name='subject-delete')]
",0,,../../dziwne/Django-School-Management-System/apps/corecode/urls.py,urls,urls,,module,1890,nan
,"from django.contrib.messages.views import SuccessMessageMixin
from django.forms import widgets
from django.shortcuts import render
from django.urls import reverse_lazy
from django.views.generic import DetailView, ListView
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from .models import Staff


class StaffListView(ListView):
    model = Staff


class StaffDetailView(DetailView):
    model = Staff
    template_name = 'staffs/staff_detail.html'


class StaffCreateView(SuccessMessageMixin, CreateView):
    model = Staff
    fields = '__all__'
    success_message = 'New staff successfully added'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StaffCreateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
        return form


class StaffUpdateView(SuccessMessageMixin, UpdateView):
    model = Staff
    fields = '__all__'
    success_message = 'Record successfully updated.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StaffUpdateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
        return form


class StaffDeleteView(DeleteView):
    model = Staff
    success_url = reverse_lazy('staff-list')
",0,,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,views,,module,1870,nan
,"@login_required
def create_result(request):
    students = Student.objects.all()
    if request.method == 'POST':
        if 'finish' in request.POST:
            form = CreateResults(request.POST)
            if form.is_valid():
                subjects = form.cleaned_data['subjects']
                session = form.cleaned_data['session']
                term = form.cleaned_data['term']
                students = request.POST['students']
                results = []
                for student in students.split(','):
                    stu = Student.objects.get(pk=student)
                    if stu.current_class:
                        for subject in subjects:
                            check = Result.objects.filter(session=session,
                                term=term, current_class=stu.current_class,
                                subject=subject, student=stu).first()
                            if not check:
                                results.append(Result(session=session, term
                                    =term, current_class=stu.current_class,
                                    subject=subject, student=stu))
                Result.objects.bulk_create(results)
                return redirect('edit-results')
        id_list = request.POST.getlist('students')
        if id_list:
            form = CreateResults(initial={'session': request.
                current_session, 'term': request.current_term})
            studentlist = ','.join(id_list)
            return render(request, 'result/create_result_page2.html', {
                'students': studentlist, 'form': form, 'count': len(id_list)})
        else:
            messages.warning(request, 'You didnt select any student.')
    return render(request, 'result/create_result.html', {'students': students})
",14,69.0,../../dziwne/Django-School-Management-System/apps/result/views.py,views,create_result,views,function,1812,"Handles the creation of results for a set of students.

This view function is decorated with @login_required, meaning it requires the user
to be logged in to access this functionality. It manages both GET and POST requests.
It retrieves all students and, if the request is a POST and contains 'finish', it
processes the submitted form to create results for the selected students, subjects,
session, and term. If the form is valid, it checks if each student has a current
class assigned and, if so, it creates new Result entries for each subject where
a result does not already exist for the given session, term, and class. It then
saves these results to the database in bulk.

If the POST request does not contain 'finish', the function handles the initial
selection of students for which to create results. If no students are selected, a
warning message is displayed. Otherwise, it renders a template to proceed with result
creation.

Args:
    request: HttpRequest object containing metadata and user information.

Returns:
    HttpResponse object with the rendered create_result template for GET requests or
    redirection to 'edit-results' for valid POST submissions."
,"class Migration(migrations.Migration):
    initial = True
    dependencies = [('corecode', '0001_initial')]
    operations = [migrations.CreateModel(name='StudentBulkUpload', fields=[
        ('id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('date_uploaded', models.
        DateTimeField(auto_now=True)), ('csv_file', models.FileField(
        upload_to='students/bulkupload/'))]), migrations.CreateModel(name=
        'Student', fields=[('id', models.AutoField(auto_created=True,
        primary_key=True, serialize=False, verbose_name='ID')), (
        'current_status', models.CharField(choices=[('active', 'Active'), (
        'inactive', 'Inactive')], default='active', max_length=10)), (
        'registration_number', models.CharField(max_length=200, unique=True
        )), ('surname', models.CharField(max_length=200)), ('firstname',
        models.CharField(max_length=200)), ('other_name', models.CharField(
        blank=True, max_length=200)), ('gender', models.CharField(choices=[
        ('male', 'Male'), ('female', 'Female')], default='male', max_length
        =10)), ('date_of_birth', models.DateField(default=django.utils.
        timezone.now)), ('date_of_admission', models.DateField(default=
        django.utils.timezone.now)), ('parent_mobile_number', models.
        CharField(blank=True, max_length=15)), ('address', models.TextField
        (blank=True)), ('others', models.TextField(blank=True)), (
        'passport', models.ImageField(blank=True, upload_to=
        'students/passports/')), ('current_class', models.ForeignKey(blank=
        True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=
        'corecode.StudentClass'))], options={'ordering': ['surname',
        'firstname', 'other_name']})]
",8,91.0,../../dziwne/Django-School-Management-System/apps/students/migrations/0001_initial.py,0001_initial,Migration,,class,1806,"This Django migration class `Migration` defines the initial database schema for a student management system.

The migration includes two primary operations:

1. `CreateModel` for `StudentBulkUpload`:
   - `id`: An auto-incrementing primary key.
   - `date_uploaded`: A datetime field that automatically sets to the current date and time whenever the object is updated.
   - `csv_file`: A file field for uploading CSV files containing student data, stored in the 'students/bulkupload/' directory.

2. `CreateModel` for `Student`:
   - `id`: An auto-incrementing primary key.
   - `current_status`: A character field with choices for 'active' or 'inactive' status, defaulting to 'active'.
   - `registration_number`: A character field for storing unique student registration numbers.
   - `surname`: A character field for storing the student's surname.
   - `firstname`: A character field for storing the student's first name.
   - `other_name`: An optional character field for storing the student's other names.
   - `gender`: A character field with choices for 'male' or 'female', defaulting to 'male'.
   - `date_of_birth`: A date field with a default value set to the current date.
   - `date_of_admission`: A date field with a default value set to the current date.
   - `parent_mobile_number`: An optional character field for storing the parent's mobile number.
   - `address`: An optional text field for storing the student's address.
   - `others`: An optional text field for storing additional information.
   - `passport`: An optional image field for storing the student's passport photo, stored in the 'students/passports/' directory.
   - `current_class`: A foreign key linking to the `StudentClass` model, nullable and set to null on deletion.

The `Student` model includes a custom ordering by `surname`, `firstname`, and `other_name`.

Dependencies for the migration are set on the initial migration of the 'corecode' app."
,"from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True
    dependencies = []
    operations = [migrations.CreateModel(name='AcademicSession', fields=[(
        'id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('name', models.CharField(
        max_length=200, unique=True)), ('current', models.BooleanField())],
        options={'ordering': ['-name']}), migrations.CreateModel(name=
        'AcademicTerm', fields=[('id', models.AutoField(auto_created=True,
        primary_key=True, serialize=False, verbose_name='ID')), ('name',
        models.CharField(max_length=20, unique=True)), ('current', models.
        BooleanField())], options={'ordering': ['name']}), migrations.
        CreateModel(name='SiteConfig', fields=[('id', models.AutoField(
        auto_created=True, primary_key=True, serialize=False, verbose_name=
        'ID')), ('key', models.SlugField()), ('value', models.CharField(
        max_length=200))]), migrations.CreateModel(name='StudentClass',
        fields=[('id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('name', models.CharField(
        max_length=200, unique=True))], options={'verbose_name': 'Class',
        'verbose_name_plural': 'Classes', 'ordering': ['name']}),
        migrations.CreateModel(name='Subject', fields=[('id', models.
        AutoField(auto_created=True, primary_key=True, serialize=False,
        verbose_name='ID')), ('name', models.CharField(max_length=200,
        unique=True))], options={'ordering': ['name']})]
",0,,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0001_initial.py,0001_initial,0001_initial,,module,1633,nan
,"class Migration(migrations.Migration):
    initial = True
    dependencies = []
    operations = [migrations.CreateModel(name='AcademicSession', fields=[(
        'id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('name', models.CharField(
        max_length=200, unique=True)), ('current', models.BooleanField())],
        options={'ordering': ['-name']}), migrations.CreateModel(name=
        'AcademicTerm', fields=[('id', models.AutoField(auto_created=True,
        primary_key=True, serialize=False, verbose_name='ID')), ('name',
        models.CharField(max_length=20, unique=True)), ('current', models.
        BooleanField())], options={'ordering': ['name']}), migrations.
        CreateModel(name='SiteConfig', fields=[('id', models.AutoField(
        auto_created=True, primary_key=True, serialize=False, verbose_name=
        'ID')), ('key', models.SlugField()), ('value', models.CharField(
        max_length=200))]), migrations.CreateModel(name='StudentClass',
        fields=[('id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('name', models.CharField(
        max_length=200, unique=True))], options={'verbose_name': 'Class',
        'verbose_name_plural': 'Classes', 'ordering': ['name']}),
        migrations.CreateModel(name='Subject', fields=[('id', models.
        AutoField(auto_created=True, primary_key=True, serialize=False,
        verbose_name='ID')), ('name', models.CharField(max_length=200,
        unique=True))], options={'ordering': ['name']})]
",6,105.0,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0001_initial.py,0001_initial,Migration,,class,1590,"This class defines a database migration for a school management system.

The migration includes the creation of several models:

- AcademicSession: Represents an academic session with a unique name and a flag indicating if it's the current session.
- AcademicTerm: Represents an academic term with a unique name and a flag indicating if it's the current term.
- SiteConfig: Represents a configuration setting for the site with a key-value pair.
- StudentClass: Represents a class of students with a unique name.
- Subject: Represents an academic subject with a unique name.

Each model is created with an auto-incrementing primary key id and other specific fields. The AcademicSession and AcademicTerm models have additional boolean fields to indicate the current session or term.

The models AcademicSession, AcademicTerm, StudentClass, and Subject have custom ordering defined in their meta options.

This migration is marked as the initial migration for these models with no dependencies on other migrations, indicating that it is to be run at the beginning of the migrations chain."
,"class Student(models.Model):
    STATUS_CHOICES = [('active', 'Active'), ('inactive', 'Inactive')]
    GENDER_CHOICES = [('male', 'Male'), ('female', 'Female')]
    current_status = models.CharField(max_length=10, choices=STATUS_CHOICES,
        default='active')
    registration_number = models.CharField(max_length=200, unique=True)
    surname = models.CharField(max_length=200)
    firstname = models.CharField(max_length=200)
    other_name = models.CharField(max_length=200, blank=True)
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES,
        default='male')
    date_of_birth = models.DateField(default=timezone.now)
    current_class = models.ForeignKey(StudentClass, on_delete=models.
        SET_NULL, blank=True, null=True)
    date_of_admission = models.DateField(default=timezone.now)
    mobile_num_regex = RegexValidator(regex='^[0-9]{10,15}$', message=
        ""Entered mobile number isn't in a right format!"")
    parent_mobile_number = models.CharField(validators=[mobile_num_regex],
        max_length=13, blank=True)
    address = models.TextField(blank=True)
    others = models.TextField(blank=True)
    passport = models.ImageField(blank=True, upload_to='students/passports/')


    class Meta:
        ordering = ['surname', 'firstname', 'other_name']

    def __str__(self):
        return (
            f'{self.surname} {self.firstname} {self.other_name} ({self.registration_number})'
            )

    def get_absolute_url(self):
        return reverse('student-detail', kwargs={'pk': self.pk})
",9,46.0,../../dziwne/Django-School-Management-System/apps/students/models.py,models,Student,,class,1545,"A Django model representing a student with personal and academic details.

Attributes:
    STATUS_CHOICES (list of tuple): Available choices for current_status representing student's active or inactive status.
    GENDER_CHOICES (list of tuple): Available choices for gender, including 'male' and 'female' options.
    current_status (models.CharField): Field to store the student's current status, with 'active' as default.
    registration_number (models.CharField): Unique field to store the student's registration number.
    surname (models.CharField): Field to store the student's surname.
    firstname (models.CharField): Field to store the student's first name.
    other_name (models.CharField): Optional field to store the student's other names.
    gender (models.CharField): Field to store the student's gender, with 'male' as default.
    date_of_birth (models.DateField): Field to store the student's date of birth, defaulting to the current date.
    current_class (models.ForeignKey): A foreign key to the StudentClass model, with the possibility to be null.
    date_of_admission (models.DateField): Field to store the date the student was admitted, defaulting to the current date.
    parent_mobile_number (models.CharField): Field to store the student's parent's mobile number, with validation.
    address (models.TextField): Optional field to store the student's address.
    others (models.TextField): Optional field to store any additional information about the student.
    passport (models.ImageField): Optional field to store the path to the student's passport image.

The model also defines a custom ordering based on the student's surname, firstname, and other_name.

Methods:
    __str__(): Returns a string representation of the student, including their full name and registration number.
    get_absolute_url(): Returns the URL to the student's detail view."
,"class Invoice(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)
    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)
    class_for = models.ForeignKey(StudentClass, on_delete=models.CASCADE)
    balance_from_previous_term = models.IntegerField(default=0)
    status = models.CharField(max_length=20, choices=[('active', 'Active'),
        ('closed', 'Closed')], default='active')


    class Meta:
        ordering = ['student', 'term']

    def __str__(self):
        return f'{self.student}'

    def balance(self):
        payable = self.total_amount_payable()
        paid = self.total_amount_paid()
        return payable - paid

    def amount_payable(self):
        items = InvoiceItem.objects.filter(invoice=self)
        total = 0
        for item in items:
            total += item.amount
        return total

    def total_amount_payable(self):
        return self.balance_from_previous_term + self.amount_payable()

    def total_amount_paid(self):
        receipts = Receipt.objects.filter(invoice=self)
        amount = 0
        for receipt in receipts:
            amount += receipt.amount_paid
        return amount

    def get_absolute_url(self):
        return reverse('invoice-detail', kwargs={'pk': self.pk})
",9,50.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,Invoice,,class,1356,"A model representing an invoice for a student's academic fees.

This Invoice model links to a specific student, academic session, term, and class level.
It also tracks the balance carried over from the previous term and the current status of the invoice, which can either be 'active' or 'closed'.

Attributes:
    student (ForeignKey): A reference to the associated Student model.
    session (ForeignKey): A reference to the associated AcademicSession model.
    term (ForeignKey): A reference to the associated AcademicTerm model.
    class_for (ForeignKey): A reference to the associated StudentClass model.
    balance_from_previous_term (IntegerField): The monetary balance from the previous term that is being carried over.
    status (CharField): The current status of the invoice, with possible choices of 'active' or 'closed'.

The model includes methods to calculate the balance, amount payable, total amount payable, and total amount paid. It also includes a method to retrieve the absolute URL for the invoice instance.

The model's string representation is defined to return the associated student's string representation.

Meta class ordering is set to sort by 'student' and 'term'."
,"from django.db import migrations
from django.contrib.auth.models import User


def default_site_config(apps, schema_editor):
    """"""Default site configurations""""""
    User.objects.create_superuser('admin', 'admin@schoolapp.com', 'admin123')
    Config = apps.get_model('corecode', 'SiteConfig')
    Config.objects.bulk_create([Config(key='school_name', value='My School'
        ), Config(key='school_slogan', value='A great school'), Config(key=
        'school_address', value='Lagos, Nigeria')])
    Session = apps.get_model('corecode', 'AcademicSession')
    Session.objects.bulk_create([Session(name='2019/2020', current=True)])
    Term = apps.get_model('corecode', 'AcademicTerm')
    Term.objects.bulk_create([Term(name='1st Term', current=True), Term(
        name='2nd Term', current=False), Term(name='3rd Term', current=False)])
    Subject = apps.get_model('corecode', 'Subject')
    Subject.objects.bulk_create([Subject(name='Mathematics'), Subject(name=
        'English')])
    StudentClass = apps.get_model('corecode', 'StudentClass')
    StudentClass.objects.bulk_create([StudentClass(name='JSS 1'),
        StudentClass(name='JSS 2')])


class Migration(migrations.Migration):
    dependencies = [('corecode', '0001_initial')]
    operations = [migrations.RunPython(default_site_config)]
",0,,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0002_auto_20200506_1520.py,0002_auto_20200506_1520,0002_auto_20200506_1520,,module,1307,nan
,"from django import forms
from django.forms import ModelForm, modelformset_factory
from .models import AcademicSession, AcademicTerm, SiteConfig, StudentClass, Subject
SiteConfigForm = modelformset_factory(SiteConfig, fields=('key', 'value'),
    extra=0)


class AcademicSessionForm(ModelForm):
    prefix = 'Academic Session'


    class Meta:
        model = AcademicSession
        fields = ['name', 'current']


class AcademicTermForm(ModelForm):
    prefix = 'Academic Term'


    class Meta:
        model = AcademicTerm
        fields = ['name', 'current']


class SubjectForm(ModelForm):
    prefix = 'Subject'


    class Meta:
        model = Subject
        fields = ['name']


class StudentClassForm(ModelForm):
    prefix = 'Class'


    class Meta:
        model = StudentClass
        fields = ['name']


class CurrentSessionForm(forms.Form):
    current_session = forms.ModelChoiceField(queryset=AcademicSession.
        objects.all(), help_text=
        'Click <a href=""/session/create/?next=current-session/"">here</a> to add new session'
        )
    current_term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all
        (), help_text=
        'Click <a href=""/term/create/?next=current-session/"">here</a> to add new term'
        )
",0,,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,forms,,module,1262,nan
,"from django.core.validators import RegexValidator
from django.db import models
from django.urls import reverse
from django.utils import timezone


class Staff(models.Model):
    STATUS = [('active', 'Active'), ('inactive', 'Inactive')]
    GENDER = [('male', 'Male'), ('female', 'Female')]
    current_status = models.CharField(max_length=10, choices=STATUS,
        default='active')
    surname = models.CharField(max_length=200)
    firstname = models.CharField(max_length=200)
    other_name = models.CharField(max_length=200, blank=True)
    gender = models.CharField(max_length=10, choices=GENDER, default='male')
    date_of_birth = models.DateField(default=timezone.now)
    date_of_admission = models.DateField(default=timezone.now)
    mobile_num_regex = RegexValidator(regex='^[0-9]{10,15}$', message=
        ""Entered mobile number isn't in a right format!"")
    mobile_number = models.CharField(validators=[mobile_num_regex],
        max_length=13, blank=True)
    address = models.TextField(blank=True)
    others = models.TextField(blank=True)

    def __str__(self):
        return f'{self.surname} {self.firstname} {self.other_name}'

    def get_absolute_url(self):
        return reverse('staff-detail', kwargs={'pk': self.pk})
",0,,../../dziwne/Django-School-Management-System/apps/staffs/models.py,models,models,,module,1247,nan
,"from django.db import models


class SiteConfig(models.Model):
    """"""Site Configurations""""""
    key = models.SlugField()
    value = models.CharField(max_length=200)

    def __str__(self):
        return self.key


class AcademicSession(models.Model):
    """"""Academic Session""""""
    name = models.CharField(max_length=200, unique=True)
    current = models.BooleanField(default=True)


    class Meta:
        ordering = ['-name']

    def __str__(self):
        return self.name


class AcademicTerm(models.Model):
    """"""Academic Term""""""
    name = models.CharField(max_length=20, unique=True)
    current = models.BooleanField(default=True)


    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name


class Subject(models.Model):
    """"""Subject""""""
    name = models.CharField(max_length=200, unique=True)


    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name


class StudentClass(models.Model):
    name = models.CharField(max_length=200, unique=True)


    class Meta:
        verbose_name = 'Class'
        verbose_name_plural = 'Classes'
        ordering = ['name']

    def __str__(self):
        return self.name
",0,,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,models,,module,1201,nan
Current SEssion and Term,"class CurrentSessionAndTermView(LoginRequiredMixin, View):
    """"""Current SEssion and Term""""""
    form_class = CurrentSessionForm
    template_name = 'corecode/current_session.html'

    def get(self, request, *args, **kwargs):
        form = self.form_class(initial={'current_session': AcademicSession.
            objects.get(current=True), 'current_term': AcademicTerm.objects
            .get(current=True)})
        return render(request, self.template_name, {'form': form})

    def post(self, request, *args, **kwargs):
        form = self.form_class(request.POST, initial={'current_session':
            AcademicSession.objects.get(current=True), 'current_term':
            AcademicTerm.objects.get(current=True)})
        if form.is_valid():
            session = form.cleaned_data['current_session']
            term = form.cleaned_data['current_term']
            AcademicSession.objects.filter(name=session).update(current=True)
            AcademicSession.objects.exclude(name=session).update(current=False)
            AcademicTerm.objects.filter(name=term).update(current=True)
        return render(request, self.template_name, {'form': form})
",241,271.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,CurrentSessionAndTermView,,class,1161,"This view handles displaying and updating the current academic session and term.

It requires a user to be logged in (LoginRequiredMixin) and utilizes a specific form
(CurrentSessionForm) to handle user input. The view supports both GET and POST requests.

On a GET request, it initializes the form with the current academic session and term,
rendering the 'corecode/current_session.html' template with the form context.

On a POST request, the submitted form data is validated. If the form is valid, it updates
the current session and term in the database to reflect the new values provided by the user,
ensuring that only one session and term are marked as current.

The view returns the rendered template with the form context in both GET and POST requests,
allowing for the display of the form and any form validation errors."
,"from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True
    dependencies = [('students', '0001_initial'), ('corecode', '0001_initial')]
    operations = [migrations.CreateModel(name='Result', fields=[('id',
        models.AutoField(auto_created=True, primary_key=True, serialize=
        False, verbose_name='ID')), ('test_score', models.IntegerField(
        default=0)), ('exam_score', models.IntegerField(default=0)), (
        'current_class', models.ForeignKey(on_delete=django.db.models.
        deletion.CASCADE, to='corecode.StudentClass')), ('session', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'corecode.AcademicSession')), ('student', models.ForeignKey(
        on_delete=django.db.models.deletion.CASCADE, to='students.Student')
        ), ('subject', models.ForeignKey(on_delete=django.db.models.
        deletion.CASCADE, to='corecode.Subject')), ('term', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'corecode.AcademicTerm'))], options={'ordering': ['subject']})]
",0,,../../dziwne/Django-School-Management-System/apps/result/migrations/0001_initial.py,0001_initial,0001_initial,,module,1138,nan
"newapp URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))","""""""newapp URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
""""""
from django.conf import settings
from django.conf.urls.static import static
from django.urls import include, path
urlpatterns = [path('accounts/', include('django.contrib.auth.urls')), path
    ('', include('apps.corecode.urls')), path('student/', include(
    'apps.students.urls')), path('staff/', include('apps.staffs.urls')),
    path('finance/', include('apps.finance.urls')), path('result/', include
    ('apps.result.urls'))] + static(settings.MEDIA_URL, document_root=
    settings.MEDIA_ROOT)
",0,,../../dziwne/Django-School-Management-System/school_app/urls.py,urls,urls,,module,1132,nan
,"from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True
    dependencies = []
    operations = [migrations.CreateModel(name='Staff', fields=[('id',
        models.AutoField(auto_created=True, primary_key=True, serialize=
        False, verbose_name='ID')), ('current_status', models.CharField(
        choices=[('active', 'Active'), ('inactive', 'Inactive')], default=
        'active', max_length=10)), ('surname', models.CharField(max_length=
        200)), ('firstname', models.CharField(max_length=200)), (
        'other_name', models.CharField(blank=True, max_length=200)), (
        'gender', models.CharField(choices=[('male', 'Male'), ('female',
        'Female')], default='male', max_length=10)), ('date_of_birth',
        models.DateField(default=django.utils.timezone.now)), (
        'date_of_admission', models.DateField(default=django.utils.timezone
        .now)), ('mobile_number', models.CharField(blank=True, max_length=
        15)), ('address', models.TextField(blank=True)), ('others', models.
        TextField(blank=True))])]
",0,,../../dziwne/Django-School-Management-System/apps/staffs/migrations/0001_initial.py,0001_initial,0001_initial,,module,1125,nan
,"class Staff(models.Model):
    STATUS = [('active', 'Active'), ('inactive', 'Inactive')]
    GENDER = [('male', 'Male'), ('female', 'Female')]
    current_status = models.CharField(max_length=10, choices=STATUS,
        default='active')
    surname = models.CharField(max_length=200)
    firstname = models.CharField(max_length=200)
    other_name = models.CharField(max_length=200, blank=True)
    gender = models.CharField(max_length=10, choices=GENDER, default='male')
    date_of_birth = models.DateField(default=timezone.now)
    date_of_admission = models.DateField(default=timezone.now)
    mobile_num_regex = RegexValidator(regex='^[0-9]{10,15}$', message=
        ""Entered mobile number isn't in a right format!"")
    mobile_number = models.CharField(validators=[mobile_num_regex],
        max_length=13, blank=True)
    address = models.TextField(blank=True)
    others = models.TextField(blank=True)

    def __str__(self):
        return f'{self.surname} {self.firstname} {self.other_name}'

    def get_absolute_url(self):
        return reverse('staff-detail', kwargs={'pk': self.pk})
",7,34.0,../../dziwne/Django-School-Management-System/apps/staffs/models.py,models,Staff,,class,1100,"A Django model representing a member of staff.

Attributes:
    current_status (CharField): The current employment status, with choices being 'active' or 'inactive'.
    surname (CharField): The staff member's surname.
    firstname (CharField): The staff member's first name.
    other_name (CharField): The staff member's other name(s), this field is optional.
    gender (CharField): The staff member's gender, with choices being 'male' or 'female'.
    date_of_birth (DateField): The date of birth of the staff member.
    date_of_admission (DateField): The date when the staff member was admitted/started.
    mobile_number (CharField): Contact mobile number of the staff member, must match specified format.
    address (TextField): The staff member's address, this field is optional.
    others (TextField): Any other relevant information about the staff member, this field is optional.

Methods:
    __str__: Returns a formatted string representation of the staff member's full name.
    get_absolute_url: Returns the URL to the detail view of this staff member instance."
,"class InvoiceUpdateView(LoginRequiredMixin, UpdateView):
    model = Invoice
    fields = ['student', 'session', 'term', 'class_for',
        'balance_from_previous_term']

    def get_context_data(self, **kwargs):
        context = super(InvoiceUpdateView, self).get_context_data(**kwargs)
        if self.request.POST:
            context['receipts'] = InvoiceReceiptFormSet(self.request.POST,
                instance=self.object)
            context['items'] = InvoiceItemFormset(self.request.POST,
                instance=self.object)
        else:
            context['receipts'] = InvoiceReceiptFormSet(instance=self.object)
            context['items'] = InvoiceItemFormset(instance=self.object)
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        formset = context['receipts']
        itemsformset = context['items']
        if form.is_valid() and formset.is_valid() and itemsformset.is_valid():
            form.save()
            formset.save()
            itemsformset.save()
        return super().form_valid(form)
",55,81.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,InvoiceUpdateView,,class,1083,"The `InvoiceUpdateView` class is a Django view for updating instances of the `Invoice` model. It requires users to be logged in and provides a form to update fields such as 'student', 'session', 'term', 'class_for', and 'balance_from_previous_term' of an invoice.

In addition to handling the main invoice form, this view manages two formsets: one for associated invoice receipts (`InvoiceReceiptFormSet`) and another for invoice items (`InvoiceItemFormset`). These formsets allow for the handling of related data when updating an invoice.

When a POST request is made, the view populates both formsets with POST data and associates them with the invoice instance being updated. If the main form and both formsets are valid, the changes are saved to the database.

The `get_context_data` method is overridden to include the formsets in the template context, and the `form_valid` method is overridden to perform the formsets' validation and saving operations alongside the main form's save operation."
Default site configurations,"def default_site_config(apps, schema_editor):
    """"""Default site configurations""""""
    User.objects.create_superuser('admin', 'admin@schoolapp.com', 'admin123')
    Config = apps.get_model('corecode', 'SiteConfig')
    Config.objects.bulk_create([Config(key='school_name', value='My School'
        ), Config(key='school_slogan', value='A great school'), Config(key=
        'school_address', value='Lagos, Nigeria')])
    Session = apps.get_model('corecode', 'AcademicSession')
    Session.objects.bulk_create([Session(name='2019/2020', current=True)])
    Term = apps.get_model('corecode', 'AcademicTerm')
    Term.objects.bulk_create([Term(name='1st Term', current=True), Term(
        name='2nd Term', current=False), Term(name='3rd Term', current=False)])
    Subject = apps.get_model('corecode', 'Subject')
    Subject.objects.bulk_create([Subject(name='Mathematics'), Subject(name=
        'English')])
    StudentClass = apps.get_model('corecode', 'StudentClass')
    StudentClass.objects.bulk_create([StudentClass(name='JSS 1'),
        StudentClass(name='JSS 2')])
",7,51.0,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0002_auto_20200506_1520.py,0002_auto_20200506_1520,default_site_config,0002_auto_20200506_1520,function,1076,"Initializes default configurations and entities for a school application.

This function creates a superuser and sets up initial configurations for the site, such as school name,
slogan, and address. It also establishes the academic sessions, terms, subjects, and student classes that will
be used within the application. This is typically run as a part of a migration to ensure the application has
a baseline set of data to work with.

Note: This function assumes the presence of a User model and specific models within the 'corecode' app:
SiteConfig, AcademicSession, AcademicTerm, Subject, and StudentClass. It is meant to be run in the context of
a Django migration.

Args:
    apps: A registry that provides model classes from the current project's apps.
    schema_editor: An instance of the schema editor class, not used in this function.

No return value and no exceptions are explicitly raised."
,"class Migration(migrations.Migration):
    initial = True
    dependencies = [('students', '0001_initial'), ('corecode', '0001_initial')]
    operations = [migrations.CreateModel(name='Result', fields=[('id',
        models.AutoField(auto_created=True, primary_key=True, serialize=
        False, verbose_name='ID')), ('test_score', models.IntegerField(
        default=0)), ('exam_score', models.IntegerField(default=0)), (
        'current_class', models.ForeignKey(on_delete=django.db.models.
        deletion.CASCADE, to='corecode.StudentClass')), ('session', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'corecode.AcademicSession')), ('student', models.ForeignKey(
        on_delete=django.db.models.deletion.CASCADE, to='students.Student')
        ), ('subject', models.ForeignKey(on_delete=django.db.models.
        deletion.CASCADE, to='corecode.Subject')), ('term', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'corecode.AcademicTerm'))], options={'ordering': ['subject']})]
",7,71.0,../../dziwne/Django-School-Management-System/apps/result/migrations/0001_initial.py,0001_initial,Migration,,class,1062,"This migration creates the 'Result' model which represents a student's test and exam scores for a particular subject, class, session, and term.

Fields:
- 'id': Primary key field that is auto-created.
- 'test_score': An integer field that stores the test score with a default value of 0.
- 'exam_score': An integer field that stores the exam score with a default value of 0.
- 'current_class': A foreign key linking to the 'StudentClass' model in the 'corecode' app. It represents the class in which the student is currently enrolled.
- 'session': A foreign key linking to the 'AcademicSession' model in the 'corecode' app, representing the academic session during which the result is recorded.
- 'student': A foreign key linking to the 'Student' model in the 'students' app, representing the student whose result is being recorded.
- 'subject': A foreign key linking to the 'Subject' model in the 'corecode' app, representing the subject for which the result is recorded.
- 'term': A foreign key linking to the 'AcademicTerm' model in the 'corecode' app, indicating the term in which the result is applicable.

The initial migration sets 'initial' to True and includes dependencies on initial migrations of the 'students' and 'corecode' apps.

Options:
- 'ordering': A list that orders the results by 'subject' when queried."
,"class Migration(migrations.Migration):
    initial = True
    dependencies = []
    operations = [migrations.CreateModel(name='Staff', fields=[('id',
        models.AutoField(auto_created=True, primary_key=True, serialize=
        False, verbose_name='ID')), ('current_status', models.CharField(
        choices=[('active', 'Active'), ('inactive', 'Inactive')], default=
        'active', max_length=10)), ('surname', models.CharField(max_length=
        200)), ('firstname', models.CharField(max_length=200)), (
        'other_name', models.CharField(blank=True, max_length=200)), (
        'gender', models.CharField(choices=[('male', 'Male'), ('female',
        'Female')], default='male', max_length=10)), ('date_of_birth',
        models.DateField(default=django.utils.timezone.now)), (
        'date_of_admission', models.DateField(default=django.utils.timezone
        .now)), ('mobile_number', models.CharField(blank=True, max_length=
        15)), ('address', models.TextField(blank=True)), ('others', models.
        TextField(blank=True))])]
",7,55.0,../../dziwne/Django-School-Management-System/apps/staffs/migrations/0001_initial.py,0001_initial,Migration,,class,1053,"This class represents a database migration which sets up the initial state for a new 'Staff' model.

The migration includes the following operations:
- Creating a new 'Staff' model with various fields such as 'id', 'current_status', 'surname', 'firstname',
  'other_name', 'gender', 'date_of_birth', 'date_of_admission', 'mobile_number', 'address', and 'others'.
- The 'id' field is an auto-incrementing primary key.
- The 'current_status' field is a CharField with choices for 'active' or 'inactive', defaulting to 'active'.
- The 'gender' field is a CharField with choices for 'male' or 'female', defaulting to 'male'.
- The 'date_of_birth' and 'date_of_admission' fields are DateFields with default values set to the current time.
- The 'mobile_number' and 'address' fields are optional CharField and TextField respectively.
- The 'others' field is an optional TextField meant for additional information.

This migration does not depend on any other migrations (empty dependencies list) and marks the beginning of the
migrations for the 'Staff' model (initial=True)."
,"from django.db import models
from apps.corecode.models import AcademicSession, AcademicTerm, StudentClass, Subject
from apps.students.models import Student
from .utils import score_grade


class Result(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)
    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)
    current_class = models.ForeignKey(StudentClass, on_delete=models.CASCADE)
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)
    test_score = models.IntegerField(default=0)
    exam_score = models.IntegerField(default=0)


    class Meta:
        ordering = ['subject']

    def __str__(self):
        return f'{self.student} {self.session} {self.term} {self.subject}'

    def total_score(self):
        return self.test_score + self.exam_score

    def grade(self):
        return score_grade(self.total_score())
",0,,../../dziwne/Django-School-Management-System/apps/result/models.py,models,models,,module,963,nan
,"class ResultListView(LoginRequiredMixin, View):

    def get(self, request, *args, **kwargs):
        results = Result.objects.filter(session=request.current_session,
            term=request.current_term)
        bulk = {}
        for result in results:
            test_total = 0
            exam_total = 0
            subjects = []
            for subject in results:
                if subject.student == result.student:
                    subjects.append(subject)
                    test_total += subject.test_score
                    exam_total += subject.exam_score
            bulk[result.student.id] = {'student': result.student,
                'subjects': subjects, 'test_total': test_total,
                'exam_total': exam_total, 'total_total': test_total +
                exam_total}
        context = {'results': bulk}
        return render(request, 'result/all_results.html', context)
",88,114.0,../../dziwne/Django-School-Management-System/apps/result/views.py,views,ResultListView,,class,907,"This view renders a list of student results for the current session and term.

It requires the user to be logged in and gathers all the Result objects that match
the current session and term from the request. For each student, it aggregates their
subject results, test scores, exam scores, and computes their total scores. The
aggregated data is structured with the student's ID as the key, containing details
such as the student object, their subjects, and their respective scores.

The context with the aggregated results is then passed to the 'result/all_results.html'
template to display the results.

Attributes:
    LoginRequiredMixin: Ensures that only authenticated users can access this view.
    View: Inherits from Django's base class-based view.

Methods:
    get(request, *args, **kwargs): Handles the GET request to retrieve and display
        the results."
,"from django.test import TestCase
from apps.corecode.models import AcademicSession, AcademicTerm, SiteConfig, Subject


class SiteConfigTest(TestCase):

    def test_siteconfig(self):
        site_config = SiteConfig.objects.create(key='akey', value='aname')
        self.assertEqual(str(site_config), 'akey')


class AcademicSessionTest(TestCase):

    def test_academicsession(self):
        session = AcademicSession.objects.create(name='test session',
            current=True)
        self.assertEqual(str(session), 'test session')


class AcademicTermTest(TestCase):

    def test_academicterm(self):
        term = AcademicTerm.objects.create(name='test Term', current=True)
        self.assertEqual(str(term), 'test Term')


class SubjectTest(TestCase):

    def test_subject(self):
        subject = Subject.objects.create(name='a_subject')
        self.assertEqual(str(subject), 'a_subject')
",0,,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,test_models,,module,901,nan
,"class InvoiceCreateView(LoginRequiredMixin, CreateView):
    model = Invoice
    fields = '__all__'
    success_url = '/finance/list'

    def get_context_data(self, **kwargs):
        context = super(InvoiceCreateView, self).get_context_data(**kwargs)
        if self.request.POST:
            context['items'] = InvoiceItemFormset(self.request.POST, prefix
                ='invoiceitem_set')
        else:
            context['items'] = InvoiceItemFormset(prefix='invoiceitem_set')
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        formset = context['items']
        self.object = form.save()
        if self.object.id != None:
            if form.is_valid() and formset.is_valid():
                formset.instance = self.object
                formset.save()
        return super().form_valid(form)
",18,41.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,InvoiceCreateView,,class,860,"A view for creating a new invoice record.

This view extends Django's generic CreateView and requires the user to be logged in to access it.
Upon successful submission, the user is redirected to the list of financial records.

Attributes:
    model: The database model that this view will create records for, which is Invoice.
    fields: A string indicating that all fields on the Invoice model should be included in the form.
    success_url: The URL to redirect to after a successful form submission.

Methods:
    get_context_data: Overrides the parent method to add the InvoiceItemFormset to the context data.
                      The formset is used for handling related invoice items, either with POST data
                      or as an empty formset.

    form_valid: Extends the parent method to save the associated InvoiceItemFormset when the main
                form is saved. It ensures that the form and formset are valid before saving them.
                Associates the formset with the Invoice instance before saving it to the database."
,"from django.urls import path
from .views import InvoiceCreateView, InvoiceDeleteView, InvoiceDetailView, InvoiceListView, InvoiceUpdateView, ReceiptCreateView, ReceiptUpdateView, bulk_invoice
urlpatterns = [path('list/', InvoiceListView.as_view(), name='invoice-list'
    ), path('create/', InvoiceCreateView.as_view(), name='invoice-create'),
    path('<int:pk>/detail/', InvoiceDetailView.as_view(), name=
    'invoice-detail'), path('<int:pk>/update/', InvoiceUpdateView.as_view(),
    name='invoice-update'), path('<int:pk>/delete/', InvoiceDeleteView.
    as_view(), name='invoice-delete'), path('receipt/create',
    ReceiptCreateView.as_view(), name='receipt-create'), path(
    'receipt/<int:pk>/update/', ReceiptUpdateView.as_view(), name=
    'receipt-update'), path('bulk-invoice/', bulk_invoice, name='bulk-invoice')
    ]
",0,,../../dziwne/Django-School-Management-System/apps/finance/urls.py,urls,urls,,module,835,nan
,"class Result(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)
    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)
    current_class = models.ForeignKey(StudentClass, on_delete=models.CASCADE)
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)
    test_score = models.IntegerField(default=0)
    exam_score = models.IntegerField(default=0)


    class Meta:
        ordering = ['subject']

    def __str__(self):
        return f'{self.student} {self.session} {self.term} {self.subject}'

    def total_score(self):
        return self.test_score + self.exam_score

    def grade(self):
        return score_grade(self.total_score())
",15,34.0,../../dziwne/Django-School-Management-System/apps/result/models.py,models,Result,,class,774,"A Django model representing a student's result for a particular subject during a specific academic term and session.

Attributes:
    student (ForeignKey): A reference to the Student model, indicating the student to whom the result belongs.
    session (ForeignKey): A reference to the AcademicSession model, indicating the academic session of the result.
    term (ForeignKey): A reference to the AcademicTerm model, indicating the academic term (e.g., first term, second term) of the result.
    current_class (ForeignKey): A reference to the StudentClass model, indicating the class of the student.
    subject (ForeignKey): A reference to the Subject model, indicating the subject to which the result pertains.
    test_score (IntegerField): The score obtained by the student in tests, with a default value of 0.
    exam_score (IntegerField): The score obtained by the student in the final exam, with a default value of 0.

Methods:
    __str__(self): Returns a string representation of the result, including the student's name, session, term, and subject.
    total_score(self): Calculates the total score by summing the test score and exam score.
    grade(self): Determines the grade of the student based on the total score.

Meta:
    ordering: A list that indicates the default ordering of the results by 'subject' when querying the database."
,"def get(self, request, *args, **kwargs):
    results = Result.objects.filter(session=request.current_session, term=
        request.current_term)
    bulk = {}
    for result in results:
        test_total = 0
        exam_total = 0
        subjects = []
        for subject in results:
            if subject.student == result.student:
                subjects.append(subject)
                test_total += subject.test_score
                exam_total += subject.exam_score
        bulk[result.student.id] = {'student': result.student, 'subjects':
            subjects, 'test_total': test_total, 'exam_total': exam_total,
            'total_total': test_total + exam_total}
    context = {'results': bulk}
    return render(request, 'result/all_results.html', context)
",89,114.0,../../dziwne/Django-School-Management-System/apps/result/views.py,views,get,ResultListView,method,771,"Fetches and aggregates results for students in the current session and term.

Retrieves the results of students from the database that are filtered by the current session and term from the request. It aggregates subjects, test scores, exam scores, and total scores for each student. Each student's results are then added to a dictionary with the student's ID as the key.

The aggregated results include:
- A list of subjects taken by the student.
- Total test score across all subjects.
- Total exam score across all subjects.
- Overall total score (test score + exam score).

Finally, the method prepares a context dictionary with these aggregated results and renders the 'result/all_results.html' template, passing the context to it.

:param request: HttpRequest object containing metadata about the request.
:return: HttpResponse object with the rendered template."
,"from django.urls import path
from .views import DownloadCSVViewdownloadcsv, StudentBulkUploadView, StudentCreateView, StudentDeleteView, StudentDetailView, StudentListView, StudentUpdateView
urlpatterns = [path('list', StudentListView.as_view(), name='student-list'),
    path('<int:pk>/', StudentDetailView.as_view(), name='student-detail'),
    path('create/', StudentCreateView.as_view(), name='student-create'),
    path('<int:pk>/update/', StudentUpdateView.as_view(), name=
    'student-update'), path('delete/<int:pk>/', StudentDeleteView.as_view(),
    name='student-delete'), path('upload/', StudentBulkUploadView.as_view(),
    name='student-upload'), path('download-csv/',
    DownloadCSVViewdownloadcsv.as_view(), name='download-csv')]
",0,,../../dziwne/Django-School-Management-System/apps/students/urls.py,urls,urls,,module,748,nan
Site Config View,"class SiteConfigView(LoginRequiredMixin, View):
    """"""Site Config View""""""
    form_class = SiteConfigForm
    template_name = 'corecode/siteconfig.html'

    def get(self, request, *args, **kwargs):
        formset = self.form_class(queryset=SiteConfig.objects.all())
        context = {'formset': formset}
        return render(request, self.template_name, context)

    def post(self, request, *args, **kwargs):
        formset = self.form_class(request.POST)
        if formset.is_valid():
            formset.save()
            messages.success(request, 'Configurations successfully updated')
        context = {'formset': formset, 'title': 'Configuration'}
        return render(request, self.template_name, context)
",31,48.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SiteConfigView,,class,723,"A Django view for handling the site configuration.

This view extends both LoginRequiredMixin and the base View class,
ensuring that only authenticated users can access the view. It uses
a form class 'SiteConfigForm' to generate a formset that represents
the site configurations, allowing for display and editing.

The `get` method handles the retrieval of existing site configuration
data, creating a formset instance with the current SiteConfig objects,
and rendering it to the 'corecode/siteconfig.html' template.

The `post` method processes the submitted form data. If the formset
is valid, it saves the changes to the site configurations and displays
a success message. The updated formset and title context are then
rendered back to the same template.

Both methods ensure that the formset and other context data are
passed to the template for display to the user."
,"class SessionUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = AcademicSession
    form_class = AcademicSessionForm
    success_url = reverse_lazy('sessions')
    success_message = 'Session successfully updated.'
    template_name = 'corecode/mgt_form.html'

    def form_valid(self, form):
        obj = self.object
        if obj.current == False:
            terms = AcademicSession.objects.filter(current=True).exclude(name
                =obj.name).exists()
            if not terms:
                messages.warning(self.request,
                    'You must set a session to current.')
                return redirect('session-list')
        return super().form_valid(form)
",74,92.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SessionUpdateView,,class,710,"The `SessionUpdateView` class is a view for updating an instance of `AcademicSession`. It uses a combination of mixins and a generic `UpdateView` to require user login, provide a success message upon a successful update, and define the update behavior.

Attributes:
    model (AcademicSession): The model that this view will update.
    form_class (AcademicSessionForm): The form class used for updating the model instance.
    success_url (str): The URL to redirect to after a successful update. Uses `reverse_lazy` to resolve the URL for the 'sessions' view.
    success_message (str): The message displayed to the user upon a successful update.
    template_name (str): The path to the template used for rendering the update form.

Methods:
    form_valid(form): Extends the superclass method to include additional validation.
        Checks if the `current` attribute of the object being updated is set to `False`. If true, it ensures that at least one other `AcademicSession` instance is set to `current`. If not, it sends a warning message to the user and redirects to the session list view without updating the object.

Notes:
    This view requires the user to be logged in due to `LoginRequiredMixin`.
    `SuccessMessageMixin` provides a way to display a success message to the user."
,"from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import AcademicSession, AcademicTerm


@receiver(post_save, sender=AcademicSession)
def after_saving_session(sender, created, instance, *args, **kwargs):
    """"""Change all academic sessions to false if this is true""""""
    if instance.current is True:
        AcademicSession.objects.exclude(pk=instance.id).update(current=False)


@receiver(post_save, sender=AcademicTerm)
def after_saving_term(sender, created, instance, *args, **kwargs):
    """"""Change all academic terms to false if this is true.""""""
    if instance.current is True:
        AcademicTerm.objects.exclude(pk=instance.id).update(current=False)
",0,,../../dziwne/Django-School-Management-System/apps/corecode/signals.py,signals,signals,,module,707,nan
,"class SessionDeleteView(LoginRequiredMixin, DeleteView):
    model = AcademicSession
    success_url = reverse_lazy('sessions')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The session {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        if obj.current == True:
            messages.warning(request,
                'Cannot delete session as it is set to current')
            return redirect('sessions')
        messages.success(self.request, self.success_message.format(obj.name))
        return super(SessionDeleteView, self).delete(request, *args, **kwargs)
",95,107.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SessionDeleteView,,class,694,"This view handles the deletion of an AcademicSession object.

Upon deletion, it redirects to the 'sessions' URL and displays a success message that
includes the name of the deleted session. If the session is marked as 'current', deletion
is prevented, and a warning message is displayed instead.

Attributes:
    model (Model): The model associated with the view, expected to be AcademicSession.
    success_url (str): The URL to redirect to after successful deletion, lazy-evaluated.
    template_name (str): The path to the template used for the confirmation page.
    success_message (str): The message displayed on successful deletion.

Methods:
    delete(request, *args, **kwargs): Overrides the delete method to perform a check before
        deletion. If the session is the current session, it redirects to the 'sessions' URL
        without deleting and shows a warning. Otherwise, it proceeds with deletion and
        displays a success message."
,"class TermUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = AcademicTerm
    form_class = AcademicTermForm
    success_url = reverse_lazy('terms')
    success_message = 'Term successfully updated.'
    template_name = 'corecode/mgt_form.html'

    def form_valid(self, form):
        obj = self.object
        if obj.current == False:
            terms = AcademicTerm.objects.filter(current=True).exclude(name=
                obj.name).exists()
            if not terms:
                messages.warning(self.request,
                    'You must set a term to current.')
                return redirect('term')
        return super().form_valid(form)
",128,146.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,TermUpdateView,,class,681,"This class-based view handles the updating of AcademicTerm instances.

Upon a successful update, it redirects to a predefined URL, displays a success message,
and uses a specific template for rendering the form. It also ensures that at least one
AcademicTerm is set to 'current' to maintain data integrity.

Attributes:
    model (Model): The model that this view will update instances of.
    form_class (forms.ModelForm): The form class to use for creating the form.
    success_url (str or callable): The URL to redirect to after a successful update.
    success_message (str): The message to display after a successful update.
    template_name (str): The path to the HTML template to use for this view.

Methods:
    form_valid(form): Checks that there is at least one term set to 'current' before
                      updating an instance. If no term is set to 'current', displays a
                      warning message and redirects to the 'term' URL without updating."
,"class TermDeleteView(LoginRequiredMixin, DeleteView):
    model = AcademicTerm
    success_url = reverse_lazy('terms')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The term {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        if obj.current == True:
            messages.warning(request,
                'Cannot delete term as it is set to current')
            return redirect('terms')
        messages.success(self.request, self.success_message.format(obj.name))
        return super(TermDeleteView, self).delete(request, *args, **kwargs)
",149,161.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,TermDeleteView,,class,673,"A view that handles the deletion of an academic term.

This view extends Django's generic DeleteView and requires a user to be logged in to perform the deletion. It is tied to the `AcademicTerm` model and uses a specific template to confirm the deletion.

Upon successful deletion, it redirects to the URL name 'terms' and displays a success message indicating that the term and all its attached content have been deleted.

If the term is currently set as active (marked by the 'current' attribute), the deletion is prevented, and a warning message is displayed to the user.

Attributes:
    model: The model associated with this view (AcademicTerm).
    success_url: The URL to redirect to after a successful deletion.
    template_name: The path to the template used for confirming deletion.
    success_message: The message displayed upon successful deletion of an object.

Methods:
    delete: Extends the DeleteView's delete method with additional logic to prevent deletion of the current term and to display messages."
,"class StudentUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Student
    fields = '__all__'
    success_message = 'Record successfully updated.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StudentUpdateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
        return form
",45,60.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,StudentUpdateView,,class,672,"A view for updating Student records.

Inherits from Django's built-in LoginRequiredMixin to ensure that the user is 
logged in, SuccessMessageMixin to display a success message upon successful 
form submission, and UpdateView to provide the default behavior for updating objects.

This view updates all fields of the Student model. It customizes the form by adding 
a date picker widget to 'date_of_birth' and 'date_of_admission' fields, and adjusts 
the size of 'address' and 'others' fields with a text area widget."
,"class ReceiptCreateView(LoginRequiredMixin, CreateView):
    model = Receipt
    fields = ['amount_paid', 'date_paid', 'comment']
    success_url = reverse_lazy('invoice-list')

    def form_valid(self, form):
        obj = form.save(commit=False)
        invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
        obj.invoice = invoice
        obj.save()
        return redirect('invoice-list')

    def get_context_data(self, **kwargs):
        context = super(ReceiptCreateView, self).get_context_data(**kwargs)
        invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
        context['invoice'] = invoice
        return context
",89,105.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,ReceiptCreateView,,class,656,"This view extends LoginRequiredMixin and CreateView to handle the creation of Receipt instances.

It requires the user to be logged in and provides a form with the 'amount_paid', 'date_paid', and 'comment' fields for creating a Receipt. Upon successfully creating a receipt, it redirects the user to the 'invoice-list' URL.

The view also injects the associated Invoice instance into the context data, allowing the template to access invoice details.

Attributes:
    model: The model that this view is creating instances of, Receipt in this case.
    fields: A list of field names that this view will include in the form.
    success_url: A lazy reference to the URL where the user should be redirected upon successful form submission.

Methods:
    form_valid(form): Customizes the form handling to associate the created Receipt with an Invoice.
    get_context_data(**kwargs): Adds the invoice to the context for the template."
,"class StaffCreateView(SuccessMessageMixin, CreateView):
    model = Staff
    fields = '__all__'
    success_message = 'New staff successfully added'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StaffCreateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
        return form
",20,34.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,StaffCreateView,,class,646,"A view for creating new staff records in the system.

This view extends the functionality of a generic CreateView and a SuccessMessageMixin
to handle the creation of Staff objects. It includes all fields from the Staff model
in the creation form and provides a success message upon successful addition of a new
staff member.

Custom form handling is implemented to enhance the user experience by adding date pickers
to date fields and adjusting the textarea widget for the address and others fields to a single row."
,"class StaffUpdateView(SuccessMessageMixin, UpdateView):
    model = Staff
    fields = '__all__'
    success_message = 'Record successfully updated.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StaffUpdateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
        return form
",37,51.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,StaffUpdateView,,class,646,"A view for updating a staff member's record in the database.

This view inherits from Django's `SuccessMessageMixin` and `UpdateView` to provide
a form for editing a `Staff` instance. Upon successful update, a success message
is displayed to the user.

The form is customized in the `get_form` method to include date pickers for date fields 
and to adjust the number of rows for text area fields. The `date_of_birth` and 
`date_of_admission` fields use a date picker widget, while the `address` and `others` 
fields have their textarea input's rows attribute set to 1 for a more compact display."
,"def post(self, request, *args, **kwargs):
    form = self.form_class(request.POST, initial={'current_session':
        AcademicSession.objects.get(current=True), 'current_term':
        AcademicTerm.objects.get(current=True)})
    if form.is_valid():
        session = form.cleaned_data['current_session']
        term = form.cleaned_data['current_term']
        AcademicSession.objects.filter(name=session).update(current=True)
        AcademicSession.objects.exclude(name=session).update(current=False)
        AcademicTerm.objects.filter(name=term).update(current=True)
    return render(request, self.template_name, {'form': form})
",256,271.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,post,CurrentSessionAndTermView,method,636,"Handles POST requests for a given form submission related to academic sessions and terms.

This method initializes the form with the current academic session and term, validates the submitted form,
and then updates the specified academic session and term to be the current ones.

Args:
    request: The HttpRequest object containing metadata and the POST data.
    *args: Variable length argument list.
    **kwargs: Arbitrary keyword arguments.

Returns:
    HttpResponse object with the rendered template specified by `self.template_name` and the form context."
,"from django import forms
from django.forms import modelformset_factory
from apps.corecode.models import AcademicSession, AcademicTerm, Subject
from .models import Result


class CreateResults(forms.Form):
    session = forms.ModelChoiceField(queryset=AcademicSession.objects.all())
    term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all())
    subjects = forms.ModelMultipleChoiceField(queryset=Subject.objects.all(
        ), widget=forms.CheckboxSelectMultiple)


EditResults = modelformset_factory(Result, fields=('test_score',
    'exam_score'), extra=0, can_delete=True)
",0,,../../dziwne/Django-School-Management-System/apps/result/forms.py,forms,forms,,module,589,nan
Django's command-line utility for administrative tasks.,"""""""Django's command-line utility for administrative tasks.""""""
import os
import sys


def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_app.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            ""Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?""
            ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
",0,,../../dziwne/Django-School-Management-System/manage.py,manage,manage,,module,582,nan
,"class StudentCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Student
    fields = '__all__'
    success_message = 'New student successfully added.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StudentCreateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
        return form
",31,42.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,StudentCreateView,,class,570,"This view creates a new student record.

Inherits from `LoginRequiredMixin`, `SuccessMessageMixin`, and `CreateView` 
to ensure that only authenticated users can access this view, provide a 
success message after creating a student, and display a form for creating 
objects of the `Student` model, respectively.

The view uses the `Student` model and allows all fields to be entered in 
the form. Upon successful submission of the form, a message is displayed 
indicating that a new student has been successfully added.

In the `get_form` method, a date picker is added to the 'date_of_birth' 
field, and 'address' and 'others' fields are customized to display with a 
specific number of rows in their respective textarea widgets."
,"from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import Invoice


@receiver(post_save, sender=Invoice)
def after_creating_invoice(sender, instance, created, **kwargs):
    if created:
        previous_inv = Invoice.objects.filter(student=instance.student
            ).exclude(id=instance.id).last()
        if previous_inv:
            previous_inv.status = 'closed'
            previous_inv.save()
            instance.balance_from_previous_term = previous_inv.balance()
            instance.save()
",0,,../../dziwne/Django-School-Management-System/apps/finance/signals.py,signals,signals,,module,549,nan
,"class ClassDeleteView(LoginRequiredMixin, DeleteView):
    model = StudentClass
    success_url = reverse_lazy('classes')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The class {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        print(obj.name)
        messages.success(self.request, self.success_message.format(obj.name))
        return super(ClassDeleteView, self).delete(request, *args, **kwargs)
",190,200.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,ClassDeleteView,,class,533,"A view for deleting a specific instance of `StudentClass`.

This view extends Django's `LoginRequiredMixin` and `DeleteView` to ensure that
only authenticated users can access the view and provide a mechanism for deleting
a `StudentClass` object.

Attributes:
    model (Model): The model associated with this view, which is `StudentClass`.
    success_url (str): A lazy reverse URL to redirect to after the class is deleted.
    template_name (str): The path to the template used for the confirmation of deletion.
    success_message (str): A message displayed to the user upon successful deletion.

Methods:
    delete: Overrides the `delete` method to print the name of the object being deleted,
        send a success message, and then proceed with the standard deletion process."
,"@login_required
def edit_results(request):
    if request.method == 'POST':
        form = EditResults(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Results successfully updated')
            return redirect('edit-results')
    else:
        results = Result.objects.filter(session=request.current_session,
            term=request.current_term)
        form = EditResults(queryset=results)
    return render(request, 'result/edit_results.html', {'formset': form})
",73,85.0,../../dziwne/Django-School-Management-System/apps/result/views.py,views,edit_results,views,function,524,"Handles the result editing process for authenticated users.

This view function is decorated with `@login_required` to ensure that only authenticated
users can access it. It facilitates both GET and POST requests.

- On a GET request, it retrieves the current session and term results of the user and
  initializes an `EditResults` form with the retrieved queryset, which is then passed
  to the 'result/edit_results.html' template for display.

- On a POST request, it processes the submitted `EditResults` form. If the form is valid,
  it saves the updated results to the database, sets a success message, and redirects to the
  'edit-results' URL.

Parameters:
- request: HttpRequest object representing the current request.

Returns:
- HttpResponse object that renders the 'result/edit_results.html' template with a context
  containing the 'formset' on a GET request, or a redirection to 'edit-results' URL after
  successfully processing the form on a POST request."
,"def get_context_data(self, **kwargs):
    context = super(InvoiceUpdateView, self).get_context_data(**kwargs)
    if self.request.POST:
        context['receipts'] = InvoiceReceiptFormSet(self.request.POST,
            instance=self.object)
        context['items'] = InvoiceItemFormset(self.request.POST, instance=
            self.object)
    else:
        context['receipts'] = InvoiceReceiptFormSet(instance=self.object)
        context['items'] = InvoiceItemFormset(instance=self.object)
    return context
",59,71.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,get_context_data,InvoiceUpdateView,method,512,"Build the context data for the invoice update view.

This method extends the base context data by adding formsets for receipts and items associated with an invoice. If the request method is POST, the formsets are populated with POST data; otherwise, they are initialized with the instance data (for an update view).

Returns:
    dict: Context dictionary containing the base context data, and:
          - 'receipts': An instance of InvoiceReceiptFormSet, either empty or filled with POST data.
          - 'items': An instance of InvoiceItemFormset, either empty or filled with POST data."
,"class SubjectDeleteView(LoginRequiredMixin, DeleteView):
    model = Subject
    success_url = reverse_lazy('subjects')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The subject {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        messages.success(self.request, self.success_message.format(obj.name))
        return super(SubjectDeleteView, self).delete(request, *args, **kwargs)
",229,238.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SubjectDeleteView,,class,511,"A view for deleting a Subject instance.

This view extends both `LoginRequiredMixin` and `DeleteView` to ensure that
only authenticated users can delete a subject. Upon successful deletion, it
redirects to the URL named 'subjects' and displays a success message that
includes the name of the deleted subject.

Attributes:
    model: The model that this view will act upon, which is the `Subject` model.
    success_url: A lazy reverse URL to redirect to after the object is deleted.
    template_name: The path to the template used for the confirmation page of deletion.
    success_message: The message displayed to the user upon successful deletion.

Methods:
    delete: Overrides the delete method to add a success message before performing
    the actual deletion and then calls the parent class's delete method."
,"from django.urls import path
from .views import StaffCreateView, StaffDeleteView, StaffDetailView, StaffListView, StaffUpdateView
urlpatterns = [path('list/', StaffListView.as_view(), name='staff-list'),
    path('<int:pk>/', StaffDetailView.as_view(), name='staff-detail'), path
    ('create/', StaffCreateView.as_view(), name='staff-create'), path(
    '<int:pk>/update/', StaffUpdateView.as_view(), name='staff-update'),
    path('<int:pk>/delete/', StaffDeleteView.as_view(), name='staff-delete')]
",0,,../../dziwne/Django-School-Management-System/apps/staffs/urls.py,urls,urls,,module,502,nan
,"class DownloadCSVViewdownloadcsv(LoginRequiredMixin, View):

    def get(self, request, *args, **kwargs):
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'
            ] = 'attachment; filename=""student_template.csv""'
        writer = csv.writer(response)
        writer.writerow(['registration_number', 'surname', 'firstname',
            'other_names', 'gender', 'parent_number', 'address',
            'current_class'])
        return response
",76,95.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,DownloadCSVViewdownloadcsv,,class,493,"A view for downloading a CSV file template for student information.

This Django view extends `LoginRequiredMixin` and `View`, ensuring that the user
must be logged in to access it. When a GET request is made to this view, it initiates
the download of a CSV file named ""student_template.csv"".

The generated CSV file contains a header row with the following columns:
registration_number, surname, firstname, other_names, gender, parent_number,
address, and current_class. No actual student data is included in the CSV; it
serves as a template for users to fill in student information.

Attributes:
    Inherits from `LoginRequiredMixin` and `View` classes from Django.

Methods:
    get(request, *args, **kwargs): Handles the GET request to download the CSV file."
,"from .models import AcademicSession, AcademicTerm


class SiteWideConfigs:

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        current_session = AcademicSession.objects.get(current=True)
        current_term = AcademicTerm.objects.get(current=True)
        request.current_session = current_session
        request.current_term = current_term
        response = self.get_response(request)
        return response
",0,,../../dziwne/Django-School-Management-System/apps/corecode/middleware.py,middleware,middleware,,module,483,nan
,"import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [('students', '0001_initial')]
    operations = [migrations.AlterField(model_name='student', name=
        'parent_mobile_number', field=models.CharField(blank=True,
        max_length=13, validators=[django.core.validators.RegexValidator(
        message=""Entered mobile number isn't in a right format!"", regex=
        '^[0-9]{10,15}$')]))]
",0,,../../dziwne/Django-School-Management-System/apps/students/migrations/0002_auto_20201124_0614.py,0002_auto_20201124_0614,0002_auto_20201124_0614,,module,474,nan
,"import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [('staffs', '0001_initial')]
    operations = [migrations.AlterField(model_name='staff', name=
        'mobile_number', field=models.CharField(blank=True, max_length=13,
        validators=[django.core.validators.RegexValidator(message=
        ""Entered mobile number isn't in a right format!"", regex=
        '^[0-9]{10,15}$')]))]
",0,,../../dziwne/Django-School-Management-System/apps/staffs/migrations/0002_auto_20201124_0614.py,0002_auto_20201124_0614,0002_auto_20201124_0614,,module,463,nan
,"def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_app.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            ""Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?""
            ) from exc
    execute_from_command_line(sys.argv)
",7,17.0,../../dziwne/Django-School-Management-System/manage.py,manage,main,manage,function,457,"This function is the entry point for a Django application. It sets the default environment variable
'DJANGO_SETTINGS_MODULE' to the settings module of the 'school_app' application. It then attempts to
import the 'execute_from_command_line' function from Django's core management module. If the import
fails, an ImportError is raised with a message indicating that Django might not be installed or
properly configured in the PYTHONPATH, or that the virtual environment might not be activated. If the
import is successful, it calls 'execute_from_command_line' with the command-line arguments to
execute the corresponding Django command-line utility."
add date picker in forms,"def get_form(self):
    """"""add date picker in forms""""""
    form = super(StudentUpdateView, self).get_form()
    form.fields['date_of_birth'].widget = widgets.DateInput(attrs={'type':
        'date'})
    form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
        'type': 'date'})
    form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
    form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
    return form
",50,60.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,get_form,StudentUpdateView,method,456,"Customizes the form for updating student information by adding date pickers to the date_of_birth and date_of_admission fields, and adjusts the textarea widget for the address and others fields with a specific number of rows.

This method overrides the parent class's get_form method to modify the widgets used for the date_of_birth and date_of_admission fields to use a DateInput widget with a 'date' type attribute. It also sets the textarea widgets for the address and others fields to display with two rows each.

Returns:
    form (ModelForm): The customized form instance ready for rendering."
add date picker in forms,"def get_form(self):
    """"""add date picker in forms""""""
    form = super(StaffCreateView, self).get_form()
    form.fields['date_of_birth'].widget = widgets.DateInput(attrs={'type':
        'date'})
    form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
        'type': 'date'})
    form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
    form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
    return form
",25,34.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,get_form,StaffCreateView,method,454,"Customizes the form for the StaffCreateView by adding date picker widgets to
the 'date_of_birth' and 'date_of_admission' fields and setting the textarea
widget with specific row attributes for 'address' and 'others' fields.

Returns:
    form (Form): A form instance with modified widgets for specific fields."
,"from django.forms import inlineformset_factory, modelformset_factory
from .models import Invoice, InvoiceItem, Receipt
InvoiceItemFormset = inlineformset_factory(Invoice, InvoiceItem, fields=[
    'description', 'amount'], extra=1, can_delete=True)
InvoiceReceiptFormSet = inlineformset_factory(Invoice, Receipt, fields=(
    'amount_paid', 'date_paid', 'comment'), extra=0, can_delete=True)
Invoices = modelformset_factory(Invoice, exclude=(), extra=4)
",0,,../../dziwne/Django-School-Management-System/apps/finance/forms.py,forms,forms,,module,454,nan
add date picker in forms,"def get_form(self):
    """"""add date picker in forms""""""
    form = super(StaffUpdateView, self).get_form()
    form.fields['date_of_birth'].widget = widgets.DateInput(attrs={'type':
        'date'})
    form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
        'type': 'date'})
    form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
    form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
    return form
",42,51.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,get_form,StaffUpdateView,method,454,"Customizes the form for the StaffUpdateView by adding specific widgets to the form fields.

This method overrides the default form creation to add date pickers to 'date_of_birth'
and 'date_of_admission' fields, and it modifies the 'address' and 'others' fields to use a
single-row textarea widget.

Returns:
    form (Form): The customized form with the updated widgets for specified fields."
,"class SessionCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = AcademicSession
    form_class = AcademicSessionForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('sessions')
    success_message = 'New session successfully added'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Add new session'
        return context
",61,71.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SessionCreateView,,class,450,"A view for creating a new academic session in the system.

This view extends `LoginRequiredMixin`, `SuccessMessageMixin`, and `CreateView`
to create a secure form where authenticated users can add new academic sessions.

Attributes:
    model: The model associated with this view, which is `AcademicSession`.
    form_class: The form class used for creating a new session instance, `AcademicSessionForm`.
    template_name: The path to the HTML template to use for this view.
    success_url: The URL to redirect to after successfully creating a session.
    success_message: A message displayed to the user upon successful creation of a session.

Methods:
    get_context_data(**kwargs): Extends the base method to add the 'title' context variable.
        This title is displayed on the template when rendering the page."
,"class CurrentSessionForm(forms.Form):
    current_session = forms.ModelChoiceField(queryset=AcademicSession.
        objects.all(), help_text=
        'Click <a href=""/session/create/?next=current-session/"">here</a> to add new session'
        )
    current_term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all
        (), help_text=
        'Click <a href=""/term/create/?next=current-session/"">here</a> to add new term'
        )
",54,62.0,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,CurrentSessionForm,,class,442,"A Django form for selecting the current academic session and term.

Attributes:
    current_session (ModelChoiceField): A dropdown field populated with all AcademicSession objects.
        Provides a link to add a new session in the help text.
    current_term (ModelChoiceField): A dropdown field populated with all AcademicTerm objects.
        Provides a link to add a new term in the help text."
,"@receiver(post_save, sender=Invoice)
def after_creating_invoice(sender, instance, created, **kwargs):
    if created:
        previous_inv = Invoice.objects.filter(student=instance.student
            ).exclude(id=instance.id).last()
        if previous_inv:
            previous_inv.status = 'closed'
            previous_inv.save()
            instance.balance_from_previous_term = previous_inv.balance()
            instance.save()
",8,19.0,../../dziwne/Django-School-Management-System/apps/finance/signals.py,signals,after_creating_invoice,signals,function,435,"Signal receiver for the post_save event of an Invoice model.

This function is triggered after an Invoice instance is saved. If a new invoice
is created, it looks for the most recent invoice for the same student, excluding
the current instance. If a previous invoice exists, it sets the status of that
previous invoice to 'closed' and saves it. Furthermore, it updates the balance
from the previous term on the newly created invoice to the balance of the previous
invoice and saves the new instance.

Parameters:
- sender: The model class that sent the signal.
- instance: The instance of the model that's being saved.
- created: A boolean indicating whether this is a new instance or an update.
- **kwargs: Additional keyword arguments.

No return value."
,"class SiteWideConfigs:

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        current_session = AcademicSession.objects.get(current=True)
        current_term = AcademicTerm.objects.get(current=True)
        request.current_session = current_session
        request.current_term = current_term
        response = self.get_response(request)
        return response
",4,17.0,../../dziwne/Django-School-Management-System/apps/corecode/middleware.py,middleware,SiteWideConfigs,,class,431,"Middleware class that injects the current academic session and term into every request.

The `SiteWideConfigs` middleware retrieves the current `AcademicSession` and `AcademicTerm`
from the database, which are marked as current, and attaches them to the request object.
This allows these details to be readily accessible throughout the handling of the request.

Attributes:
    get_response: A callable that takes a request and returns a response. It represents
                  the next middleware or view in the Django middleware chain.

Methods:
    __call__(request): Processes the request by adding the current academic session and
                       term to it before passing it to the next middleware or view. It
                       then returns the response from the downstream middleware or view."
,"from .models import AcademicSession, AcademicTerm, SiteConfig


def site_defaults(request):
    current_session = AcademicSession.objects.get(current=True)
    current_term = AcademicTerm.objects.get(current=True)
    vals = SiteConfig.objects.all()
    contexts = {'current_session': current_session.name, 'current_term':
        current_term.name}
    for val in vals:
        contexts[val.key] = val.value
    return contexts
",0,,../../dziwne/Django-School-Management-System/apps/corecode/context_processors.py,context_processors,context_processors,,module,429,nan
,"from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [('corecode', '0002_auto_20200506_1520')]
    operations = [migrations.AlterField(model_name='academicsession', name=
        'current', field=models.BooleanField(default=False, null=True)),
        migrations.AlterField(model_name='academicterm', name='current',
        field=models.BooleanField(default=False, null=True))]
",0,,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0003_auto_20200726_0925.py,0003_auto_20200726_0925,0003_auto_20200726_0925,,module,427,nan
,"from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [('corecode', '0003_auto_20200726_0925')]
    operations = [migrations.AlterField(model_name='academicsession', name=
        'current', field=models.BooleanField(default=True)), migrations.
        AlterField(model_name='academicterm', name='current', field=models.
        BooleanField(default=True))]
",0,,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0004_auto_20201124_0614.py,0004_auto_20201124_0614,0004_auto_20201124_0614,,module,405,nan
,"class Migration(migrations.Migration):
    dependencies = [('students', '0001_initial')]
    operations = [migrations.AlterField(model_name='student', name=
        'parent_mobile_number', field=models.CharField(blank=True,
        max_length=13, validators=[django.core.validators.RegexValidator(
        message=""Entered mobile number isn't in a right format!"", regex=
        '^[0-9]{10,15}$')]))]
",7,28.0,../../dziwne/Django-School-Management-System/apps/students/migrations/0002_auto_20201124_0614.py,0002_auto_20201124_0614,Migration,,class,401,"A Django database migration class for altering the 'parent_mobile_number' field in the 'student' model.

This migration class is a part of the 'students' app and depends on the initial migration '0001_initial'
of the same app. Its purpose is to modify the 'parent_mobile_number' field in the 'student' model
to ensure that it can be blank, has a maximum length of 13 characters, and that the values entered into it
comply with a specific regular expression format.

The regular expression validator enforces that the mobile number must be between 10 to 15 digits long.
If the entered mobile number does not match the regular expression, a message will be displayed
stating ""Entered mobile number isn't in a right format!""."
"WSGI config for school_app project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/","""""""
WSGI config for school_app project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/
""""""
import os
from django.core.wsgi import get_wsgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_app.settings')
application = get_wsgi_application()
",0,,../../dziwne/Django-School-Management-System/school_app/wsgi.py,wsgi,wsgi,,module,393,nan
,"class InvoiceDetailView(LoginRequiredMixin, DetailView):
    model = Invoice
    fields = '__all__'

    def get_context_data(self, **kwargs):
        context = super(InvoiceDetailView, self).get_context_data(**kwargs)
        context['receipts'] = Receipt.objects.filter(invoice=self.object)
        context['items'] = InvoiceItem.objects.filter(invoice=self.object)
        return context
",44,52.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,InvoiceDetailView,,class,391,"View for displaying detailed information about a specific invoice.

This view extends Django's DetailView and requires the user to be authenticated
(LoginRequiredMixin). When a GET request is made to this view with a specific
invoice ID, it fetches the associated Invoice object and its related Receipt and
InvoiceItem objects.

Attributes:
    model (Model): The model that this view will display. Set to the Invoice model.
    fields (str): Specifies which fields of the model to display. Set to display all fields.

Methods:
    get_context_data(**kwargs): Overrides the superclass method to add additional context
        for the template. It adds two querysets to the context, 'receipts' containing all
        Receipt objects related to the invoice, and 'items' containing all InvoiceItem
        objects related to the invoice."
,"class Migration(migrations.Migration):
    dependencies = [('staffs', '0001_initial')]
    operations = [migrations.AlterField(model_name='staff', name=
        'mobile_number', field=models.CharField(blank=True, max_length=13,
        validators=[django.core.validators.RegexValidator(message=
        ""Entered mobile number isn't in a right format!"", regex=
        '^[0-9]{10,15}$')]))]
",7,28.0,../../dziwne/Django-School-Management-System/apps/staffs/migrations/0002_auto_20201124_0614.py,0002_auto_20201124_0614,Migration,,class,390,"A Django database migration for altering the 'mobile_number' field of the 'staff' model.

This migration depends on the initial migration of the 'staffs' app. The operation performed
is an alteration of the 'mobile_number' field in the 'staff' model to a CharField with a maximum
length of 13 characters. It can be left blank, and it includes a validator that ensures
the mobile number matches a specific regular expression pattern, enforcing that the number
is between 10 and 15 digits long. The validator will display a custom error message if the
input does not conform to the expected format."
,"def get(self, request, *args, **kwargs):
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'
        ] = 'attachment; filename=""student_template.csv""'
    writer = csv.writer(response)
    writer.writerow(['registration_number', 'surname', 'firstname',
        'other_names', 'gender', 'parent_number', 'address', 'current_class'])
    return response
",77,95.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,get,DownloadCSVViewdownloadcsv,method,388,"Handle HTTP GET request to download a CSV template for student data.

This method generates a CSV file for the user to download, which includes headers
for student information. The CSV file is intended to be used as a template for users
to fill in student data.

Args:
    request: HttpRequest object containing metadata about the request.
    *args: Variable length argument list.
    **kwargs: Arbitrary keyword arguments.

Returns:
    HttpResponse object with a CSV file attached, containing the headers for
    the student data fields. The file is named 'student_template.csv' and is
    served with a content type of 'text/csv'."
"ASGI config for newapp project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/","""""""
ASGI config for newapp project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/
""""""
import os
from django.core.asgi import get_asgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'newapp.settings')
application = get_asgi_application()
",0,,../../dziwne/Django-School-Management-System/school_app/asgi.py,asgi,asgi,,module,385,nan
,"def form_valid(self, form):
    obj = self.object
    if obj.current == False:
        terms = AcademicSession.objects.filter(current=True).exclude(name=
            obj.name).exists()
        if not terms:
            messages.warning(self.request, 'You must set a session to current.'
                )
            return redirect('session-list')
    return super().form_valid(form)
",81,92.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,form_valid,SessionUpdateView,method,385,"Handle the submission of a valid form for an academic session object.

This method checks whether the session object associated with the form is set to 
current. If it is not current, it queries the database for any other academic 
sessions that are set to current, excluding the current object by name. If no 
other current sessions exist, it sends a warning message to the user and 
redirects to the 'session-list' page. If there is at least one current session 
or if the current object is already set to current, it proceeds with the standard 
form handling by calling the superclass's form_valid method.

Returns:
    HttpResponse: A redirect to the 'session-list' page if no current session 
    is set and the current object is not set to current, otherwise the response 
    from the superclass's form_valid method."
,"class Migration(migrations.Migration):
    dependencies = [('corecode', '0002_auto_20200506_1520')]
    operations = [migrations.AlterField(model_name='academicsession', name=
        'current', field=models.BooleanField(default=False, null=True)),
        migrations.AlterField(model_name='academicterm', name='current',
        field=models.BooleanField(default=False, null=True))]
",6,23.0,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0003_auto_20200726_0925.py,0003_auto_20200726_0925,Migration,,class,384,"This migration class is responsible for altering fields within the database schema for 'academicsession' and 'academicterm' models. It is a subclass of the 'Migration' class from the 'migrations' module.

It includes dependencies indicating that it relies on a previous migration identified by the tuple ('corecode', '0002_auto_20200506_1520').

The 'operations' attribute lists the changes to be applied during this migration, which in this case are:
- Altering the 'current' field of the 'academicsession' model to be a BooleanField with a default value of False and allowing null values.
- Similarly altering the 'current' field of the 'academicterm' model with the same parameters.

This migration ensures that the 'current' fields in both models are consistent in allowing null values and have a default set to False, likely reflecting whether the respective session or term is the current one in use."
,"def delete(self, request, *args, **kwargs):
    obj = self.get_object()
    if obj.current == True:
        messages.warning(request,
            'Cannot delete session as it is set to current')
        return redirect('sessions')
    messages.success(self.request, self.success_message.format(obj.name))
    return super(SessionDeleteView, self).delete(request, *args, **kwargs)
",101,107.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,delete,SessionDeleteView,method,380,"Handles the deletion of a session object.

This method retrieves the session object to be deleted and checks if it is currently set as the active session. If the session is active, it generates a warning message and redirects the user back to the session list without deleting the object. If the session is not active, it generates a success message indicating successful deletion and proceeds with the standard delete operation.

Parameters:
    request: HttpRequest object representing the current request.
    *args: Variable length argument list.
    **kwargs: Arbitrary keyword arguments.

Returns:
    HttpResponseRedirect to the 'sessions' route if the session is active, or calls the superclass delete method to delete the object and continue with the standard deletion process if the session is not active.

Raises:
    Any exceptions raised by the superclass delete method or by the get_object method."
,"def site_defaults(request):
    current_session = AcademicSession.objects.get(current=True)
    current_term = AcademicTerm.objects.get(current=True)
    vals = SiteConfig.objects.all()
    contexts = {'current_session': current_session.name, 'current_term':
        current_term.name}
    for val in vals:
        contexts[val.key] = val.value
    return contexts
",4,15.0,../../dziwne/Django-School-Management-System/apps/corecode/context_processors.py,context_processors,site_defaults,context_processors,function,365,"Fetches default settings for the site and the current academic session and term.

This function retrieves the current academic session and term from the database,
marks them as 'current_session' and 'current_term', and then collects all the
SiteConfig objects, adding their key-value pairs to the context dictionary.

Parameters:
    request: The HTTP request object, which is not used in this function but
             is included to adhere to a typical pattern for context processors.

Returns:
    dict: A dictionary containing 'current_session' and 'current_term' along
          with additional settings from SiteConfig.

Raises:
    AcademicSession.DoesNotExist: If no AcademicSession is marked as current.
    AcademicTerm.DoesNotExist: If no AcademicTerm is marked as current."
,"class Migration(migrations.Migration):
    dependencies = [('corecode', '0003_auto_20200726_0925')]
    operations = [migrations.AlterField(model_name='academicsession', name=
        'current', field=models.BooleanField(default=True)), migrations.
        AlterField(model_name='academicterm', name='current', field=models.
        BooleanField(default=True))]
",6,23.0,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0004_auto_20201124_0614.py,0004_auto_20201124_0614,Migration,,class,362,"This migration class is specifically tailored for a Django project's database schema. 
It describes a set of database schema changes to the 'corecode' app that are to be applied sequentially.
The migration depends on a previous migration labeled '0003_auto_20200726_0925'.

The operations include two 'AlterField' operations which modify the 'current' field of the 
'academicsession' model and the 'academicterm' model, respectively. In both cases, the 'current' 
field is changed to a BooleanField with a default value of True, indicating a switch to using a 
BooleanField to represent the current state of the session or term and setting its default state to active."
add date picker in forms,"def get_form(self):
    """"""add date picker in forms""""""
    form = super(StudentCreateView, self).get_form()
    form.fields['date_of_birth'].widget = widgets.DateInput(attrs={'type':
        'date'})
    form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
    form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
    return form
",36,42.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,get_form,StudentCreateView,method,359,"Retrieves the form for creating a student with custom widgets.

This method customizes the form fields by adding a date picker for the date_of_birth field
and textarea widgets for address and others fields with specified row attributes.

Returns:
    form (Form): A Django form instance with customized widgets for date_of_birth, address,
    and others fields."
,"def delete(self, request, *args, **kwargs):
    obj = self.get_object()
    if obj.current == True:
        messages.warning(request, 'Cannot delete term as it is set to current')
        return redirect('terms')
    messages.success(self.request, self.success_message.format(obj.name))
    return super(TermDeleteView, self).delete(request, *args, **kwargs)
",155,161.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,delete,TermDeleteView,method,359,"Handles deletion of an object within a view.

This method overrides the default delete method to add custom behavior before
deleting an object. It checks if the object to be deleted is currently in use
(indicated by the 'current' attribute). If the object is currently in use,
the method prevents deletion, sends a warning message to the user, and
redirects to the 'terms' page. If the object is not currently in use, it sends
a success message to the user and proceeds with the default deletion process.

Parameters:
- request: HttpRequest object representing the current request.
- *args: Variable length argument list.
- **kwargs: Arbitrary keyword arguments.

Returns:
- HttpResponse: Redirect to 'terms' page if the object is currently in use,
  otherwise the response from the parent class's delete method, which typically
  is also a redirect to a success URL.

Side Effects:
- If the object is currently in use, a warning message is added to the request
  context to be displayed to the user.
- If the object is not currently in use, a success message is added to the
  request context to be displayed to the user after the deletion."
,"def form_valid(self, form):
    obj = self.object
    if obj.current == False:
        terms = AcademicTerm.objects.filter(current=True).exclude(name=obj.name
            ).exists()
        if not terms:
            messages.warning(self.request, 'You must set a term to current.')
            return redirect('term')
    return super().form_valid(form)
",135,146.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,form_valid,TermUpdateView,method,354,"Handles the validation of a form submission for an academic term object.

This method checks if the object associated with the form is not set to the current term.
If it isn't, the method then checks if there are any other academic terms marked as current
and excludes the object's name from this check. If no other current terms exist, it sends a
warning message to the user indicating that at least one term must be set to current. The user
is then redirected to the 'term' page. If the validation passes, it proceeds with the parent
class's form_valid method.

Returns:
    - A redirect to the 'term' page with a warning message if no current term is set.
    - The parent class's form_valid method result if the validation passes."
,"class StudentDetailView(LoginRequiredMixin, DetailView):
    model = Student
    template_name = 'students/student_detail.html'

    def get_context_data(self, **kwargs):
        context = super(StudentDetailView, self).get_context_data(**kwargs)
        context['payments'] = Invoice.objects.filter(student=self.object)
        return context
",21,28.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,StudentDetailView,,class,344,"A view that extends Django's `DetailView` and `LoginRequiredMixin` to display
detailed information about a specific `Student` instance.

This view is gated by the requirement that a user must be logged in to access it,
courtesy of the `LoginRequiredMixin`. It renders a template specified by
`template_name` and injects into the context a list of `Invoice` objects
associated with the student being viewed.

Attributes:
    model (Model): The model that this view will display. Should be set to the `Student` model.
    template_name (str): The path to the template that is used to render the detail view.

Methods:
    get_context_data: Overridden method to add `payments` to the template context.
                      The `payments` context variable contains a queryset of `Invoice`
                      objects related to the `Student` instance being viewed."
,"def get_context_data(self, **kwargs):
    context = super(InvoiceCreateView, self).get_context_data(**kwargs)
    if self.request.POST:
        context['items'] = InvoiceItemFormset(self.request.POST, prefix=
            'invoiceitem_set')
    else:
        context['items'] = InvoiceItemFormset(prefix='invoiceitem_set')
    return context
",23,31.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,get_context_data,InvoiceCreateView,method,341,"Extend the context data for the template used by InvoiceCreateView.

This method adds an 'items' key to the context dictionary which contains an
instance of the InvoiceItemFormset. The formset instance is populated with POST
data if the request method is POST, otherwise, it is initialized empty with the
appropriate prefix.

Parameters:
    **kwargs: Arbitrary keyword arguments that can be passed to the superclass
              method and included in the context.

Returns:
    dict: The context dictionary containing all the original data with the
          addition of the 'items' key and its associated InvoiceItemFormset."
,"def post(self, request, *args, **kwargs):
    formset = self.form_class(request.POST)
    if formset.is_valid():
        formset.save()
        messages.success(request, 'Configurations successfully updated')
    context = {'formset': formset, 'title': 'Configuration'}
    return render(request, self.template_name, context)
",42,48.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,post,SiteConfigView,method,326,"Handles the HTTP POST request for a given formset.

This method processes the POST data submitted via the formset defined by `self.form_class`. If the formset is valid, it saves the formset data and adds a success message to the request context. It then prepares the context with the formset and a title, and renders the response using the specified `self.template_name`.

Args:
    request: HttpRequest object representing the current request.
    *args: Variable length argument list.
    **kwargs: Arbitrary keyword arguments.

Returns:
    HttpResponse object that renders the given template with the context containing the formset and title."
,"class Receipt(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)
    amount_paid = models.IntegerField()
    date_paid = models.DateField(default=timezone.now)
    comment = models.CharField(max_length=200, blank=True)

    def __str__(self):
        return f'Receipt on {self.date_paid}'
",59,66.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,Receipt,,class,320,"A Django database model representing a payment receipt.

Attributes:
    invoice (ForeignKey): A reference to the associated Invoice object.
    amount_paid (IntegerField): The amount of money paid.
    date_paid (DateField): The date on which the payment was made. Defaults to the current date.
    comment (CharField): An optional comment or note about the receipt, can be left blank.

Methods:
    __str__(self): Returns a string representation of the receipt, displaying the date it was paid."
,"def form_valid(self, form):
    context = self.get_context_data()
    formset = context['receipts']
    itemsformset = context['items']
    if form.is_valid() and formset.is_valid() and itemsformset.is_valid():
        form.save()
        formset.save()
        itemsformset.save()
    return super().form_valid(form)
",73,81.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,form_valid,InvoiceUpdateView,method,318,"Handles the validation of the form and associated formsets.

This method is called when the form and its related formsets ('receipts' and 'items') have passed validation. It saves the form and formset instances to the database. Afterward, it continues with the standard form_valid process of the parent class.

Returns:
    HttpResponse: An HttpResponse object that represents the result of the parent class's form_valid method, typically redirecting to a success URL."
,"class SessionListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = AcademicSession
    template_name = 'corecode/session_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = AcademicSessionForm()
        return context
",51,58.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SessionListView,,class,318,"This view renders a list of AcademicSession objects to the 'corecode/session_list.html' template. 

Inherits from LoginRequiredMixin to ensure that the user is authenticated, 
SuccessMessageMixin to display a success message when an action is completed, 
and ListView to display objects in a list format.

This view also adds an AcademicSessionForm to the context, allowing the user to interact with 
the form within the rendered template. The form can be used for creating new academic sessions."
,"def form_valid(self, form):
    context = self.get_context_data()
    formset = context['items']
    self.object = form.save()
    if self.object.id != None:
        if form.is_valid() and formset.is_valid():
            formset.instance = self.object
            formset.save()
    return super().form_valid(form)
",33,41.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,form_valid,InvoiceCreateView,method,315,"Process the submission of a valid form.

This method is invoked upon submission of a valid form in a class-based view.
It saves the main object from the form data, then checks if the object has an ID to determine if it was saved properly.
If the form and associated formset are valid, it sets the instance of the formset to the saved object and saves the formset.
Finally, it delegates to the parent class's form_valid method to continue with the normal form handling process.

Returns:
    HttpResponse object: A response object that redirects the user to the success URL defined for the form."
,"class ClassListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = StudentClass
    template_name = 'corecode/class_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = StudentClassForm()
        return context
",164,171.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,ClassListView,,class,308,"A view that lists all student classes, requiring the user to be logged in to access it.

This view extends `LoginRequiredMixin` to ensure that only authenticated users can access the
view. It also extends `SuccessMessageMixin` to provide feedback to the user after successful
operations.

Attributes:
    model: The model that this view will display. In this case, `StudentClass`.
    template_name: The path to the HTML template file used to render the class list page.

Methods:
    get_context_data: Overridden to add a `StudentClassForm` to the context, allowing
    forms to be displayed and handled on the class list page."
,"class TermListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = AcademicTerm
    template_name = 'corecode/term_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = AcademicTermForm()
        return context
",110,117.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,TermListView,,class,306,"This view renders a list of academic terms to users who are logged in.

It inherits from `LoginRequiredMixin` to ensure that only authenticated users can access this view,
from `SuccessMessageMixin` to display a success message when an action is completed, and from
`ListView` to provide a list of objects from the database.

Attributes:
    model (Model): The model that this view will display, which is `AcademicTerm`.
    template_name (str): The path to the HTML template used to render the term list page.

Methods:
    get_context_data: Extends the context dictionary with a new key, 'form', containing
                      an instance of `AcademicTermForm`. This is used to display a form
                      for creating a new academic term alongside the list of terms."
,"class CreateResults(forms.Form):
    session = forms.ModelChoiceField(queryset=AcademicSession.objects.all())
    term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all())
    subjects = forms.ModelMultipleChoiceField(queryset=Subject.objects.all(
        ), widget=forms.CheckboxSelectMultiple)
",9,14.0,../../dziwne/Django-School-Management-System/apps/result/forms.py,forms,CreateResults,,class,305,"A Django form class for creating results associated with an academic session, term, and multiple subjects.

Attributes:
    session (ModelChoiceField): A dropdown field to select an academic session from the existing AcademicSession objects.
    term (ModelChoiceField): A dropdown field to select an academic term from the existing AcademicTerm objects.
    subjects (ModelMultipleChoiceField): A field with checkboxes to select multiple subjects from the existing Subject objects."
,"class SubjectListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = Subject
    template_name = 'corecode/subject_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = SubjectForm()
        return context
",203,210.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SubjectListView,,class,302,"A view that lists all Subject instances for authenticated users.

This view extends from LoginRequiredMixin, SuccessMessageMixin, and ListView,
enforcing that only authenticated users can access the view and providing a way
to display a success message after a certain action.

Attributes:
    model: The model that this view will display, which is the Subject model.
    template_name: The path to the HTML template used for rendering the subject list.

Methods:
    get_context_data: Overridden method to add additional context data to the template.
        It adds a 'form' key to the context with an instance of SubjectForm, which can
        be used for creating new subjects directly from the subject list page."
,"def __call__(self, request):
    current_session = AcademicSession.objects.get(current=True)
    current_term = AcademicTerm.objects.get(current=True)
    request.current_session = current_session
    request.current_term = current_term
    response = self.get_response(request)
    return response
",8,17.0,../../dziwne/Django-School-Management-System/apps/corecode/middleware.py,middleware,__call__,SiteWideConfigs,method,299,"Middleware hook that is executed with each request to attach the current academic session 
and term to the request object.

It retrieves the current academic session and term from the database, assuming that there is 
exactly one of each marked as current at any given time. These objects are then added as 
attributes to the request object, making them readily accessible throughout the processing 
of the request. Afterward, it continues the processing of the request and returns the 
response.

Parameters:
    request: HttpRequest object representing the current request.

Returns:
    HttpResponse object representing the response that should be sent to the client."
,"from django.urls import path
from .views import ResultListView, create_result, edit_results
urlpatterns = [path('create/', create_result, name='create-result'), path(
    'edit-results/', edit_results, name='edit-results'), path('view/all',
    ResultListView.as_view(), name='view-results')]
",0,,../../dziwne/Django-School-Management-System/apps/result/urls.py,urls,urls,,module,293,nan
Change all academic sessions to false if this is true,"@receiver(post_save, sender=AcademicSession)
def after_saving_session(sender, created, instance, *args, **kwargs):
    """"""Change all academic sessions to false if this is true""""""
    if instance.current is True:
        AcademicSession.objects.exclude(pk=instance.id).update(current=False)
",8,11.0,../../dziwne/Django-School-Management-System/apps/corecode/signals.py,signals,after_saving_session,signals,function,290,"After saving an AcademicSession instance, this signal receiver function sets the 'current' field
to False for all other AcademicSession objects if the newly saved or updated instance has its
'current' field set to True. This ensures that only one AcademicSession is marked as current at
any given time.

:param sender: The model class that sent the signal.
:param created: A boolean indicating whether a new record was created.
:param instance: The instance of the AcademicSession that was saved.
:args: Additional positional arguments.
:kwargs: Additional keyword arguments."
,"class StudentBulkUploadView(LoginRequiredMixin, SuccessMessageMixin, CreateView
    ):
    model = StudentBulkUpload
    template_name = 'students/students_upload.html'
    fields = ['csv_file']
    success_url = '/student/list'
    success_message = 'Successfully uploaded students'
",68,73.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,StudentBulkUploadView,,class,284,"A view for handling the bulk upload of student data via a CSV file.

This view inherits from LoginRequiredMixin to enforce user authentication, 
SuccessMessageMixin to display a success message upon successful upload, 
and CreateView to provide a form for creating new objects based on the model.

Attributes:
    model (Model): The model associated with this view, which is StudentBulkUpload.
    template_name (str): The path to the HTML template used to render the view.
    fields (list): A list of model fields to include in the form, in this case, just the CSV file field.
    success_url (str): The URL to redirect to after successful upload.
    success_message (str): The message displayed to the user upon successful upload.

The view expects an authenticated user and upon receiving a valid CSV file,
creates multiple StudentBulkUpload objects, and redirects to the 'success_url'
with the 'success_message' displayed to the user."
Change all academic terms to false if this is true.,"@receiver(post_save, sender=AcademicTerm)
def after_saving_term(sender, created, instance, *args, **kwargs):
    """"""Change all academic terms to false if this is true.""""""
    if instance.current is True:
        AcademicTerm.objects.exclude(pk=instance.id).update(current=False)
",15,18.0,../../dziwne/Django-School-Management-System/apps/corecode/signals.py,signals,after_saving_term,signals,function,279,"After saving an AcademicTerm instance, if the instance's 'current' attribute is set to True,
update all other AcademicTerm instances in the database, setting their 'current' attributes to False.

This function is designed to be connected to the Django post_save signal for the AcademicTerm model,
ensuring that only one AcademicTerm instance can be marked as the current term at any given time.

:param sender: The model class that sent the signal.
:param created: Boolean indicating whether a new record was created.
:param instance: The instance of AcademicTerm that was saved.
:param args: Additional positional arguments (not used).
:param kwargs: Additional keyword arguments (not used)."
,"def get(self, request, *args, **kwargs):
    form = self.form_class(initial={'current_session': AcademicSession.
        objects.get(current=True), 'current_term': AcademicTerm.objects.get
        (current=True)})
    return render(request, self.template_name, {'form': form})
",247,254.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get,CurrentSessionAndTermView,method,277,"Handle GET requests for a form page with initial data pre-filled.

This method prepares and returns an HTML form for a web page, with initial values set to the currently
active academic session and term. It uses the `form_class` attribute to generate the form and populates
the 'current_session' and 'current_term' fields with the current active session and term from the
database, respectively. The rendered form is then returned within the specified `template_name`.

Arguments:
    request: HttpRequest object representing the incoming request.
    *args: Variable length argument list.
    **kwargs: Arbitrary keyword arguments.

Returns:
    HttpResponse object with the rendered form included in the context, ready to be displayed to the user."
,"class ClassCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = StudentClass
    form_class = StudentClassForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('classes')
    success_message = 'New class successfully added'
",174,179.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,ClassCreateView,,class,275,"A view for creating a new StudentClass instance.

This view extends Django's generic CreateView and utilizes mixins to
require a user to be logged in (LoginRequiredMixin) and to display a
success message upon successful form submission (SuccessMessageMixin).

Attributes:
    model: The model that this view will create instances of (StudentClass).
    form_class: The form class used to create the model instance (StudentClassForm).
    template_name: The path to the HTML template to use for displaying the form ('corecode/mgt_form.html').
    success_url: The URL to redirect to after successful creation, defined using reverse_lazy('classes').
    success_message: A message to display when a new class is successfully added ('New class successfully added')."
,"class TermCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = AcademicTerm
    form_class = AcademicTermForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('terms')
    success_message = 'New term successfully added'
",120,125.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,TermCreateView,,class,271,"A view for creating a new academic term within a web application.

This view extends Django's built-in CreateView and mixes in functionality
for requiring a login (LoginRequiredMixin) and displaying a success message
(SuccessMessageMixin) after the object is created.

Attributes:
    model: The data model that represents an academic term, which this view will create.
    form_class: The form class used for creating a new academic term.
    template_name: The path to the HTML template used to render the form.
    success_url: The URL to redirect to after a successful creation of an academic term.
    success_message: A message displayed to the user upon the successful creation of a term."
,"def get_context_data(self, **kwargs):
    context = super(InvoiceDetailView, self).get_context_data(**kwargs)
    context['receipts'] = Receipt.objects.filter(invoice=self.object)
    context['items'] = InvoiceItem.objects.filter(invoice=self.object)
    return context
",48,52.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,get_context_data,InvoiceDetailView,method,270,"Extend the base context for an invoice detail view with additional data.

This method extends the base context provided by a generic detail view
with additional querysets specific to the invoice being viewed. It
adds lists of associated receipts and invoice items to the context.

Args:
    **kwargs: Arbitrary keyword arguments that are passed to the base
        implementation and can contain context data to be added or
        modified.

Returns:
    dict: The context dictionary updated with 'receipts' and 'items' keys,
        which hold querysets of Receipt and InvoiceItem objects related to
        the current invoice, respectively."
,"class SubjectCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Subject
    form_class = SubjectForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('subjects')
    success_message = 'New subject successfully added'
",213,218.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SubjectCreateView,,class,270,"A view for creating new Subject instances.

This view extends Django's CreateView and mixes in login requirement and success message functionality.
It uses the `Subject` model and the associated `SubjectForm` form class for the creation of new subjects.
The view is rendered using the 'corecode/mgt_form.html' template. Upon successful creation of a subject,
the user is redirected to the 'subjects' URL, and a success message is displayed.

Attributes:
    model: The model that this view will create instances of.
    form_class: The form class for creating `model` instances.
    template_name: The path to the template to use for this view.
    success_url: The URL to redirect to after successful creation of an object.
    success_message: The message displayed to the user upon successful creation."
Academic Session,"class AcademicSession(models.Model):
    """"""Academic Session""""""
    name = models.CharField(max_length=200, unique=True)
    current = models.BooleanField(default=True)


    class Meta:
        ordering = ['-name']

    def __str__(self):
        return self.name
",16,26.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,AcademicSession,,class,265,"Represents an academic session in a school or university's record system.

The AcademicSession model is used to store information about a specific academic period, typically a semester or year. Each academic session is uniquely identified by its name.

Attributes:
    name (models.CharField): The name of the academic session, which is a unique field with a maximum length of 200 characters.
    current (models.BooleanField): A boolean field that indicates whether the academic session is the current one; defaults to True.

Meta:
    ordering: A list of model fields used to determine the default ordering, with the academic sessions ordered by their names in descending order.

Methods:
    __str__(self): Returns the name of the academic session for display purposes."
,"class ClassUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = StudentClass
    fields = ['name']
    success_url = reverse_lazy('classes')
    success_message = 'class successfully updated.'
    template_name = 'corecode/mgt_form.html'
",182,187.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,ClassUpdateView,,class,262,"A view for updating an existing StudentClass object.

This view extends the generic Django UpdateView and includes additional mixins for requiring
login (LoginRequiredMixin) and displaying a success message (SuccessMessageMixin). It is used
to update the details of a specific class, identified by a unique ID or primary key.

Attributes:
    model: The model that this view will update.
    fields: The fields of the model that will be included in the form.
    success_url: The URL to redirect to after a successful update.
    success_message: A message to display when a class is updated successfully.
    template_name: The path to the HTML template to use for rendering the form.

The view expects to be called with a URL that includes the ID of the class to be updated.
Upon a successful update, the user is redirected to the 'classes' URL, and a success message
is shown."
,"class SubjectUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Subject
    fields = ['name']
    success_url = reverse_lazy('subjects')
    success_message = 'Subject successfully updated.'
    template_name = 'corecode/mgt_form.html'
",221,226.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SubjectUpdateView,,class,262,"A view for updating an existing Subject instance.

This view extends Django's built-in UpdateView and incorporates
mixins for requiring the user to be logged in and for displaying
a success message upon a successful update. It is used to allow
users to modify the name of a Subject record.

Attributes:
    model (django.db.models.Model): The model that this view will update.
    fields (list): The list of fields that are allowed to be edited. Currently, only the 'name' field can be changed.
    success_url (str): The URL to redirect to after a successful update. This is lazily evaluated to reverse to 'subjects'.
    success_message (str): A message displayed when a subject has been successfully updated.
    template_name (str): The path to the HTML template used for rendering the update form."
Academic Term,"class AcademicTerm(models.Model):
    """"""Academic Term""""""
    name = models.CharField(max_length=20, unique=True)
    current = models.BooleanField(default=True)


    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name
",29,39.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,AcademicTerm,,class,257,"Represents an academic term within an educational system.

Each academic term is uniquely identified by its name. The 'name' field
is restricted to a maximum of 20 characters and must be unique across
all instances of the class. 

The 'current' field is a boolean indicating whether the term is the
current one in context. By default, every new term created is considered
the current term unless specified otherwise.

The default ordering of instances of this class is based on the 'name'
field in ascending order.

Attributes:
    name (models.CharField): The name of the academic term, with a max length of 20 characters.
    current (models.BooleanField): A flag indicating if this is the current term, defaults to True.

Methods:
    __str__(self): Returns the name of the academic term for display purposes."
,"class StudentClass(models.Model):
    name = models.CharField(max_length=200, unique=True)


    class Meta:
        verbose_name = 'Class'
        verbose_name_plural = 'Classes'
        ordering = ['name']

    def __str__(self):
        return self.name
",54,63.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,StudentClass,,class,257,"Represents a class of students within the school system.

Attributes:
    name (models.CharField): The name of the class. It is a unique field with a maximum length of 200 characters.

Meta options:
    verbose_name: A human-readable name for the class, singular form.
    verbose_name_plural: A human-readable name for the class, plural form.
    ordering: The default ordering for the class list, which is based on the 'name' attribute in ascending order.

Methods:
    __str__: Returns the string representation of the student class, which is its name."
,"def delete(self, request, *args, **kwargs):
    obj = self.get_object()
    print(obj.name)
    messages.success(self.request, self.success_message.format(obj.name))
    return super(ClassDeleteView, self).delete(request, *args, **kwargs)
",196,200.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,delete,ClassDeleteView,method,239,"Handles the DELETE HTTP request by deleting a specific object retrieved by `get_object`.

First, it retrieves the object using the `get_object` method and prints its name to the console.
Then, it creates a success message with the object's name formatted into it and adds this message to the request.
Finally, it calls the superclass's delete method to perform the actual deletion process.

Args:
    request: The HTTP request object.
    *args: Variable length argument list.
    **kwargs: Arbitrary keyword arguments.

Returns:
    HttpResponse object that represents the result of the superclass's delete method call."
,"def get_context_data(self, **kwargs):
    context = super(ReceiptCreateView, self).get_context_data(**kwargs)
    invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
    context['invoice'] = invoice
    return context
",101,105.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,get_context_data,ReceiptCreateView,method,228,"Extend the context data for the receipt creation view.

This method extends the base context data with the invoice instance.
It fetches the invoice using the primary key provided in the GET request parameters.

Args:
    **kwargs: Arbitrary keyword arguments passed to the method.

Returns:
    dict: The context dictionary containing all the original context data,
    with the addition of the 'invoice' key pointing to the relevant invoice instance."
,"class AcademicSessionTest(TestCase):

    def test_academicsession(self):
        session = AcademicSession.objects.create(name='test session',
            current=True)
        self.assertEqual(str(session), 'test session')
",17,20.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,AcademicSessionTest,,class,225,"The AcademicSessionTest class contains tests for the AcademicSession model.

This class inherits from TestCase and contains a single test method:
- `test_academicsession`: This method creates an AcademicSession instance with the name 'test session' and sets it to be the current session. It then asserts that the string representation of the created AcademicSession instance is equal to 'test session', ensuring that the `__str__` method of the AcademicSession model is functioning as expected."
,"def delete(self, request, *args, **kwargs):
    obj = self.get_object()
    messages.success(self.request, self.success_message.format(obj.name))
    return super(SubjectDeleteView, self).delete(request, *args, **kwargs)
",235,238.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,delete,SubjectDeleteView,method,221,"Handles the HTTP DELETE request for a given object.

This method retrieves the object to be deleted using `self.get_object()`,
displays a success message formatted with the object's name, and then calls
the superclass's delete method to perform the actual deletion.

The success message is generated using `self.success_message` which is expected
to be a format string with a placeholder for the object's name.

Parameters:
    request: HttpRequest object representing the current request.
    *args: Variable length argument list.
    **kwargs: Arbitrary keyword arguments.

Returns:
    HttpResponse object that represents the result of the deletion operation,
    typically a redirect to a success URL."
,"def form_valid(self, form):
    obj = form.save(commit=False)
    invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
    obj.invoice = invoice
    obj.save()
    return redirect('invoice-list')
",94,99.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,form_valid,ReceiptCreateView,method,205,"Process the form submission when it is valid.

This method is called when a valid form is submitted. It saves the form instance
without committing to the database, retrieves an Invoice object using the primary key
from the request's GET parameters, associates the form instance with the retrieved
Invoice, then saves the form instance to the database. Afterward, it redirects the user
to the 'invoice-list' URL.

Returns:
    HttpResponseRedirect: Redirects to the 'invoice-list' URL."
Subject,"class Subject(models.Model):
    """"""Subject""""""
    name = models.CharField(max_length=200, unique=True)


    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name
",42,51.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,Subject,,class,199,"A Django model representing a subject.

Attributes:
    name (models.CharField): The name of the subject. It is a unique field with a maximum length of 200 characters.

Meta:
    ordering (list): A list that defines the default ordering of the records when querying the database, which is set to order by the 'name' field in ascending order.

Methods:
    __str__(self): Returns a string representation of the Subject, which is the name of the subject."
,"def get_context_data(self, **kwargs):
    context = super(StudentDetailView, self).get_context_data(**kwargs)
    context['payments'] = Invoice.objects.filter(student=self.object)
    return context
",25,28.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,get_context_data,StudentDetailView,method,199,"Extend the context data for the student detail view.

This method adds a 'payments' key to the context dictionary, containing the queryset
of Invoice objects associated with the current student object.

Args:
    **kwargs: Keyword arguments passed to the superclass method.

Returns:
    dict: The updated context dictionary with the 'payments' key added.

Examples:
    >>> self.object = Student.objects.get(pk=1)
    >>> self.get_context_data()
    {'payments': <QuerySet [<Invoice: Invoice object (1)>, <Invoice: Invoice object (2)>]>}"
,"def get(self, request, *args, **kwargs):
    formset = self.form_class(queryset=SiteConfig.objects.all())
    context = {'formset': formset}
    return render(request, self.template_name, context)
",37,40.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get,SiteConfigView,method,197,"Handles the GET request for the current view.

This method retrieves all instances of the SiteConfig model and initializes the formset with them. It then adds the formset to the context dictionary and renders the response using the specified template and context.

Args:
    request: The HttpRequest object representing the current request.
    *args: Variable length argument list.
    **kwargs: Arbitrary keyword arguments.

Returns:
    HttpResponse: An HttpResponse object that renders the given template with the context containing the formset of SiteConfig instances."
,"class AcademicTermTest(TestCase):

    def test_academicterm(self):
        term = AcademicTerm.objects.create(name='test Term', current=True)
        self.assertEqual(str(term), 'test Term')
",23,26.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,AcademicTermTest,,class,192,"Unit tests for the AcademicTerm model.

This class contains tests that verify the functionality of the AcademicTerm model. It checks
if an AcademicTerm object can be successfully created and whether its string representation
is correct. The test creates a sample AcademicTerm object with a name and a 'current' status,
and then asserts that its string representation matches the expected term name."
,"class SiteConfigTest(TestCase):

    def test_siteconfig(self):
        site_config = SiteConfig.objects.create(key='akey', value='aname')
        self.assertEqual(str(site_config), 'akey')
",11,14.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,SiteConfigTest,,class,190,"Unit tests for the SiteConfig model.

This class contains tests to ensure that the SiteConfig model behaves as expected. Specifically, it tests the string representation of a SiteConfig instance to verify that it correctly returns the 'key' attribute when cast to a string."
,"class InvoiceItem(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)
    description = models.CharField(max_length=200)
    amount = models.IntegerField()
",53,56.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,InvoiceItem,,class,186,"Represents an item line in an invoice.

Each InvoiceItem is associated with an Invoice and contains details about
the service or product provided. It includes a description of the item and
the amount charged.

Attributes:
    invoice (ForeignKey): A reference to the associated Invoice object which 
        this item belongs to. On deletion of the invoice, the item will also be
        deleted due to the CASCADE option.
    description (CharField): A brief description of the item or service provided,
        with a maximum length of 200 characters.
    amount (IntegerField): The cost or charge for this particular item or service."
Site Configurations,"class SiteConfig(models.Model):
    """"""Site Configurations""""""
    key = models.SlugField()
    value = models.CharField(max_length=200)

    def __str__(self):
        return self.key
",6,13.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,SiteConfig,,class,184,"The SiteConfig class is a Django model that represents a configuration item for a site.

Each instance of SiteConfig contains a 'key' and a 'value', with the 'key' serving as an identifier
in slug format (letters, numbers, underscores, or hyphens) and the 'value' being a string of up to
200 characters that stores the actual configuration data.

The `__str__` method returns the 'key' of the configuration, providing a human-readable representation
of the SiteConfig instance."
,"def total_amount_paid(self):
    receipts = Receipt.objects.filter(invoice=self)
    amount = 0
    for receipt in receipts:
        amount += receipt.amount_paid
    return amount
",42,47.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,total_amount_paid,models,function,181,"Calculates the total amount paid for an invoice.

This method aggregates the total amount paid across all associated receipts linked to the current invoice instance.

Returns:
    float: The total amount of money paid as represented by the sum of the `amount_paid` attribute of each associated receipt."
,"class ReceiptUpdateView(LoginRequiredMixin, UpdateView):
    model = Receipt
    fields = ['amount_paid', 'date_paid', 'comment']
    success_url = reverse_lazy('invoice-list')
",108,111.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,ReceiptUpdateView,,class,177,"A view for updating a receipt entry.

This view extends Django's generic UpdateView and requires the user to be logged in
(LoginRequiredMixin). It allows the user to update an existing receipt record with
fields such as 'amount_paid', 'date_paid', and 'comment'. Upon a successful update,
the user is redirected to the 'invoice-list' URL.

Attributes:
    model: The model that this view will update instances of (Receipt).
    fields: The fields of the model that the update form will include.
    success_url: The URL to redirect to after a successful update, using Django's reverse_lazy."
,"@receiver(post_delete, sender=Student)
def delete_passport_on_delete(sender, instance, *args, **kwargs):
    if instance.passport:
        _delete_file(instance.passport.path)
",84,86.0,../../dziwne/Django-School-Management-System/apps/students/signals.py,signals,delete_passport_on_delete,signals,function,176,"A Django signal receiver that deletes the associated passport file from the filesystem
when a Student instance is deleted.

This function is connected to the `post_delete` signal of the Student model. When a Student
instance is deleted, this function checks if the instance has a related passport file. If the
passport file exists, it is deleted from the filesystem to prevent orphaned files.

Parameters:
- sender: The model class that sent the signal. Should be the Student model.
- instance: The instance of the sender that's being deleted.
- *args: Variable length argument list.
- **kwargs: Arbitrary keyword arguments.

Note:
This function assumes that the `passport` attribute of the Student model contains a file
field or an object that has a `path` attribute, which is the file path of the passport file
to be deleted.

The function `_delete_file` used within should be a predefined function that handles the
actual deletion of the file from the filesystem."
,"@receiver(post_delete, sender=StudentBulkUpload)
def delete_csv_file(sender, instance, *args, **kwargs):
    if instance.csv_file:
        _delete_file(instance.csv_file.path)
",78,80.0,../../dziwne/Django-School-Management-System/apps/students/signals.py,signals,delete_csv_file,signals,function,176,"After a `StudentBulkUpload` instance is deleted, this receiver function is triggered to delete the associated CSV file from the filesystem.

The `delete_csv_file` function is connected to Django's `post_delete` signal for the `StudentBulkUpload` model. When an instance of `StudentBulkUpload` is deleted, Django emits this signal, and the function is called.

The function checks if the deleted instance has a `csv_file` field that is not null. If the `csv_file` field exists, the function proceeds to delete the file at the path specified by `instance.csv_file.path` by calling an internal `_delete_file` function.

Parameters:
- `sender`: The model class that just had an instance deleted.
- `instance`: The actual instance of the model that was deleted.
- `*args`: Variable length argument list.
- `**kwargs`: Arbitrary keyword arguments.

Note: The `_delete_file` function is assumed to be a utility function defined elsewhere in the codebase that handles the deletion of the file from the filesystem.

Example usage:
This function is meant to be used as a signal receiver in Django applications, and it should be connected to the `post_delete` signal for the `StudentBulkUpload` model.

This docstring assumes that `StudentBulkUpload` is a Django model with a `csv_file` field that stores the path to an uploaded CSV file."
,"class SubjectTest(TestCase):

    def test_subject(self):
        subject = Subject.objects.create(name='a_subject')
        self.assertEqual(str(subject), 'a_subject')
",29,32.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,SubjectTest,,class,169,"Unit test suite for the Subject model.

This class contains tests to ensure that the Subject model is created correctly and that its string representation matches the expected format. It inherits from Django's TestCase to provide a framework for writing and running the test.

Methods:
    test_subject(): Tests the Subject creation with a given name and verifies that its string representation matches the name provided upon creation."
,"def test_academicsession(self):
    session = AcademicSession.objects.create(name='test session', current=True)
    self.assertEqual(str(session), 'test session')
",18,20.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,test_academicsession,AcademicSessionTest,method,163,"This test method verifies that an instance of the AcademicSession model can be created with a specified name
and a 'current' status. It asserts that the string representation of the created session matches the name 
given at the time of creation ('test session')."
,"def amount_payable(self):
    items = InvoiceItem.objects.filter(invoice=self)
    total = 0
    for item in items:
        total += item.amount
    return total
",32,37.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,amount_payable,models,function,162,"Calculates the total amount payable for an invoice by summing up the amount of each item associated with the invoice.

Returns:
    total (decimal.Decimal): The total amount payable for the invoice, which is the sum of the amounts of all associated invoice items."
,"class StudentBulkUpload(models.Model):
    date_uploaded = models.DateTimeField(auto_now=True)
    csv_file = models.FileField(upload_to='students/bulkupload/')
",49,51.0,../../dziwne/Django-School-Management-System/apps/students/models.py,models,StudentBulkUpload,,class,161,"This model represents a bulk upload record for students via a CSV file.

Attributes:
    date_uploaded (models.DateTimeField): The date and time when the CSV file was uploaded.
                                          It is automatically set to the current date and time when
                                          the record is created.
    csv_file (models.FileField): The actual CSV file containing student data. The file is stored
                                 in the 'students/bulkupload/' directory within the media storage."
,"class AcademicSessionForm(ModelForm):
    prefix = 'Academic Session'


    class Meta:
        model = AcademicSession
        fields = ['name', 'current']
",22,27.0,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,AcademicSessionForm,,class,157,"A ModelForm for creating and updating AcademicSession instances.

This form binds to the AcademicSession model and specifies that the 'name'
and 'current' fields should be included in the form. It uses a custom prefix
'Academic Session' to distinguish its elements when rendered in HTML.

Attributes:
    prefix (str): A string prefix used by form fields to avoid name conflicts
                  in form sets or multi-form pages.

Meta:
    model: The model class that this form is linked to (AcademicSession).
    fields: A list of the model fields that are included in the form."
,"from django.apps import AppConfig


class CorecodeConfig(AppConfig):
    name = 'apps.corecode'

    def ready(self):
        import apps.corecode.signals
",0,,../../dziwne/Django-School-Management-System/apps/corecode/apps.py,apps,apps,,module,155,nan
,"from django.apps import AppConfig


class StudentsConfig(AppConfig):
    name = 'apps.students'

    def ready(self):
        import apps.students.signals
",0,,../../dziwne/Django-School-Management-System/apps/students/apps.py,apps,apps,,module,155,nan
,"from django.apps import AppConfig


class FinanceConfig(AppConfig):
    name = 'apps.finance'

    def ready(self):
        import apps.finance.signals
",0,,../../dziwne/Django-School-Management-System/apps/finance/apps.py,apps,apps,,module,152,nan
,"def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context['form'] = AcademicSessionForm()
    return context
",55,58.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get_context_data,SessionListView,method,150,"Extends the context data for a view with an AcademicSessionForm instance.

This method calls the parent class's get_context_data method to obtain the base context,
then adds an 'form' entry to this context. The 'form' entry is an instance of AcademicSessionForm,
which can be used in the template to render the form associated with academic sessions.

Parameters:
**kwargs: Variable keyword arguments that can be passed to the parent get_context_data method.

Returns:
dict: The updated context dictionary containing the base context and the 'form' entry."
,"class Migration(migrations.Migration):
    dependencies = [('corecode', '0001_initial')]
    operations = [migrations.RunPython(default_site_config)]
",54,62.0,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0002_auto_20200506_1520.py,0002_auto_20200506_1520,Migration,,class,150,"This Migration class defines a set of database operations that are intended to be
applied as a migration within a Django project. The migration depends on an initial
migration from the 'corecode' app and includes one operation to execute a Python
callable, 'default_site_config', which is responsible for setting up default site
configuration upon migration.

Attributes:
    dependencies (list of tuples): A list containing a dependency relation indicating
        that this migration depends on the '0001_initial' migration of the 'corecode' app.
    operations (list of Migration operations): A list of migration operations to be
        applied, in this case, including a RunPython operation that calls the
        'default_site_config' function."
,"class AcademicTermForm(ModelForm):
    prefix = 'Academic Term'


    class Meta:
        model = AcademicTerm
        fields = ['name', 'current']
",30,35.0,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,AcademicTermForm,,class,148,"Form representation for creating or updating Academic Term instances.

This form is tied to the AcademicTerm model and allows manipulation
of the 'name' and 'current' fields. It comes with a prefixed label to
distinguish its fields when used in combination with other forms.

Attributes:
    prefix (str): A string to prefix the form fields, set to 'Academic Term'.

Meta:
    model: The model associated with this form, AcademicTerm.
    fields (list of str): The fields of the AcademicTerm model that this form includes."
,"def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context['form'] = AcademicTermForm()
    return context
",114,117.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get_context_data,TermListView,method,147,"Extend the context data for a view with an 'AcademicTermForm' instance.

This method calls its superclass method to get the base context, then
adds the 'AcademicTermForm' to the context dictionary under the 'form' key.

Parameters:
    **kwargs: Arbitrary keyword arguments that are passed to the superclass's
              `get_context_data` method and may contain context information.

Returns:
    dict: The updated context dictionary containing both the original
          context data and the 'AcademicTermForm' instance."
,"def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context['title'] = 'Add new session'
    return context
",68,71.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get_context_data,SessionCreateView,method,147,"Extend the context data with a predefined title.

This method extends the context data dictionary by adding a title entry with 
the value 'Add new session'. It calls the superclass's get_context_data method
to get the existing context, updates it, and then returns the modified context.

Parameters:
    **kwargs: Arbitrary keyword arguments which are passed to the superclass's 
              get_context_data method.

Returns:
    dict: The updated context data dictionary containing the new title entry along 
          with any other context data inherited from the superclass."
,"def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context['form'] = StudentClassForm()
    return context
",168,171.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get_context_data,ClassListView,method,147,"Extends the context data for a view by adding a 'form' entry.

This method calls the superclass method to get the initial context and then adds a new entry to the context dictionary with the key 'form', which is an instance of `StudentClassForm`. The modified context dictionary is then returned.

Parameters:
    **kwargs: Arbitrary keyword arguments which are passed to the superclass method.

Returns:
    dict: The context dictionary containing all data including the 'form' entry for template rendering."
,"def test_academicterm(self):
    term = AcademicTerm.objects.create(name='test Term', current=True)
    self.assertEqual(str(term), 'test Term')
",24,26.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,test_academicterm,AcademicTermTest,method,145,"This method tests the creation of an AcademicTerm object and its string representation.

It first creates an instance of AcademicTerm with the name set to 'test Term' and the current flag set to True. 
It then asserts that the string representation of this AcademicTerm instance is equal to 'test Term', 
ensuring that the __str__ method of the AcademicTerm class correctly returns the name of the term."
,"def test_siteconfig(self):
    site_config = SiteConfig.objects.create(key='akey', value='aname')
    self.assertEqual(str(site_config), 'akey')
",12,14.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,test_siteconfig,SiteConfigTest,method,145,"Test the string representation of a SiteConfig object.

This test verifies that the string representation of a SiteConfig object is correct when a SiteConfig instance is created with a specific key and value. It ensures that the __str__ method of the SiteConfig model returns the key of the instance.

Attributes:
    None"
,"def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context['form'] = SubjectForm()
    return context
",207,210.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get_context_data,SubjectListView,method,142,"Extend the context data with a 'form' entry.

This method is typically used in Django class-based views to add additional context to the template. It calls the superclass method to get the existing context and then adds a 'form' entry to it with an instance of a SubjectForm.

Args:
    **kwargs: Arbitrary keyword arguments which are passed to the superclass method.

Returns:
    dict: The updated context dictionary containing all the original context plus the 'form' entry."
,"def __str__(self):
    return (
        f'{self.surname} {self.firstname} {self.other_name} ({self.registration_number})'
        )
",42,43.0,../../dziwne/Django-School-Management-System/apps/students/models.py,models,__str__,models,function,132,"Return a string representation of the object, formatted as ""Surname Firstname Othername (RegistrationNumber)"".

This method overrides the default `__str__` method and provides a human-readable format for the object, which
includes the individual's surname, firstname, othername, and their registration number enclosed in parentheses."
,"class StudentClassForm(ModelForm):
    prefix = 'Class'


    class Meta:
        model = StudentClass
        fields = ['name']
",46,51.0,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,StudentClassForm,,class,129,"A ModelForm for the StudentClass model with a set prefix 'Class'.

This form will specifically handle the creation and updating of StudentClass instances
by exposing only the 'name' field for input."
,"def test_subject(self):
    subject = Subject.objects.create(name='a_subject')
    self.assertEqual(str(subject), 'a_subject')
",30,32.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,test_subject,SubjectTest,method,127,"Tests the string representation of the Subject model.

This test ensures that when a Subject instance is created with the name 'a_subject',
its string representation (i.e., the output of str(subject)) is exactly 'a_subject'."
,"class StudentDeleteView(LoginRequiredMixin, DeleteView):
    model = Student
    success_url = reverse_lazy('student-list')
",63,65.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,StudentDeleteView,,class,124,"A view for deleting a Student object from the database.

This view extends Django's generic DeleteView and requires the user to be logged in (LoginRequiredMixin).
Upon successful deletion of a Student instance, the user is redirected to the URL pattern named 'student-list'.

Attributes:
    model: The model to be deleted, which is the Student model in this case.
    success_url: A lazy reference to the URL where the user should be redirected after a successful delete operation."
,"class ReceiptDeleteView(LoginRequiredMixin, DeleteView):
    model = Receipt
    success_url = reverse_lazy('invoice-list')
",114,116.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,ReceiptDeleteView,,class,124,"A view that handles the deletion of a Receipt object.

This view inherits from `LoginRequiredMixin` and `DeleteView`. It requires the
user to be logged in to access this view. When a Receipt object is successfully
deleted, the user is redirected to the URL named 'invoice-list'.

Attributes:
    model: The model class that this view will act upon. It is set to `Receipt`, 
        indicating that the view will delete `Receipt` objects.
    success_url: A lazy reverse URL to redirect the user to upon successful deletion. 
        The `reverse_lazy` function is used to ensure that the URL is resolved lazily, 
        meaning it won't be evaluated until it's accessed. It points to the 'invoice-list' 
        view by its URL name."
,"class InvoiceDeleteView(LoginRequiredMixin, DeleteView):
    model = Invoice
    success_url = reverse_lazy('invoice-list')
",84,86.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,InvoiceDeleteView,,class,124,"A view for deleting an Invoice object. This view extends the `DeleteView` generic view and includes a `LoginRequiredMixin` to ensure that only authenticated users can delete an invoice.

Attributes:
    model: The model associated with this view, which in this case is `Invoice`.
    success_url: A lazy reverse URL to redirect to after the invoice is successfully deleted. It points to the 'invoice-list' named URL pattern.

The view automatically renders a confirmation page for deleting an invoice and handles the deletion process once the confirmation is received."
,"def balance(self):
    payable = self.total_amount_payable()
    paid = self.total_amount_paid()
    return payable - paid
",27,30.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,balance,models,function,123,"Calculate the current balance of the account by subtracting the total amount paid from the total amount payable.

Returns:
    The balance as a numerical value, which represents the amount still owed. If the returned balance is negative,
    it indicates an overpayment."
,"class StudentListView(LoginRequiredMixin, ListView):
    model = Student
    template_name = 'students/student_list.html'
",16,18.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,StudentListView,,class,122,"A view that lists all students in the system.

This view extends the Django built-in `ListView` and includes a `LoginRequiredMixin` to ensure that
only authenticated users can access the view. It presents a list of `Student` model instances.

Attributes:
    model: The model that this list view is displaying, which is the `Student` model.
    template_name: A string representing the path to the HTML template file used to render the student list page."
,"class SubjectForm(ModelForm):
    prefix = 'Subject'


    class Meta:
        model = Subject
        fields = ['name']
",38,43.0,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,SubjectForm,,class,121,"A Django ModelForm for the Subject model with a specified prefix.

This form is associated with the Subject model and is specifically configured to handle the 'name' field of the model. It sets an attribute 'prefix' to 'Subject' to distinguish form fields when multiple forms are used in the same HTML form.

Attributes:
    prefix (str): A prefix to apply to the form's fields' names to avoid name collisions.

Meta:
    model: The model class (Subject) this form is related to.
    fields: A list specifying the fields of the model to include in this form."
,"class StudentsConfig(AppConfig):
    name = 'apps.students'

    def ready(self):
        import apps.students.signals
",4,8.0,../../dziwne/Django-School-Management-System/apps/students/apps.py,apps,StudentsConfig,,class,119,"The StudentsConfig class is a Django application configuration class for the 'students' app.

This class inherits from AppConfig, provided by Django for application configuration purposes.
It sets the 'name' attribute to 'apps.students', which tells Django to look for application
components in the 'apps/students' directory.

The 'ready' method is overridden to perform application-specific initialization tasks.
In this case, it imports the 'signals' module from the 'apps.students' package when the
application is ready, ensuring that signal handlers are registered and ready to use.

Attributes:
    name (str): The name of the application, used by Django to identify application components.

Methods:
    ready(): Handles application initialization tasks such as signal registration."
,"class CorecodeConfig(AppConfig):
    name = 'apps.corecode'

    def ready(self):
        import apps.corecode.signals
",4,8.0,../../dziwne/Django-School-Management-System/apps/corecode/apps.py,apps,CorecodeConfig,,class,119,"Configuration class for the Corecode application.

This class extends the AppConfig class provided by Django to configure the Corecode application. It serves as a container for application-specific configurations and tasks.

Attributes:
    name (str): This attribute specifies the full Python path to the application.

Methods:
    ready(self):
        This method is called when the Django app registry is fully populated. It is used here to import the signals module from the Corecode application, which ensures the signals are registered and ready to be used when the application starts.

Example:
    This class is usually not instantiated directly by users. Instead, it is referenced in the INSTALLED_APPS setting of the Django project's settings.py file as 'apps.corecode.CorecodeConfig'."
Deletes file from filesystem.,"def _delete_file(path):
    """"""Deletes file from filesystem.""""""
    if os.path.isfile(path):
        os.remove(path)
",71,74.0,../../dziwne/Django-School-Management-System/apps/students/signals.py,signals,_delete_file,signals,function,117,"Deletes the specified file from the filesystem.

This function checks if the given path is a file and then deletes it using the os.remove method.
If the path does not correspond to a file, the function does nothing.

Parameters:
    path (str): The path to the file that needs to be deleted.

Returns:
    None"
,"class FinanceConfig(AppConfig):
    name = 'apps.finance'

    def ready(self):
        import apps.finance.signals
",4,8.0,../../dziwne/Django-School-Management-System/apps/finance/apps.py,apps,FinanceConfig,,class,116,"The `FinanceConfig` class is a subclass of `AppConfig` that is used for configuring
the 'finance' application within a Django project. This configuration class sets
the application name to 'apps.finance' and includes a `ready` method that is 
overridden to perform application-specific initialization, such as importing
signal handlers from the 'apps.finance.signals' module when Django starts up.

Attributes:
    name (str): A string specifying the full Python path to the application, which
                is used by Django's app registry to uniquely identify the application.

Methods:
    ready(self): A method that Django calls when the application is ready for use.
                 This is where application-specific initialization tasks such as
                 registering signal handlers or checks can be performed."
,"class StaffDetailView(DetailView):
    model = Staff
    template_name = 'staffs/staff_detail.html'
",15,17.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,StaffDetailView,,class,100,"A view that extends Django's DetailView for displaying details of a single Staff instance.

This view renders a single Staff object's details on the page using the 'staffs/staff_detail.html' template.

Attributes:
    model (Model): The model that this view will display. Here it is set to the Staff model.
    template_name (str): The path to the template that this view will use. It is set to 'staffs/staff_detail.html'."
,"def total_amount_payable(self):
    return self.balance_from_previous_term + self.amount_payable()
",39,40.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,total_amount_payable,models,function,99,"Calculates the total amount payable by a customer or account.

This function adds the balance from the previous term to the current amount payable,
which is retrieved by calling the `amount_payable` method. The sum of these two
amounts represents the total amount the customer is required to pay.

Returns:
    float: The sum of the previous term's balance and the current amount payable."
,"class Meta:
    verbose_name = 'Class'
    verbose_name_plural = 'Classes'
    ordering = ['name']
",57,60.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,Meta,,class,99,"A class representing metadata with attributes to define display options and ordering for a model.

Attributes:
    verbose_name (str): A human-readable name for the object, singular form.
    verbose_name_plural (str): The plural form of `verbose_name`.
    ordering (list): A list of field names that dictate the default ordering of objects."
,"@login_required
def bulk_invoice(request):
    return render(request, 'finance/bulk_invoice.html')
",120,121.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,bulk_invoice,views,function,99,"This view function renders the bulk invoice page.

It requires the user to be authenticated to access the page. If the user is not authenticated, 
they will be redirected to the login page. Upon successful authentication, the user is presented 
with the 'bulk_invoice.html' template.

Args:
    request (HttpRequest): The HTTP request object that triggered this view.

Returns:
    HttpResponse: An HttpResponse object containing the rendered 'bulk_invoice.html' template."
,"class StaffDeleteView(DeleteView):
    model = Staff
    success_url = reverse_lazy('staff-list')
",54,56.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,StaffDeleteView,,class,98,"A view that handles the deletion of a Staff object.

This view extends Django's generic DeleteView to provide a mechanism for deleting a Staff instance.
Upon successful deletion, the user is redirected to the 'staff-list' URL.

Attributes:
    model (django.db.models.Model): The model that this view will act upon. In this case, it is set to the Staff model.
    success_url (str or django.urls.reverse_lazy): The URL to redirect to after successfully deleting the object. It is lazily reversed from the 'staff-list' named URL pattern."
,"from django.apps import AppConfig


class ResultConfig(AppConfig):
    name = 'apps.result'
",0,,../../dziwne/Django-School-Management-System/apps/result/apps.py,apps,apps,,module,92,nan
,"from django.apps import AppConfig


class StaffsConfig(AppConfig):
    name = 'apps.staffs'
",0,,../../dziwne/Django-School-Management-System/apps/staffs/apps.py,apps,apps,,module,92,nan
,"def __str__(self):
    return f'{self.student} {self.session} {self.term} {self.subject}'
",27,28.0,../../dziwne/Django-School-Management-System/apps/result/models.py,models,__str__,models,function,90,"Create a string representation of the object with the student's information and associated class details.

This method overrides the default __str__ method and returns a formatted string that combines the student's name,
session, term, and subject into a single string. Each piece of information is separated by a space.

Returns:
    str: A string containing the student's name, session, term, and subject."
,"def get_absolute_url(self):
    return reverse('invoice-detail', kwargs={'pk': self.pk})
",49,50.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,get_absolute_url,models,function,89,"Construct and return the absolute URL to the detail view of the invoice.

This method uses Django's `reverse` function to generate the URL based on
the 'invoice-detail' URL pattern, substituting the primary key (pk) of the
current invoice instance into the URL.

Returns:
    str: The absolute URL as a string pointing to the detail view of the invoice.

Example:
    >>> invoice = Invoice(pk=1)
    >>> invoice.get_absolute_url()
    '/invoices/1/'"
,"def get_absolute_url(self):
    return reverse('student-detail', kwargs={'pk': self.pk})
",45,46.0,../../dziwne/Django-School-Management-System/apps/students/models.py,models,get_absolute_url,models,function,89,"Construct and return the absolute URL for a student detail view.

This method relies on Django's `reverse` function to generate the URL. It assumes that there is a URL pattern named 'student-detail' which takes a single keyword argument 'pk' representing the primary key of a student instance.

Returns:
    str: The absolute URL as a string which can be used to access the detail view for the specific student instance."
,"def get_absolute_url(self):
    return reverse('staff-detail', kwargs={'pk': self.pk})
",33,34.0,../../dziwne/Django-School-Management-System/apps/staffs/models.py,models,get_absolute_url,Staff,method,87,"Constructs and returns the absolute URL for a staff member instance.

This method relies on Django's 'reverse' function to generate the URL.
It uses the 'staff-detail' URL pattern defined in the application's URL configuration,
substituting the instance's primary key (pk) into the URL.

Returns:
    str: The absolute URL as a string that can be used to access the staff member's detail view.

Example:
    >>> staff_member.get_absolute_url()
    '/staff/1/'

Note:
    This method assumes that the 'staff-detail' URL pattern is defined in the URLconf and
    that it requires a 'pk' keyword argument corresponding to the staff member's primary key."
,"class IndexView(LoginRequiredMixin, TemplateView):
    template_name = 'index.html'
",27,28.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,IndexView,,class,84,"The IndexView class is a Django view that extends both LoginRequiredMixin and TemplateView.

This view requires the user to be logged in to access it, as enforced by LoginRequiredMixin.
Upon successful authentication, it renders the 'index.html' template.

Attributes:
    template_name (str): A string representing the path to the template file that this view will render."
,"def __str__(self):
    return f'{self.surname} {self.firstname} {self.other_name}'
",30,31.0,../../dziwne/Django-School-Management-System/apps/staffs/models.py,models,__str__,Staff,method,83,"Constructs and returns a string representation of the object, which
includes the surname, firstname, and other_name of the individual, 
formatted as 'surname firstname other_name'.

Returns:
    str: A formatted string with the individual's full name."
,"class InvoiceListView(LoginRequiredMixin, ListView):
    model = Invoice
",14,15.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,InvoiceListView,,class,73,"A view that lists all Invoice records for authenticated users.

This view extends the generic Django ListView and the LoginRequiredMixin,
which ensures that only authenticated users can access the view. The view
is associated with the Invoice model and will display a list of invoices
that are available in the database.

Attributes:
    model: The model that this list view is displaying, which is Invoice in this case.

Usage:
    This view can be used in Django web applications to display a list of invoices
    to users who have successfully logged in. It can be linked to a specific URL pattern
    and rendered using a corresponding template."
,"def __init__(self, get_response):
    self.get_response = get_response
",5,6.0,../../dziwne/Django-School-Management-System/apps/corecode/middleware.py,middleware,__init__,SiteWideConfigs,method,71,"Initialize a new instance of the middleware class.

This constructor stores a reference to the 'get_response' callable 
which should be a Django-style HTTP response handler that takes a 
request and returns a response. This reference is later used to 
delegate the response generation after the middleware has done 
its processing.

Parameters:
    get_response: A callable that takes an HttpRequest object and 
                  returns an HttpResponse object. Typically, this 
                  is the next middleware or view in the processing 
                  chain."
,"def total_score(self):
    return self.test_score + self.exam_score
",30,31.0,../../dziwne/Django-School-Management-System/apps/result/models.py,models,total_score,models,function,68,"Calculates the total score by adding the test score and the exam score of a student.

Returns:
    int: The sum of the test score and the exam score."
,"class Meta:
    ordering = ['surname', 'firstname', 'other_name']
",39,40.0,../../dziwne/Django-School-Management-System/apps/students/models.py,models,Meta,,class,66,"The Meta class is used as a configuration container within other classes.

It holds a single class attribute named 'ordering' which is a list. This list defines
the order in which certain elements should be arranged or processed. Typically, these
elements are strings corresponding to the attributes of an object, such as 'surname',
'firstname', and 'other_name'. The order in the 'ordering' list suggests that objects
should be first sorted by 'surname', then by 'firstname', and finally by 'other_name'."
,"def score_grade(score):
    if score <= 10:
        return 'A'
",1,3.0,../../dziwne/Django-School-Management-System/apps/result/utils.py,utils,score_grade,utils,function,63,"Converts a numeric score into a grade of 'A' if the score is less than or equal to 10.

Parameters:
score (int or float): A numeric value representing the score to be graded.

Returns:
str: The grade 'A' for scores that are less than or equal to 10.

Note:
The function currently handles only the case where the score is less than or equal to 10.
For scores greater than 10, the function will return None as there is no implementation for such cases."
,"def score_grade(score):
    if score <= 10:
        return 'A'
",0,,../../dziwne/Django-School-Management-System/apps/result/utils.py,utils,utils,,module,63,nan
,"def __str__(self):
    return f'Receipt on {self.date_paid}'
",65,66.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,__str__,Receipt,method,61,"Create a string representation of the object, formatted as a receipt date.

Returns:
    str: A string indicating the date the receipt was paid, formatted as 'Receipt on <date_paid>'."
,"def grade(self):
    return score_grade(self.total_score())
",33,34.0,../../dziwne/Django-School-Management-System/apps/result/models.py,models,grade,models,function,60,"Calculates and returns the letter grade associated with a student's total score.

The function relies on an external method `total_score` to retrieve the student's total score,
and an external function `score_grade` to convert the total score into a letter grade.

Returns:
    str: The letter grade (e.g., 'A', 'B', 'C', etc.) corresponding to the student's total score."
,"class Meta:
    model = StudentClass
    fields = ['name']
",49,51.0,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,Meta,,class,59,"The Meta class is a configuration holder for a form or model serializer.

Attributes:
    model: A reference to the StudentClass model this Meta class relates to.
    fields: A list specifying the field names that should be included in the form or serializer."
,"default_app_config = 'apps.corecode.apps.CorecodeConfig'
",0,,../../dziwne/Django-School-Management-System/apps/corecode/__init__.py,__init__,__init__,,module,57,nan
,"default_app_config = 'apps.students.apps.StudentsConfig'
",0,,../../dziwne/Django-School-Management-System/apps/students/__init__.py,__init__,__init__,,module,57,nan
,"class StaffsConfig(AppConfig):
    name = 'apps.staffs'
",4,5.0,../../dziwne/Django-School-Management-System/apps/staffs/apps.py,apps,StaffsConfig,,class,56,"A Django application configuration class for the 'staffs' app.

This class serves as a configuration point for the 'staffs' application, which may
involve staff member-related models, views, and other components. The name attribute
is set to 'apps.staffs' to indicate the application's label and its location within
the project's directory structure.

Attributes:
    name (str): The designated label for the application, which is used in Django 
                for things like database table naming, relation references, and 
                application lookups. It should be a full Python path to the application."
,"class ResultConfig(AppConfig):
    name = 'apps.result'
",4,5.0,../../dziwne/Django-School-Management-System/apps/result/apps.py,apps,ResultConfig,,class,56,"The `ResultConfig` class is a Django application configuration class for the 'result' app.
It inherits from `AppConfig`, provided by Django, to set up app-specific configurations.

Attributes:
    name (str): The name of the application. This is used by Django to identify the app
                within the project. The 'apps.result' string suggests the app is named 'result'
                and is located within the 'apps' package."
,"default_app_config = 'apps.finance.apps.FinanceConfig'
",0,,../../dziwne/Django-School-Management-System/apps/finance/__init__.py,__init__,__init__,,module,55,nan
,"def ready(self):
    import apps.students.signals
",7,8.0,../../dziwne/Django-School-Management-System/apps/students/apps.py,apps,ready,StudentsConfig,method,50,"This method is called to prepare the 'students' app by importing its associated signals.

When Django starts up, it automatically calls this method for each app that has a `ready` method to ensure that all signal handlers are connected. This method should not be called manually.

The import statement within this method acts as a trigger to execute the 'students.signals' module, thereby registering any signal handlers defined in that module. It's a common Django pattern to connect signal handlers in a signals submodule and then import this module in the `ready` method of the app configuration class.

Note: This method is part of the app configuration lifecycle in Django's AppConfig classes."
,"def ready(self):
    import apps.corecode.signals
",7,8.0,../../dziwne/Django-School-Management-System/apps/corecode/apps.py,apps,ready,CorecodeConfig,method,50,"Initializes the application by importing the signals from the corecode app.

This method is typically used to ensure that signals are registered when the app is ready, 
so that the connected receivers can handle signal events appropriately.

Note: This method is conventionally expected to be part of a Django application configuration class that 
inherits from AppConfig. It is called by Django's startup sequence when the application is ready to serve requests."
,"class StaffListView(ListView):
    model = Staff
",11,12.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,StaffListView,,class,49,"A view for listing all staff members.

This view inherits from Django's generic ListView to display a list of staff members.
It is configured with the Staff model, which will be used to retrieve and list all staff
records from the database."
,"def ready(self):
    import apps.finance.signals
",7,8.0,../../dziwne/Django-School-Management-System/apps/finance/apps.py,apps,ready,FinanceConfig,method,49,"This method is designed to be called to prepare the application by importing the
`signals` module from the `apps.finance` package. It is typically used to ensure that
signal handlers are registered and ready before the application starts processing requests.

No parameters are required, and the method does not return any values. It relies on the
side-effect of the import statement to activate the signal handlers defined in the `signals` module."
,"def __str__(self):
    return f'{self.student}'
",24,25.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,__str__,models,function,48,"Return a string representation of the object, specifically the 'student' attribute.

When the object is asked to be represented as a string, for example by print() or str(),
this method will return the string representation of the 'student' attribute contained within the object."
,"class Meta:
    ordering = ['student', 'term']
",21,22.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,Meta,,class,47,"The Meta class is simply a container for configuration options.
It holds a single attribute 'ordering', which is a list that indicates the default ordering of items when queried from a database.
The 'ordering' list contains two strings: 'student' and 'term', which suggests that when instances of a model using this Meta class are retrieved,
they should be ordered first by 'student' and then by 'term'."
,"def __str__(self):
    return self.name
",62,63.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,__str__,models,function,40,"Return the string representation of the object, specifically the 'name' attribute.

This method overrides the built-in __str__ method and is called when str() is used on the object,
or when it is used in a context where it is expected to be converted to a string, such as print().

Returns:
    str: The name of the object as a string."
,"class Meta:
    ordering = ['subject']
",24,25.0,../../dziwne/Django-School-Management-System/apps/result/models.py,models,Meta,,class,39,"This class serves as a simple container for metadata. It currently holds a single class-level attribute
that defines the default ordering for instances of the class, based on the 'subject' field. The class
does not contain any methods or additional functionality at the moment.

Attributes:
    ordering (list): A list of strings that indicates the default ordering of instances by the specified field(s)."
,"def __str__(self):
    return self.key
",12,13.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,__str__,SiteConfig,method,39,"Return a string representation of the object.

This method overrides the default `__str__` method to return the string
representation of the object's `key` attribute. When the object is
passed to the built-in `str()` function or is printed, this method
is called to determine the string that should be output.

Returns:
    str: The string representation of the object's `key` attribute."
,"from django.contrib import admin
",0,,../../dziwne/Django-School-Management-System/apps/finance/admin.py,admin,admin,,module,33,nan
,"from django.test import TestCase
",0,,../../dziwne/Django-School-Management-System/apps/finance/tests.py,tests,tests,,module,33,nan
,"from django.contrib import admin
",0,,../../dziwne/Django-School-Management-System/apps/result/admin.py,admin,admin,,module,33,nan
,"from django.test import TestCase
",0,,../../dziwne/Django-School-Management-System/apps/result/tests.py,tests,tests,,module,33,nan
,"from django.contrib import admin
",0,,../../dziwne/Django-School-Management-System/apps/staffs/admin.py,admin,admin,,module,33,nan
,"from django.test import TestCase
",0,,../../dziwne/Django-School-Management-System/apps/staffs/tests.py,tests,tests,,module,33,nan
,"from django.test import TestCase
",0,,../../dziwne/Django-School-Management-System/apps/students/tests.py,tests,tests,,module,33,nan
,"from django.contrib import admin
",0,,../../dziwne/Django-School-Management-System/apps/students/admin.py,admin,admin,,module,33,nan
,,0,,../../dziwne/Django-School-Management-System/apps/__init__.py,__init__,__init__,,module,0,nan
,,0,,../../dziwne/Django-School-Management-System/apps/staffs/__init__.py,__init__,__init__,,module,0,nan
,,0,,../../dziwne/Django-School-Management-System/apps/staffs/migrations/__init__.py,__init__,__init__,,module,0,nan
,,0,,../../dziwne/Django-School-Management-System/apps/finance/migrations/__init__.py,__init__,__init__,,module,0,nan
,,0,,../../dziwne/Django-School-Management-System/apps/corecode/migrations/__init__.py,__init__,__init__,,module,0,nan
,,0,,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_views.py,test_views,test_views,,module,0,nan
,,0,,../../dziwne/Django-School-Management-System/apps/corecode/tests/__init__.py,__init__,__init__,,module,0,nan
,,0,,../../dziwne/Django-School-Management-System/apps/result/migrations/__init__.py,__init__,__init__,,module,0,nan
,,0,,../../dziwne/Django-School-Management-System/school_app/__init__.py,__init__,__init__,,module,0,nan
,,0,,../../dziwne/Django-School-Management-System/apps/result/__init__.py,__init__,__init__,,module,0,nan
,,0,,../../dziwne/Django-School-Management-System/apps/students/migrations/__init__.py,__init__,__init__,,module,0,nan
