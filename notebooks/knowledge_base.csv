name,docstring,code,file,module,parent,type,code_start_line,code_end_line,len
views,,"from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.messages.views import SuccessMessageMixin
from django.shortcuts import HttpResponseRedirect, redirect, render
from django.urls import reverse_lazy
from django.views.generic import ListView, TemplateView, View
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from .forms import AcademicSessionForm, AcademicTermForm, CurrentSessionForm, SiteConfigForm, StudentClassForm, SubjectForm
from .models import AcademicSession, AcademicTerm, SiteConfig, StudentClass, Subject


class IndexView(LoginRequiredMixin, TemplateView):
    template_name = 'index.html'


class SiteConfigView(LoginRequiredMixin, View):
    """"""Site Config View""""""
    form_class = SiteConfigForm
    template_name = 'corecode/siteconfig.html'

    def get(self, request, *args, **kwargs):
        formset = self.form_class(queryset=SiteConfig.objects.all())
        context = {'formset': formset}
        return render(request, self.template_name, context)

    def post(self, request, *args, **kwargs):
        formset = self.form_class(request.POST)
        if formset.is_valid():
            formset.save()
            messages.success(request, 'Configurations successfully updated')
        context = {'formset': formset, 'title': 'Configuration'}
        return render(request, self.template_name, context)


class SessionListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = AcademicSession
    template_name = 'corecode/session_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = AcademicSessionForm()
        return context


class SessionCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = AcademicSession
    form_class = AcademicSessionForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('sessions')
    success_message = 'New session successfully added'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Add new session'
        return context


class SessionUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = AcademicSession
    form_class = AcademicSessionForm
    success_url = reverse_lazy('sessions')
    success_message = 'Session successfully updated.'
    template_name = 'corecode/mgt_form.html'

    def form_valid(self, form):
        obj = self.object
        if obj.current == False:
            terms = AcademicSession.objects.filter(current=True).exclude(name
                =obj.name).exists()
            if not terms:
                messages.warning(self.request,
                    'You must set a session to current.')
                return redirect('session-list')
        return super().form_valid(form)


class SessionDeleteView(LoginRequiredMixin, DeleteView):
    model = AcademicSession
    success_url = reverse_lazy('sessions')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The session {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        if obj.current == True:
            messages.warning(request,
                'Cannot delete session as it is set to current')
            return redirect('sessions')
        messages.success(self.request, self.success_message.format(obj.name))
        return super(SessionDeleteView, self).delete(request, *args, **kwargs)


class TermListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = AcademicTerm
    template_name = 'corecode/term_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = AcademicTermForm()
        return context


class TermCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = AcademicTerm
    form_class = AcademicTermForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('terms')
    success_message = 'New term successfully added'


class TermUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = AcademicTerm
    form_class = AcademicTermForm
    success_url = reverse_lazy('terms')
    success_message = 'Term successfully updated.'
    template_name = 'corecode/mgt_form.html'

    def form_valid(self, form):
        obj = self.object
        if obj.current == False:
            terms = AcademicTerm.objects.filter(current=True).exclude(name=
                obj.name).exists()
            if not terms:
                messages.warning(self.request,
                    'You must set a term to current.')
                return redirect('term')
        return super().form_valid(form)


class TermDeleteView(LoginRequiredMixin, DeleteView):
    model = AcademicTerm
    success_url = reverse_lazy('terms')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The term {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        if obj.current == True:
            messages.warning(request,
                'Cannot delete term as it is set to current')
            return redirect('terms')
        messages.success(self.request, self.success_message.format(obj.name))
        return super(TermDeleteView, self).delete(request, *args, **kwargs)


class ClassListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = StudentClass
    template_name = 'corecode/class_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = StudentClassForm()
        return context


class ClassCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = StudentClass
    form_class = StudentClassForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('classes')
    success_message = 'New class successfully added'


class ClassUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = StudentClass
    fields = ['name']
    success_url = reverse_lazy('classes')
    success_message = 'class successfully updated.'
    template_name = 'corecode/mgt_form.html'


class ClassDeleteView(LoginRequiredMixin, DeleteView):
    model = StudentClass
    success_url = reverse_lazy('classes')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The class {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        print(obj.name)
        messages.success(self.request, self.success_message.format(obj.name))
        return super(ClassDeleteView, self).delete(request, *args, **kwargs)


class SubjectListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = Subject
    template_name = 'corecode/subject_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = SubjectForm()
        return context


class SubjectCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Subject
    form_class = SubjectForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('subjects')
    success_message = 'New subject successfully added'


class SubjectUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Subject
    fields = ['name']
    success_url = reverse_lazy('subjects')
    success_message = 'Subject successfully updated.'
    template_name = 'corecode/mgt_form.html'


class SubjectDeleteView(LoginRequiredMixin, DeleteView):
    model = Subject
    success_url = reverse_lazy('subjects')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The subject {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        messages.success(self.request, self.success_message.format(obj.name))
        return super(SubjectDeleteView, self).delete(request, *args, **kwargs)


class CurrentSessionAndTermView(LoginRequiredMixin, View):
    """"""Current SEssion and Term""""""
    form_class = CurrentSessionForm
    template_name = 'corecode/current_session.html'

    def get(self, request, *args, **kwargs):
        form = self.form_class(initial={'current_session': AcademicSession.
            objects.get(current=True), 'current_term': AcademicTerm.objects
            .get(current=True)})
        return render(request, self.template_name, {'form': form})

    def post(self, request, *args, **kwargs):
        form = self.form_class(request.POST, initial={'current_session':
            AcademicSession.objects.get(current=True), 'current_term':
            AcademicTerm.objects.get(current=True)})
        if form.is_valid():
            session = form.cleaned_data['current_session']
            term = form.cleaned_data['current_term']
            AcademicSession.objects.filter(name=session).update(current=True)
            AcademicSession.objects.exclude(name=session).update(current=False)
            AcademicTerm.objects.filter(name=term).update(current=True)
        return render(request, self.template_name, {'form': form})
",../../Django-School-Management-System/apps/corecode/views.py,views,,module,0.0,,9495
views,,"from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import redirect, render
from django.urls import reverse_lazy
from django.views.generic import DetailView, ListView
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from apps.students.models import Student
from .forms import InvoiceItemFormset, InvoiceReceiptFormSet, Invoices
from .models import Invoice, InvoiceItem, Receipt


class InvoiceListView(LoginRequiredMixin, ListView):
    model = Invoice


class InvoiceCreateView(LoginRequiredMixin, CreateView):
    model = Invoice
    fields = '__all__'
    success_url = '/finance/list'

    def get_context_data(self, **kwargs):
        context = super(InvoiceCreateView, self).get_context_data(**kwargs)
        if self.request.POST:
            context['items'] = InvoiceItemFormset(self.request.POST, prefix
                ='invoiceitem_set')
        else:
            context['items'] = InvoiceItemFormset(prefix='invoiceitem_set')
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        formset = context['items']
        self.object = form.save()
        if self.object.id != None:
            if form.is_valid() and formset.is_valid():
                formset.instance = self.object
                formset.save()
        return super().form_valid(form)


class InvoiceDetailView(LoginRequiredMixin, DetailView):
    model = Invoice
    fields = '__all__'

    def get_context_data(self, **kwargs):
        context = super(InvoiceDetailView, self).get_context_data(**kwargs)
        context['receipts'] = Receipt.objects.filter(invoice=self.object)
        context['items'] = InvoiceItem.objects.filter(invoice=self.object)
        return context


class InvoiceUpdateView(LoginRequiredMixin, UpdateView):
    model = Invoice
    fields = ['student', 'session', 'term', 'class_for',
        'balance_from_previous_term']

    def get_context_data(self, **kwargs):
        context = super(InvoiceUpdateView, self).get_context_data(**kwargs)
        if self.request.POST:
            context['receipts'] = InvoiceReceiptFormSet(self.request.POST,
                instance=self.object)
            context['items'] = InvoiceItemFormset(self.request.POST,
                instance=self.object)
        else:
            context['receipts'] = InvoiceReceiptFormSet(instance=self.object)
            context['items'] = InvoiceItemFormset(instance=self.object)
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        formset = context['receipts']
        itemsformset = context['items']
        if form.is_valid() and formset.is_valid() and itemsformset.is_valid():
            form.save()
            formset.save()
            itemsformset.save()
        return super().form_valid(form)


class InvoiceDeleteView(LoginRequiredMixin, DeleteView):
    model = Invoice
    success_url = reverse_lazy('invoice-list')


class ReceiptCreateView(LoginRequiredMixin, CreateView):
    model = Receipt
    fields = ['amount_paid', 'date_paid', 'comment']
    success_url = reverse_lazy('invoice-list')

    def form_valid(self, form):
        obj = form.save(commit=False)
        invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
        obj.invoice = invoice
        obj.save()
        return redirect('invoice-list')

    def get_context_data(self, **kwargs):
        context = super(ReceiptCreateView, self).get_context_data(**kwargs)
        invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
        context['invoice'] = invoice
        return context


class ReceiptUpdateView(LoginRequiredMixin, UpdateView):
    model = Receipt
    fields = ['amount_paid', 'date_paid', 'comment']
    success_url = reverse_lazy('invoice-list')


class ReceiptDeleteView(LoginRequiredMixin, DeleteView):
    model = Receipt
    success_url = reverse_lazy('invoice-list')


@login_required
def bulk_invoice(request):
    return render(request, 'finance/bulk_invoice.html')
",../../Django-School-Management-System/apps/finance/views.py,views,,module,0.0,,4093
views,,"from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import redirect, render
from django.views.generic import DetailView, ListView, View
from apps.students.models import Student
from .forms import CreateResults, EditResults
from .models import Result


@login_required
def create_result(request):
    students = Student.objects.all()
    if request.method == 'POST':
        if 'finish' in request.POST:
            form = CreateResults(request.POST)
            if form.is_valid():
                subjects = form.cleaned_data['subjects']
                session = form.cleaned_data['session']
                term = form.cleaned_data['term']
                students = request.POST['students']
                results = []
                for student in students.split(','):
                    stu = Student.objects.get(pk=student)
                    if stu.current_class:
                        for subject in subjects:
                            check = Result.objects.filter(session=session,
                                term=term, current_class=stu.current_class,
                                subject=subject, student=stu).first()
                            if not check:
                                results.append(Result(session=session, term
                                    =term, current_class=stu.current_class,
                                    subject=subject, student=stu))
                Result.objects.bulk_create(results)
                return redirect('edit-results')
        id_list = request.POST.getlist('students')
        if id_list:
            form = CreateResults(initial={'session': request.
                current_session, 'term': request.current_term})
            studentlist = ','.join(id_list)
            return render(request, 'result/create_result_page2.html', {
                'students': studentlist, 'form': form, 'count': len(id_list)})
        else:
            messages.warning(request, 'You didnt select any student.')
    return render(request, 'result/create_result.html', {'students': students})


@login_required
def edit_results(request):
    if request.method == 'POST':
        form = EditResults(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Results successfully updated')
            return redirect('edit-results')
    else:
        results = Result.objects.filter(session=request.current_session,
            term=request.current_term)
        form = EditResults(queryset=results)
    return render(request, 'result/edit_results.html', {'formset': form})


class ResultListView(LoginRequiredMixin, View):

    def get(self, request, *args, **kwargs):
        results = Result.objects.filter(session=request.current_session,
            term=request.current_term)
        bulk = {}
        for result in results:
            test_total = 0
            exam_total = 0
            subjects = []
            for subject in results:
                if subject.student == result.student:
                    subjects.append(subject)
                    test_total += subject.test_score
                    exam_total += subject.exam_score
            bulk[result.student.id] = {'student': result.student,
                'subjects': subjects, 'test_total': test_total,
                'exam_total': exam_total, 'total_total': test_total +
                exam_total}
        context = {'results': bulk}
        return render(request, 'result/all_results.html', context)
",../../Django-School-Management-System/apps/result/views.py,views,,module,0.0,,3621
settings,"Django settings for school_app project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/","""""""
Django settings for school_app project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
""""""
import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SECRET_KEY = '__$1ud47e&nyso5h5o3fwnqu4+hfqcply9h$k*h2s34)hn5@nc'
DEBUG = True
ALLOWED_HOSTS = []
INSTALLED_APPS = ['django.contrib.auth', 'django.contrib.contenttypes',
    'django.contrib.sessions', 'django.contrib.messages',
    'django.contrib.staticfiles', 'django.contrib.humanize',
    'widget_tweaks', 'apps.corecode', 'apps.students', 'apps.staffs',
    'apps.finance', 'apps.result']
MIDDLEWARE = ['django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.corecode.middleware.SiteWideConfigs']
ROOT_URLCONF = 'school_app.urls'
TEMPLATES = [{'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [os.path.join(BASE_DIR, 'templates')], 'APP_DIRS': True,
    'OPTIONS': {'context_processors': [
    'django.template.context_processors.debug',
    'django.template.context_processors.request',
    'django.contrib.auth.context_processors.auth',
    'django.contrib.messages.context_processors.messages',
    'apps.corecode.context_processors.site_defaults']}}]
WSGI_APPLICATION = 'school_app.wsgi.application'
DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': os
    .path.join(BASE_DIR, 'db.sqlite3')}}
AUTH_PASSWORD_VALIDATORS = [{'NAME':
    'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'
    }, {'NAME':
    'django.contrib.auth.password_validation.MinimumLengthValidator'}, {
    'NAME':
    'django.contrib.auth.password_validation.CommonPasswordValidator'}, {
    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}
    ]
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240
STATIC_URL = '/static/'
STATICFILES_DIRS = os.path.join(BASE_DIR, 'static'),
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 10800
LOGGING = {'version': 1, 'disable_existing_loggers': False, 'formatters': {
    'verbose': {'format': '{levelname} {asctime} {message}', 'style': '{'}},
    'handlers': {'file': {'level': 'INFO', 'class':
    'logging.handlers.TimedRotatingFileHandler', 'when': 'W6', 'interval': 
    4, 'backupCount': 3, 'encoding': 'utf8', 'filename': os.path.join(
    BASE_DIR, 'debug.log'), 'formatter': 'verbose'}}, 'loggers': {'django':
    {'handlers': ['file'], 'level': 'INFO', 'propagate': True}}}
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
",../../Django-School-Management-System/school_app/settings.py,settings,,module,0.0,,3281
views,,"import csv
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.messages.views import SuccessMessageMixin
from django.forms import widgets
from django.http import HttpResponse
from django.urls import reverse_lazy
from django.views.generic import DetailView, ListView, View
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from apps.finance.models import Invoice
from .models import Student, StudentBulkUpload


class StudentListView(LoginRequiredMixin, ListView):
    model = Student
    template_name = 'students/student_list.html'


class StudentDetailView(LoginRequiredMixin, DetailView):
    model = Student
    template_name = 'students/student_detail.html'

    def get_context_data(self, **kwargs):
        context = super(StudentDetailView, self).get_context_data(**kwargs)
        context['payments'] = Invoice.objects.filter(student=self.object)
        return context


class StudentCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Student
    fields = '__all__'
    success_message = 'New student successfully added.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StudentCreateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
        return form


class StudentUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Student
    fields = '__all__'
    success_message = 'Record successfully updated.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StudentUpdateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
        return form


class StudentDeleteView(LoginRequiredMixin, DeleteView):
    model = Student
    success_url = reverse_lazy('student-list')


class StudentBulkUploadView(LoginRequiredMixin, SuccessMessageMixin, CreateView
    ):
    model = StudentBulkUpload
    template_name = 'students/students_upload.html'
    fields = ['csv_file']
    success_url = '/student/list'
    success_message = 'Successfully uploaded students'


class DownloadCSVViewdownloadcsv(LoginRequiredMixin, View):

    def get(self, request, *args, **kwargs):
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'
            ] = 'attachment; filename=""student_template.csv""'
        writer = csv.writer(response)
        writer.writerow(['registration_number', 'surname', 'firstname',
            'other_names', 'gender', 'parent_number', 'address',
            'current_class'])
        return response
",../../Django-School-Management-System/apps/students/views.py,views,,module,0.0,,3081
signals,,"import csv
import os
from io import StringIO
from django.db.models.signals import post_delete, post_save
from django.dispatch import receiver
from apps.corecode.models import StudentClass
from .models import Student, StudentBulkUpload


@receiver(post_save, sender=StudentBulkUpload)
def create_bulk_student(sender, created, instance, *args, **kwargs):
    if created:
        opened = StringIO(instance.csv_file.read().decode())
        reading = csv.DictReader(opened, delimiter=',')
        students = []
        for row in reading:
            if 'registration_number' in row and row['registration_number']:
                reg = row['registration_number']
                surname = row['surname'] if 'surname' in row and row['surname'
                    ] else ''
                firstname = row['firstname'] if 'firstname' in row and row[
                    'firstname'] else ''
                other_names = row['other_names'
                    ] if 'other_names' in row and row['other_names'] else ''
                gender = row['gender'].lower() if 'gender' in row and row[
                    'gender'] else ''
                phone = row['parent_number'] if 'parent_number' in row and row[
                    'parent_number'] else ''
                address = row['address'] if 'address' in row and row['address'
                    ] else ''
                current_class = row['current_class'
                    ] if 'current_class' in row and row['current_class'
                    ] else ''
                if current_class:
                    theclass, kind = StudentClass.objects.get_or_create(name
                        =current_class)
                check = Student.objects.filter(registration_number=reg).exists(
                    )
                if not check:
                    students.append(Student(registration_number=reg,
                        surname=surname, firstname=firstname, other_name=
                        other_names, gender=gender, current_class=theclass,
                        parent_mobile_number=phone, address=address,
                        current_status='active'))
        Student.objects.bulk_create(students)
        instance.csv_file.close()
        instance.delete()


def _delete_file(path):
    """"""Deletes file from filesystem.""""""
    if os.path.isfile(path):
        os.remove(path)


@receiver(post_delete, sender=StudentBulkUpload)
def delete_csv_file(sender, instance, *args, **kwargs):
    if instance.csv_file:
        _delete_file(instance.csv_file.path)


@receiver(post_delete, sender=Student)
def delete_passport_on_delete(sender, instance, *args, **kwargs):
    if instance.passport:
        _delete_file(instance.passport.path)
",../../Django-School-Management-System/apps/students/signals.py,signals,,module,0.0,,2715
models,,"from django.db import models
from django.urls import reverse
from django.utils import timezone
from apps.corecode.models import AcademicSession, AcademicTerm, StudentClass
from apps.students.models import Student


class Invoice(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)
    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)
    class_for = models.ForeignKey(StudentClass, on_delete=models.CASCADE)
    balance_from_previous_term = models.IntegerField(default=0)
    status = models.CharField(max_length=20, choices=[('active', 'Active'),
        ('closed', 'Closed')], default='active')


    class Meta:
        ordering = ['student', 'term']

    def __str__(self):
        return f'{self.student}'

    def balance(self):
        payable = self.total_amount_payable()
        paid = self.total_amount_paid()
        return payable - paid

    def amount_payable(self):
        items = InvoiceItem.objects.filter(invoice=self)
        total = 0
        for item in items:
            total += item.amount
        return total

    def total_amount_payable(self):
        return self.balance_from_previous_term + self.amount_payable()

    def total_amount_paid(self):
        receipts = Receipt.objects.filter(invoice=self)
        amount = 0
        for receipt in receipts:
            amount += receipt.amount_paid
        return amount

    def get_absolute_url(self):
        return reverse('invoice-detail', kwargs={'pk': self.pk})


class InvoiceItem(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)
    description = models.CharField(max_length=200)
    amount = models.IntegerField()


class Receipt(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)
    amount_paid = models.IntegerField()
    date_paid = models.DateField(default=timezone.now)
    comment = models.CharField(max_length=200, blank=True)

    def __str__(self):
        return f'Receipt on {self.date_paid}'
",../../Django-School-Management-System/apps/finance/models.py,models,,module,0.0,,2081
create_bulk_student,,"@receiver(post_save, sender=StudentBulkUpload)
def create_bulk_student(sender, created, instance, *args, **kwargs):
    if created:
        opened = StringIO(instance.csv_file.read().decode())
        reading = csv.DictReader(opened, delimiter=',')
        students = []
        for row in reading:
            if 'registration_number' in row and row['registration_number']:
                reg = row['registration_number']
                surname = row['surname'] if 'surname' in row and row['surname'
                    ] else ''
                firstname = row['firstname'] if 'firstname' in row and row[
                    'firstname'] else ''
                other_names = row['other_names'
                    ] if 'other_names' in row and row['other_names'] else ''
                gender = row['gender'].lower() if 'gender' in row and row[
                    'gender'] else ''
                phone = row['parent_number'] if 'parent_number' in row and row[
                    'parent_number'] else ''
                address = row['address'] if 'address' in row and row['address'
                    ] else ''
                current_class = row['current_class'
                    ] if 'current_class' in row and row['current_class'
                    ] else ''
                if current_class:
                    theclass, kind = StudentClass.objects.get_or_create(name
                        =current_class)
                check = Student.objects.filter(registration_number=reg).exists(
                    )
                if not check:
                    students.append(Student(registration_number=reg,
                        surname=surname, firstname=firstname, other_name=
                        other_names, gender=gender, current_class=theclass,
                        parent_mobile_number=phone, address=address,
                        current_status='active'))
        Student.objects.bulk_create(students)
        instance.csv_file.close()
        instance.delete()
",../../Django-School-Management-System/apps/students/signals.py,signals,signals,function,,,2003
models,,"from django.core.validators import RegexValidator
from django.db import models
from django.urls import reverse
from django.utils import timezone
from apps.corecode.models import StudentClass


class Student(models.Model):
    STATUS_CHOICES = [('active', 'Active'), ('inactive', 'Inactive')]
    GENDER_CHOICES = [('male', 'Male'), ('female', 'Female')]
    current_status = models.CharField(max_length=10, choices=STATUS_CHOICES,
        default='active')
    registration_number = models.CharField(max_length=200, unique=True)
    surname = models.CharField(max_length=200)
    firstname = models.CharField(max_length=200)
    other_name = models.CharField(max_length=200, blank=True)
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES,
        default='male')
    date_of_birth = models.DateField(default=timezone.now)
    current_class = models.ForeignKey(StudentClass, on_delete=models.
        SET_NULL, blank=True, null=True)
    date_of_admission = models.DateField(default=timezone.now)
    mobile_num_regex = RegexValidator(regex='^[0-9]{10,15}$', message=
        ""Entered mobile number isn't in a right format!"")
    parent_mobile_number = models.CharField(validators=[mobile_num_regex],
        max_length=13, blank=True)
    address = models.TextField(blank=True)
    others = models.TextField(blank=True)
    passport = models.ImageField(blank=True, upload_to='students/passports/')


    class Meta:
        ordering = ['surname', 'firstname', 'other_name']

    def __str__(self):
        return (
            f'{self.surname} {self.firstname} {self.other_name} ({self.registration_number})'
            )

    def get_absolute_url(self):
        return reverse('student-detail', kwargs={'pk': self.pk})


class StudentBulkUpload(models.Model):
    date_uploaded = models.DateTimeField(auto_now=True)
    csv_file = models.FileField(upload_to='students/bulkupload/')
",../../Django-School-Management-System/apps/students/models.py,models,,module,0.0,,1901
urls,,"from django.urls import path
from .views import ClassCreateView, ClassDeleteView, ClassListView, ClassUpdateView, CurrentSessionAndTermView, IndexView, SessionCreateView, SessionDeleteView, SessionListView, SessionUpdateView, SiteConfigView, SubjectCreateView, SubjectDeleteView, SubjectListView, SubjectUpdateView, TermCreateView, TermDeleteView, TermListView, TermUpdateView
urlpatterns = [path('', IndexView.as_view(), name='home'), path(
    'site-config', SiteConfigView.as_view(), name='configs'), path(
    'current-session/', CurrentSessionAndTermView.as_view(), name=
    'current-session'), path('session/list/', SessionListView.as_view(),
    name='sessions'), path('session/create/', SessionCreateView.as_view(),
    name='session-create'), path('session/<int:pk>/update/',
    SessionUpdateView.as_view(), name='session-update'), path(
    'session/<int:pk>/delete/', SessionDeleteView.as_view(), name=
    'session-delete'), path('term/list/', TermListView.as_view(), name=
    'terms'), path('term/create/', TermCreateView.as_view(), name=
    'term-create'), path('term/<int:pk>/update/', TermUpdateView.as_view(),
    name='term-update'), path('term/<int:pk>/delete/', TermDeleteView.
    as_view(), name='term-delete'), path('class/list/', ClassListView.
    as_view(), name='classes'), path('class/create/', ClassCreateView.
    as_view(), name='class-create'), path('class/<int:pk>/update/',
    ClassUpdateView.as_view(), name='class-update'), path(
    'class/<int:pk>/delete/', ClassDeleteView.as_view(), name=
    'class-delete'), path('subject/list/', SubjectListView.as_view(), name=
    'subjects'), path('subject/create/', SubjectCreateView.as_view(), name=
    'subject-create'), path('subject/<int:pk>/update/', SubjectUpdateView.
    as_view(), name='subject-update'), path('subject/<int:pk>/delete/',
    SubjectDeleteView.as_view(), name='subject-delete')]
",../../Django-School-Management-System/apps/corecode/urls.py,urls,,module,0.0,,1890
views,,"from django.contrib.messages.views import SuccessMessageMixin
from django.forms import widgets
from django.shortcuts import render
from django.urls import reverse_lazy
from django.views.generic import DetailView, ListView
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from .models import Staff


class StaffListView(ListView):
    model = Staff


class StaffDetailView(DetailView):
    model = Staff
    template_name = 'staffs/staff_detail.html'


class StaffCreateView(SuccessMessageMixin, CreateView):
    model = Staff
    fields = '__all__'
    success_message = 'New staff successfully added'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StaffCreateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
        return form


class StaffUpdateView(SuccessMessageMixin, UpdateView):
    model = Staff
    fields = '__all__'
    success_message = 'Record successfully updated.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StaffUpdateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
        return form


class StaffDeleteView(DeleteView):
    model = Staff
    success_url = reverse_lazy('staff-list')
",../../Django-School-Management-System/apps/staffs/views.py,views,,module,0.0,,1870
create_result,,"@login_required
def create_result(request):
    students = Student.objects.all()
    if request.method == 'POST':
        if 'finish' in request.POST:
            form = CreateResults(request.POST)
            if form.is_valid():
                subjects = form.cleaned_data['subjects']
                session = form.cleaned_data['session']
                term = form.cleaned_data['term']
                students = request.POST['students']
                results = []
                for student in students.split(','):
                    stu = Student.objects.get(pk=student)
                    if stu.current_class:
                        for subject in subjects:
                            check = Result.objects.filter(session=session,
                                term=term, current_class=stu.current_class,
                                subject=subject, student=stu).first()
                            if not check:
                                results.append(Result(session=session, term
                                    =term, current_class=stu.current_class,
                                    subject=subject, student=stu))
                Result.objects.bulk_create(results)
                return redirect('edit-results')
        id_list = request.POST.getlist('students')
        if id_list:
            form = CreateResults(initial={'session': request.
                current_session, 'term': request.current_term})
            studentlist = ','.join(id_list)
            return render(request, 'result/create_result_page2.html', {
                'students': studentlist, 'form': form, 'count': len(id_list)})
        else:
            messages.warning(request, 'You didnt select any student.')
    return render(request, 'result/create_result.html', {'students': students})
",../../Django-School-Management-System/apps/result/views.py,views,views,function,,,1812
Student,,"class Student(models.Model):
    STATUS_CHOICES = [('active', 'Active'), ('inactive', 'Inactive')]
    GENDER_CHOICES = [('male', 'Male'), ('female', 'Female')]
    current_status = models.CharField(max_length=10, choices=STATUS_CHOICES,
        default='active')
    registration_number = models.CharField(max_length=200, unique=True)
    surname = models.CharField(max_length=200)
    firstname = models.CharField(max_length=200)
    other_name = models.CharField(max_length=200, blank=True)
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES,
        default='male')
    date_of_birth = models.DateField(default=timezone.now)
    current_class = models.ForeignKey(StudentClass, on_delete=models.
        SET_NULL, blank=True, null=True)
    date_of_admission = models.DateField(default=timezone.now)
    mobile_num_regex = RegexValidator(regex='^[0-9]{10,15}$', message=
        ""Entered mobile number isn't in a right format!"")
    parent_mobile_number = models.CharField(validators=[mobile_num_regex],
        max_length=13, blank=True)
    address = models.TextField(blank=True)
    others = models.TextField(blank=True)
    passport = models.ImageField(blank=True, upload_to='students/passports/')


    class Meta:
        ordering = ['surname', 'firstname', 'other_name']

    def __str__(self):
        return (
            f'{self.surname} {self.firstname} {self.other_name} ({self.registration_number})'
            )

    def get_absolute_url(self):
        return reverse('student-detail', kwargs={'pk': self.pk})
",../../Django-School-Management-System/apps/students/models.py,models,models,class,,,1545
Invoice,,"class Invoice(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)
    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)
    class_for = models.ForeignKey(StudentClass, on_delete=models.CASCADE)
    balance_from_previous_term = models.IntegerField(default=0)
    status = models.CharField(max_length=20, choices=[('active', 'Active'),
        ('closed', 'Closed')], default='active')


    class Meta:
        ordering = ['student', 'term']

    def __str__(self):
        return f'{self.student}'

    def balance(self):
        payable = self.total_amount_payable()
        paid = self.total_amount_paid()
        return payable - paid

    def amount_payable(self):
        items = InvoiceItem.objects.filter(invoice=self)
        total = 0
        for item in items:
            total += item.amount
        return total

    def total_amount_payable(self):
        return self.balance_from_previous_term + self.amount_payable()

    def total_amount_paid(self):
        receipts = Receipt.objects.filter(invoice=self)
        amount = 0
        for receipt in receipts:
            amount += receipt.amount_paid
        return amount

    def get_absolute_url(self):
        return reverse('invoice-detail', kwargs={'pk': self.pk})
",../../Django-School-Management-System/apps/finance/models.py,models,models,class,,,1356
forms,,"from django import forms
from django.forms import ModelForm, modelformset_factory
from .models import AcademicSession, AcademicTerm, SiteConfig, StudentClass, Subject
SiteConfigForm = modelformset_factory(SiteConfig, fields=('key', 'value'),
    extra=0)


class AcademicSessionForm(ModelForm):
    prefix = 'Academic Session'


    class Meta:
        model = AcademicSession
        fields = ['name', 'current']


class AcademicTermForm(ModelForm):
    prefix = 'Academic Term'


    class Meta:
        model = AcademicTerm
        fields = ['name', 'current']


class SubjectForm(ModelForm):
    prefix = 'Subject'


    class Meta:
        model = Subject
        fields = ['name']


class StudentClassForm(ModelForm):
    prefix = 'Class'


    class Meta:
        model = StudentClass
        fields = ['name']


class CurrentSessionForm(forms.Form):
    current_session = forms.ModelChoiceField(queryset=AcademicSession.
        objects.all(), help_text=
        'Click <a href=""/session/create/?next=current-session/"">here</a> to add new session'
        )
    current_term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all
        (), help_text=
        'Click <a href=""/term/create/?next=current-session/"">here</a> to add new term'
        )
",../../Django-School-Management-System/apps/corecode/forms.py,forms,,module,0.0,,1262
models,,"from django.core.validators import RegexValidator
from django.db import models
from django.urls import reverse
from django.utils import timezone


class Staff(models.Model):
    STATUS = [('active', 'Active'), ('inactive', 'Inactive')]
    GENDER = [('male', 'Male'), ('female', 'Female')]
    current_status = models.CharField(max_length=10, choices=STATUS,
        default='active')
    surname = models.CharField(max_length=200)
    firstname = models.CharField(max_length=200)
    other_name = models.CharField(max_length=200, blank=True)
    gender = models.CharField(max_length=10, choices=GENDER, default='male')
    date_of_birth = models.DateField(default=timezone.now)
    date_of_admission = models.DateField(default=timezone.now)
    mobile_num_regex = RegexValidator(regex='^[0-9]{10,15}$', message=
        ""Entered mobile number isn't in a right format!"")
    mobile_number = models.CharField(validators=[mobile_num_regex],
        max_length=13, blank=True)
    address = models.TextField(blank=True)
    others = models.TextField(blank=True)

    def __str__(self):
        return f'{self.surname} {self.firstname} {self.other_name}'

    def get_absolute_url(self):
        return reverse('staff-detail', kwargs={'pk': self.pk})
",../../Django-School-Management-System/apps/staffs/models.py,models,,module,0.0,,1247
models,,"from django.db import models


class SiteConfig(models.Model):
    """"""Site Configurations""""""
    key = models.SlugField()
    value = models.CharField(max_length=200)

    def __str__(self):
        return self.key


class AcademicSession(models.Model):
    """"""Academic Session""""""
    name = models.CharField(max_length=200, unique=True)
    current = models.BooleanField(default=True)


    class Meta:
        ordering = ['-name']

    def __str__(self):
        return self.name


class AcademicTerm(models.Model):
    """"""Academic Term""""""
    name = models.CharField(max_length=20, unique=True)
    current = models.BooleanField(default=True)


    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name


class Subject(models.Model):
    """"""Subject""""""
    name = models.CharField(max_length=200, unique=True)


    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name


class StudentClass(models.Model):
    name = models.CharField(max_length=200, unique=True)


    class Meta:
        verbose_name = 'Class'
        verbose_name_plural = 'Classes'
        ordering = ['name']

    def __str__(self):
        return self.name
",../../Django-School-Management-System/apps/corecode/models.py,models,,module,0.0,,1201
CurrentSessionAndTermView,Current SEssion and Term,"class CurrentSessionAndTermView(LoginRequiredMixin, View):
    """"""Current SEssion and Term""""""
    form_class = CurrentSessionForm
    template_name = 'corecode/current_session.html'

    def get(self, request, *args, **kwargs):
        form = self.form_class(initial={'current_session': AcademicSession.
            objects.get(current=True), 'current_term': AcademicTerm.objects
            .get(current=True)})
        return render(request, self.template_name, {'form': form})

    def post(self, request, *args, **kwargs):
        form = self.form_class(request.POST, initial={'current_session':
            AcademicSession.objects.get(current=True), 'current_term':
            AcademicTerm.objects.get(current=True)})
        if form.is_valid():
            session = form.cleaned_data['current_session']
            term = form.cleaned_data['current_term']
            AcademicSession.objects.filter(name=session).update(current=True)
            AcademicSession.objects.exclude(name=session).update(current=False)
            AcademicTerm.objects.filter(name=term).update(current=True)
        return render(request, self.template_name, {'form': form})
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,1161
urls,"newapp URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))","""""""newapp URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
""""""
from django.conf import settings
from django.conf.urls.static import static
from django.urls import include, path
urlpatterns = [path('accounts/', include('django.contrib.auth.urls')), path
    ('', include('apps.corecode.urls')), path('student/', include(
    'apps.students.urls')), path('staff/', include('apps.staffs.urls')),
    path('finance/', include('apps.finance.urls')), path('result/', include
    ('apps.result.urls'))] + static(settings.MEDIA_URL, document_root=
    settings.MEDIA_ROOT)
",../../Django-School-Management-System/school_app/urls.py,urls,,module,0.0,,1132
Staff,,"class Staff(models.Model):
    STATUS = [('active', 'Active'), ('inactive', 'Inactive')]
    GENDER = [('male', 'Male'), ('female', 'Female')]
    current_status = models.CharField(max_length=10, choices=STATUS,
        default='active')
    surname = models.CharField(max_length=200)
    firstname = models.CharField(max_length=200)
    other_name = models.CharField(max_length=200, blank=True)
    gender = models.CharField(max_length=10, choices=GENDER, default='male')
    date_of_birth = models.DateField(default=timezone.now)
    date_of_admission = models.DateField(default=timezone.now)
    mobile_num_regex = RegexValidator(regex='^[0-9]{10,15}$', message=
        ""Entered mobile number isn't in a right format!"")
    mobile_number = models.CharField(validators=[mobile_num_regex],
        max_length=13, blank=True)
    address = models.TextField(blank=True)
    others = models.TextField(blank=True)

    def __str__(self):
        return f'{self.surname} {self.firstname} {self.other_name}'

    def get_absolute_url(self):
        return reverse('staff-detail', kwargs={'pk': self.pk})
",../../Django-School-Management-System/apps/staffs/models.py,models,models,class,,,1100
InvoiceUpdateView,,"class InvoiceUpdateView(LoginRequiredMixin, UpdateView):
    model = Invoice
    fields = ['student', 'session', 'term', 'class_for',
        'balance_from_previous_term']

    def get_context_data(self, **kwargs):
        context = super(InvoiceUpdateView, self).get_context_data(**kwargs)
        if self.request.POST:
            context['receipts'] = InvoiceReceiptFormSet(self.request.POST,
                instance=self.object)
            context['items'] = InvoiceItemFormset(self.request.POST,
                instance=self.object)
        else:
            context['receipts'] = InvoiceReceiptFormSet(instance=self.object)
            context['items'] = InvoiceItemFormset(instance=self.object)
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        formset = context['receipts']
        itemsformset = context['items']
        if form.is_valid() and formset.is_valid() and itemsformset.is_valid():
            form.save()
            formset.save()
            itemsformset.save()
        return super().form_valid(form)
",../../Django-School-Management-System/apps/finance/views.py,views,views,class,,,1083
models,,"from django.db import models
from apps.corecode.models import AcademicSession, AcademicTerm, StudentClass, Subject
from apps.students.models import Student
from .utils import score_grade


class Result(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)
    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)
    current_class = models.ForeignKey(StudentClass, on_delete=models.CASCADE)
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)
    test_score = models.IntegerField(default=0)
    exam_score = models.IntegerField(default=0)


    class Meta:
        ordering = ['subject']

    def __str__(self):
        return f'{self.student} {self.session} {self.term} {self.subject}'

    def total_score(self):
        return self.test_score + self.exam_score

    def grade(self):
        return score_grade(self.total_score())
",../../Django-School-Management-System/apps/result/models.py,models,,module,0.0,,963
ResultListView,,"class ResultListView(LoginRequiredMixin, View):

    def get(self, request, *args, **kwargs):
        results = Result.objects.filter(session=request.current_session,
            term=request.current_term)
        bulk = {}
        for result in results:
            test_total = 0
            exam_total = 0
            subjects = []
            for subject in results:
                if subject.student == result.student:
                    subjects.append(subject)
                    test_total += subject.test_score
                    exam_total += subject.exam_score
            bulk[result.student.id] = {'student': result.student,
                'subjects': subjects, 'test_total': test_total,
                'exam_total': exam_total, 'total_total': test_total +
                exam_total}
        context = {'results': bulk}
        return render(request, 'result/all_results.html', context)
",../../Django-School-Management-System/apps/result/views.py,views,views,class,,,907
InvoiceCreateView,,"class InvoiceCreateView(LoginRequiredMixin, CreateView):
    model = Invoice
    fields = '__all__'
    success_url = '/finance/list'

    def get_context_data(self, **kwargs):
        context = super(InvoiceCreateView, self).get_context_data(**kwargs)
        if self.request.POST:
            context['items'] = InvoiceItemFormset(self.request.POST, prefix
                ='invoiceitem_set')
        else:
            context['items'] = InvoiceItemFormset(prefix='invoiceitem_set')
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        formset = context['items']
        self.object = form.save()
        if self.object.id != None:
            if form.is_valid() and formset.is_valid():
                formset.instance = self.object
                formset.save()
        return super().form_valid(form)
",../../Django-School-Management-System/apps/finance/views.py,views,views,class,,,860
urls,,"from django.urls import path
from .views import InvoiceCreateView, InvoiceDeleteView, InvoiceDetailView, InvoiceListView, InvoiceUpdateView, ReceiptCreateView, ReceiptUpdateView, bulk_invoice
urlpatterns = [path('list/', InvoiceListView.as_view(), name='invoice-list'
    ), path('create/', InvoiceCreateView.as_view(), name='invoice-create'),
    path('<int:pk>/detail/', InvoiceDetailView.as_view(), name=
    'invoice-detail'), path('<int:pk>/update/', InvoiceUpdateView.as_view(),
    name='invoice-update'), path('<int:pk>/delete/', InvoiceDeleteView.
    as_view(), name='invoice-delete'), path('receipt/create',
    ReceiptCreateView.as_view(), name='receipt-create'), path(
    'receipt/<int:pk>/update/', ReceiptUpdateView.as_view(), name=
    'receipt-update'), path('bulk-invoice/', bulk_invoice, name='bulk-invoice')
    ]
",../../Django-School-Management-System/apps/finance/urls.py,urls,,module,0.0,,835
Result,,"class Result(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)
    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)
    current_class = models.ForeignKey(StudentClass, on_delete=models.CASCADE)
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)
    test_score = models.IntegerField(default=0)
    exam_score = models.IntegerField(default=0)


    class Meta:
        ordering = ['subject']

    def __str__(self):
        return f'{self.student} {self.session} {self.term} {self.subject}'

    def total_score(self):
        return self.test_score + self.exam_score

    def grade(self):
        return score_grade(self.total_score())
",../../Django-School-Management-System/apps/result/models.py,models,models,class,,,774
urls,,"from django.urls import path
from .views import DownloadCSVViewdownloadcsv, StudentBulkUploadView, StudentCreateView, StudentDeleteView, StudentDetailView, StudentListView, StudentUpdateView
urlpatterns = [path('list', StudentListView.as_view(), name='student-list'),
    path('<int:pk>/', StudentDetailView.as_view(), name='student-detail'),
    path('create/', StudentCreateView.as_view(), name='student-create'),
    path('<int:pk>/update/', StudentUpdateView.as_view(), name=
    'student-update'), path('delete/<int:pk>/', StudentDeleteView.as_view(),
    name='student-delete'), path('upload/', StudentBulkUploadView.as_view(),
    name='student-upload'), path('download-csv/',
    DownloadCSVViewdownloadcsv.as_view(), name='download-csv')]
",../../Django-School-Management-System/apps/students/urls.py,urls,,module,0.0,,748
SiteConfigView,Site Config View,"class SiteConfigView(LoginRequiredMixin, View):
    """"""Site Config View""""""
    form_class = SiteConfigForm
    template_name = 'corecode/siteconfig.html'

    def get(self, request, *args, **kwargs):
        formset = self.form_class(queryset=SiteConfig.objects.all())
        context = {'formset': formset}
        return render(request, self.template_name, context)

    def post(self, request, *args, **kwargs):
        formset = self.form_class(request.POST)
        if formset.is_valid():
            formset.save()
            messages.success(request, 'Configurations successfully updated')
        context = {'formset': formset, 'title': 'Configuration'}
        return render(request, self.template_name, context)
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,723
SessionUpdateView,,"class SessionUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = AcademicSession
    form_class = AcademicSessionForm
    success_url = reverse_lazy('sessions')
    success_message = 'Session successfully updated.'
    template_name = 'corecode/mgt_form.html'

    def form_valid(self, form):
        obj = self.object
        if obj.current == False:
            terms = AcademicSession.objects.filter(current=True).exclude(name
                =obj.name).exists()
            if not terms:
                messages.warning(self.request,
                    'You must set a session to current.')
                return redirect('session-list')
        return super().form_valid(form)
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,710
signals,,"from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import AcademicSession, AcademicTerm


@receiver(post_save, sender=AcademicSession)
def after_saving_session(sender, created, instance, *args, **kwargs):
    """"""Change all academic sessions to false if this is true""""""
    if instance.current is True:
        AcademicSession.objects.exclude(pk=instance.id).update(current=False)


@receiver(post_save, sender=AcademicTerm)
def after_saving_term(sender, created, instance, *args, **kwargs):
    """"""Change all academic terms to false if this is true.""""""
    if instance.current is True:
        AcademicTerm.objects.exclude(pk=instance.id).update(current=False)
",../../Django-School-Management-System/apps/corecode/signals.py,signals,,module,0.0,,707
SessionDeleteView,,"class SessionDeleteView(LoginRequiredMixin, DeleteView):
    model = AcademicSession
    success_url = reverse_lazy('sessions')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The session {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        if obj.current == True:
            messages.warning(request,
                'Cannot delete session as it is set to current')
            return redirect('sessions')
        messages.success(self.request, self.success_message.format(obj.name))
        return super(SessionDeleteView, self).delete(request, *args, **kwargs)
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,694
TermUpdateView,,"class TermUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = AcademicTerm
    form_class = AcademicTermForm
    success_url = reverse_lazy('terms')
    success_message = 'Term successfully updated.'
    template_name = 'corecode/mgt_form.html'

    def form_valid(self, form):
        obj = self.object
        if obj.current == False:
            terms = AcademicTerm.objects.filter(current=True).exclude(name=
                obj.name).exists()
            if not terms:
                messages.warning(self.request,
                    'You must set a term to current.')
                return redirect('term')
        return super().form_valid(form)
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,681
TermDeleteView,,"class TermDeleteView(LoginRequiredMixin, DeleteView):
    model = AcademicTerm
    success_url = reverse_lazy('terms')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The term {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        if obj.current == True:
            messages.warning(request,
                'Cannot delete term as it is set to current')
            return redirect('terms')
        messages.success(self.request, self.success_message.format(obj.name))
        return super(TermDeleteView, self).delete(request, *args, **kwargs)
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,673
StudentUpdateView,,"class StudentUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Student
    fields = '__all__'
    success_message = 'Record successfully updated.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StudentUpdateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
        return form
",../../Django-School-Management-System/apps/students/views.py,views,views,class,,,672
ReceiptCreateView,,"class ReceiptCreateView(LoginRequiredMixin, CreateView):
    model = Receipt
    fields = ['amount_paid', 'date_paid', 'comment']
    success_url = reverse_lazy('invoice-list')

    def form_valid(self, form):
        obj = form.save(commit=False)
        invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
        obj.invoice = invoice
        obj.save()
        return redirect('invoice-list')

    def get_context_data(self, **kwargs):
        context = super(ReceiptCreateView, self).get_context_data(**kwargs)
        invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
        context['invoice'] = invoice
        return context
",../../Django-School-Management-System/apps/finance/views.py,views,views,class,,,656
StaffUpdateView,,"class StaffUpdateView(SuccessMessageMixin, UpdateView):
    model = Staff
    fields = '__all__'
    success_message = 'Record successfully updated.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StaffUpdateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
        return form
",../../Django-School-Management-System/apps/staffs/views.py,views,views,class,,,646
StaffCreateView,,"class StaffCreateView(SuccessMessageMixin, CreateView):
    model = Staff
    fields = '__all__'
    success_message = 'New staff successfully added'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StaffCreateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
        return form
",../../Django-School-Management-System/apps/staffs/views.py,views,views,class,,,646
forms,,"from django import forms
from django.forms import modelformset_factory
from apps.corecode.models import AcademicSession, AcademicTerm, Subject
from .models import Result


class CreateResults(forms.Form):
    session = forms.ModelChoiceField(queryset=AcademicSession.objects.all())
    term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all())
    subjects = forms.ModelMultipleChoiceField(queryset=Subject.objects.all(
        ), widget=forms.CheckboxSelectMultiple)


EditResults = modelformset_factory(Result, fields=('test_score',
    'exam_score'), extra=0, can_delete=True)
",../../Django-School-Management-System/apps/result/forms.py,forms,,module,0.0,,589
manage,Django's command-line utility for administrative tasks.,"""""""Django's command-line utility for administrative tasks.""""""
import os
import sys


def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_app.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            ""Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?""
            ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
",../../Django-School-Management-System/manage.py,manage,,module,0.0,,582
StudentCreateView,,"class StudentCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Student
    fields = '__all__'
    success_message = 'New student successfully added.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StudentCreateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
        return form
",../../Django-School-Management-System/apps/students/views.py,views,views,class,,,570
signals,,"from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import Invoice


@receiver(post_save, sender=Invoice)
def after_creating_invoice(sender, instance, created, **kwargs):
    if created:
        previous_inv = Invoice.objects.filter(student=instance.student
            ).exclude(id=instance.id).last()
        if previous_inv:
            previous_inv.status = 'closed'
            previous_inv.save()
            instance.balance_from_previous_term = previous_inv.balance()
            instance.save()
",../../Django-School-Management-System/apps/finance/signals.py,signals,,module,0.0,,549
ClassDeleteView,,"class ClassDeleteView(LoginRequiredMixin, DeleteView):
    model = StudentClass
    success_url = reverse_lazy('classes')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The class {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        print(obj.name)
        messages.success(self.request, self.success_message.format(obj.name))
        return super(ClassDeleteView, self).delete(request, *args, **kwargs)
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,533
edit_results,,"@login_required
def edit_results(request):
    if request.method == 'POST':
        form = EditResults(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Results successfully updated')
            return redirect('edit-results')
    else:
        results = Result.objects.filter(session=request.current_session,
            term=request.current_term)
        form = EditResults(queryset=results)
    return render(request, 'result/edit_results.html', {'formset': form})
",../../Django-School-Management-System/apps/result/views.py,views,views,function,,,524
SubjectDeleteView,,"class SubjectDeleteView(LoginRequiredMixin, DeleteView):
    model = Subject
    success_url = reverse_lazy('subjects')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The subject {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        messages.success(self.request, self.success_message.format(obj.name))
        return super(SubjectDeleteView, self).delete(request, *args, **kwargs)
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,511
urls,,"from django.urls import path
from .views import StaffCreateView, StaffDeleteView, StaffDetailView, StaffListView, StaffUpdateView
urlpatterns = [path('list/', StaffListView.as_view(), name='staff-list'),
    path('<int:pk>/', StaffDetailView.as_view(), name='staff-detail'), path
    ('create/', StaffCreateView.as_view(), name='staff-create'), path(
    '<int:pk>/update/', StaffUpdateView.as_view(), name='staff-update'),
    path('<int:pk>/delete/', StaffDeleteView.as_view(), name='staff-delete')]
",../../Django-School-Management-System/apps/staffs/urls.py,urls,,module,0.0,,502
DownloadCSVViewdownloadcsv,,"class DownloadCSVViewdownloadcsv(LoginRequiredMixin, View):

    def get(self, request, *args, **kwargs):
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'
            ] = 'attachment; filename=""student_template.csv""'
        writer = csv.writer(response)
        writer.writerow(['registration_number', 'surname', 'firstname',
            'other_names', 'gender', 'parent_number', 'address',
            'current_class'])
        return response
",../../Django-School-Management-System/apps/students/views.py,views,views,class,,,493
middleware,,"from .models import AcademicSession, AcademicTerm


class SiteWideConfigs:

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        current_session = AcademicSession.objects.get(current=True)
        current_term = AcademicTerm.objects.get(current=True)
        request.current_session = current_session
        request.current_term = current_term
        response = self.get_response(request)
        return response
",../../Django-School-Management-System/apps/corecode/middleware.py,middleware,,module,0.0,,483
main,,"def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_app.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            ""Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?""
            ) from exc
    execute_from_command_line(sys.argv)
",../../Django-School-Management-System/manage.py,manage,manage,function,,,457
forms,,"from django.forms import inlineformset_factory, modelformset_factory
from .models import Invoice, InvoiceItem, Receipt
InvoiceItemFormset = inlineformset_factory(Invoice, InvoiceItem, fields=[
    'description', 'amount'], extra=1, can_delete=True)
InvoiceReceiptFormSet = inlineformset_factory(Invoice, Receipt, fields=(
    'amount_paid', 'date_paid', 'comment'), extra=0, can_delete=True)
Invoices = modelformset_factory(Invoice, exclude=(), extra=4)
",../../Django-School-Management-System/apps/finance/forms.py,forms,,module,0.0,,454
SessionCreateView,,"class SessionCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = AcademicSession
    form_class = AcademicSessionForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('sessions')
    success_message = 'New session successfully added'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Add new session'
        return context
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,450
CurrentSessionForm,,"class CurrentSessionForm(forms.Form):
    current_session = forms.ModelChoiceField(queryset=AcademicSession.
        objects.all(), help_text=
        'Click <a href=""/session/create/?next=current-session/"">here</a> to add new session'
        )
    current_term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all
        (), help_text=
        'Click <a href=""/term/create/?next=current-session/"">here</a> to add new term'
        )
",../../Django-School-Management-System/apps/corecode/forms.py,forms,forms,class,,,442
after_creating_invoice,,"@receiver(post_save, sender=Invoice)
def after_creating_invoice(sender, instance, created, **kwargs):
    if created:
        previous_inv = Invoice.objects.filter(student=instance.student
            ).exclude(id=instance.id).last()
        if previous_inv:
            previous_inv.status = 'closed'
            previous_inv.save()
            instance.balance_from_previous_term = previous_inv.balance()
            instance.save()
",../../Django-School-Management-System/apps/finance/signals.py,signals,signals,function,,,435
SiteWideConfigs,,"class SiteWideConfigs:

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        current_session = AcademicSession.objects.get(current=True)
        current_term = AcademicTerm.objects.get(current=True)
        request.current_session = current_session
        request.current_term = current_term
        response = self.get_response(request)
        return response
",../../Django-School-Management-System/apps/corecode/middleware.py,middleware,middleware,class,,,431
context_processors,,"from .models import AcademicSession, AcademicTerm, SiteConfig


def site_defaults(request):
    current_session = AcademicSession.objects.get(current=True)
    current_term = AcademicTerm.objects.get(current=True)
    vals = SiteConfig.objects.all()
    contexts = {'current_session': current_session.name, 'current_term':
        current_term.name}
    for val in vals:
        contexts[val.key] = val.value
    return contexts
",../../Django-School-Management-System/apps/corecode/context_processors.py,context_processors,,module,0.0,,429
wsgi,"WSGI config for school_app project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/","""""""
WSGI config for school_app project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/
""""""
import os
from django.core.wsgi import get_wsgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_app.settings')
application = get_wsgi_application()
",../../Django-School-Management-System/school_app/wsgi.py,wsgi,,module,0.0,,393
InvoiceDetailView,,"class InvoiceDetailView(LoginRequiredMixin, DetailView):
    model = Invoice
    fields = '__all__'

    def get_context_data(self, **kwargs):
        context = super(InvoiceDetailView, self).get_context_data(**kwargs)
        context['receipts'] = Receipt.objects.filter(invoice=self.object)
        context['items'] = InvoiceItem.objects.filter(invoice=self.object)
        return context
",../../Django-School-Management-System/apps/finance/views.py,views,views,class,,,391
asgi,"ASGI config for newapp project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/","""""""
ASGI config for newapp project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/
""""""
import os
from django.core.asgi import get_asgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'newapp.settings')
application = get_asgi_application()
",../../Django-School-Management-System/school_app/asgi.py,asgi,,module,0.0,,385
site_defaults,,"def site_defaults(request):
    current_session = AcademicSession.objects.get(current=True)
    current_term = AcademicTerm.objects.get(current=True)
    vals = SiteConfig.objects.all()
    contexts = {'current_session': current_session.name, 'current_term':
        current_term.name}
    for val in vals:
        contexts[val.key] = val.value
    return contexts
",../../Django-School-Management-System/apps/corecode/context_processors.py,context_processors,context_processors,function,,,365
StudentDetailView,,"class StudentDetailView(LoginRequiredMixin, DetailView):
    model = Student
    template_name = 'students/student_detail.html'

    def get_context_data(self, **kwargs):
        context = super(StudentDetailView, self).get_context_data(**kwargs)
        context['payments'] = Invoice.objects.filter(student=self.object)
        return context
",../../Django-School-Management-System/apps/students/views.py,views,views,class,,,344
Receipt,,"class Receipt(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)
    amount_paid = models.IntegerField()
    date_paid = models.DateField(default=timezone.now)
    comment = models.CharField(max_length=200, blank=True)

    def __str__(self):
        return f'Receipt on {self.date_paid}'
",../../Django-School-Management-System/apps/finance/models.py,models,models,class,,,320
SessionListView,,"class SessionListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = AcademicSession
    template_name = 'corecode/session_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = AcademicSessionForm()
        return context
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,318
ClassListView,,"class ClassListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = StudentClass
    template_name = 'corecode/class_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = StudentClassForm()
        return context
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,308
TermListView,,"class TermListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = AcademicTerm
    template_name = 'corecode/term_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = AcademicTermForm()
        return context
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,306
CreateResults,,"class CreateResults(forms.Form):
    session = forms.ModelChoiceField(queryset=AcademicSession.objects.all())
    term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all())
    subjects = forms.ModelMultipleChoiceField(queryset=Subject.objects.all(
        ), widget=forms.CheckboxSelectMultiple)
",../../Django-School-Management-System/apps/result/forms.py,forms,forms,class,,,305
SubjectListView,,"class SubjectListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = Subject
    template_name = 'corecode/subject_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = SubjectForm()
        return context
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,302
urls,,"from django.urls import path
from .views import ResultListView, create_result, edit_results
urlpatterns = [path('create/', create_result, name='create-result'), path(
    'edit-results/', edit_results, name='edit-results'), path('view/all',
    ResultListView.as_view(), name='view-results')]
",../../Django-School-Management-System/apps/result/urls.py,urls,,module,0.0,,293
after_saving_session,Change all academic sessions to false if this is true,"@receiver(post_save, sender=AcademicSession)
def after_saving_session(sender, created, instance, *args, **kwargs):
    """"""Change all academic sessions to false if this is true""""""
    if instance.current is True:
        AcademicSession.objects.exclude(pk=instance.id).update(current=False)
",../../Django-School-Management-System/apps/corecode/signals.py,signals,signals,function,,,290
StudentBulkUploadView,,"class StudentBulkUploadView(LoginRequiredMixin, SuccessMessageMixin, CreateView
    ):
    model = StudentBulkUpload
    template_name = 'students/students_upload.html'
    fields = ['csv_file']
    success_url = '/student/list'
    success_message = 'Successfully uploaded students'
",../../Django-School-Management-System/apps/students/views.py,views,views,class,,,284
after_saving_term,Change all academic terms to false if this is true.,"@receiver(post_save, sender=AcademicTerm)
def after_saving_term(sender, created, instance, *args, **kwargs):
    """"""Change all academic terms to false if this is true.""""""
    if instance.current is True:
        AcademicTerm.objects.exclude(pk=instance.id).update(current=False)
",../../Django-School-Management-System/apps/corecode/signals.py,signals,signals,function,,,279
ClassCreateView,,"class ClassCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = StudentClass
    form_class = StudentClassForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('classes')
    success_message = 'New class successfully added'
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,275
TermCreateView,,"class TermCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = AcademicTerm
    form_class = AcademicTermForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('terms')
    success_message = 'New term successfully added'
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,271
SubjectCreateView,,"class SubjectCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Subject
    form_class = SubjectForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('subjects')
    success_message = 'New subject successfully added'
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,270
AcademicSession,Academic Session,"class AcademicSession(models.Model):
    """"""Academic Session""""""
    name = models.CharField(max_length=200, unique=True)
    current = models.BooleanField(default=True)


    class Meta:
        ordering = ['-name']

    def __str__(self):
        return self.name
",../../Django-School-Management-System/apps/corecode/models.py,models,models,class,,,265
ClassUpdateView,,"class ClassUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = StudentClass
    fields = ['name']
    success_url = reverse_lazy('classes')
    success_message = 'class successfully updated.'
    template_name = 'corecode/mgt_form.html'
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,262
SubjectUpdateView,,"class SubjectUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Subject
    fields = ['name']
    success_url = reverse_lazy('subjects')
    success_message = 'Subject successfully updated.'
    template_name = 'corecode/mgt_form.html'
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,262
AcademicTerm,Academic Term,"class AcademicTerm(models.Model):
    """"""Academic Term""""""
    name = models.CharField(max_length=20, unique=True)
    current = models.BooleanField(default=True)


    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name
",../../Django-School-Management-System/apps/corecode/models.py,models,models,class,,,257
StudentClass,,"class StudentClass(models.Model):
    name = models.CharField(max_length=200, unique=True)


    class Meta:
        verbose_name = 'Class'
        verbose_name_plural = 'Classes'
        ordering = ['name']

    def __str__(self):
        return self.name
",../../Django-School-Management-System/apps/corecode/models.py,models,models,class,,,257
Subject,Subject,"class Subject(models.Model):
    """"""Subject""""""
    name = models.CharField(max_length=200, unique=True)


    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name
",../../Django-School-Management-System/apps/corecode/models.py,models,models,class,,,199
InvoiceItem,,"class InvoiceItem(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)
    description = models.CharField(max_length=200)
    amount = models.IntegerField()
",../../Django-School-Management-System/apps/finance/models.py,models,models,class,,,186
SiteConfig,Site Configurations,"class SiteConfig(models.Model):
    """"""Site Configurations""""""
    key = models.SlugField()
    value = models.CharField(max_length=200)

    def __str__(self):
        return self.key
",../../Django-School-Management-System/apps/corecode/models.py,models,models,class,,,184
total_amount_paid,,"def total_amount_paid(self):
    receipts = Receipt.objects.filter(invoice=self)
    amount = 0
    for receipt in receipts:
        amount += receipt.amount_paid
    return amount
",../../Django-School-Management-System/apps/finance/models.py,models,models,function,,,181
ReceiptUpdateView,,"class ReceiptUpdateView(LoginRequiredMixin, UpdateView):
    model = Receipt
    fields = ['amount_paid', 'date_paid', 'comment']
    success_url = reverse_lazy('invoice-list')
",../../Django-School-Management-System/apps/finance/views.py,views,views,class,,,177
delete_csv_file,,"@receiver(post_delete, sender=StudentBulkUpload)
def delete_csv_file(sender, instance, *args, **kwargs):
    if instance.csv_file:
        _delete_file(instance.csv_file.path)
",../../Django-School-Management-System/apps/students/signals.py,signals,signals,function,,,176
delete_passport_on_delete,,"@receiver(post_delete, sender=Student)
def delete_passport_on_delete(sender, instance, *args, **kwargs):
    if instance.passport:
        _delete_file(instance.passport.path)
",../../Django-School-Management-System/apps/students/signals.py,signals,signals,function,,,176
amount_payable,,"def amount_payable(self):
    items = InvoiceItem.objects.filter(invoice=self)
    total = 0
    for item in items:
        total += item.amount
    return total
",../../Django-School-Management-System/apps/finance/models.py,models,models,function,,,162
StudentBulkUpload,,"class StudentBulkUpload(models.Model):
    date_uploaded = models.DateTimeField(auto_now=True)
    csv_file = models.FileField(upload_to='students/bulkupload/')
",../../Django-School-Management-System/apps/students/models.py,models,models,class,,,161
AcademicSessionForm,,"class AcademicSessionForm(ModelForm):
    prefix = 'Academic Session'


    class Meta:
        model = AcademicSession
        fields = ['name', 'current']
",../../Django-School-Management-System/apps/corecode/forms.py,forms,forms,class,,,157
apps,,"from django.apps import AppConfig


class StudentsConfig(AppConfig):
    name = 'apps.students'

    def ready(self):
        import apps.students.signals
",../../Django-School-Management-System/apps/students/apps.py,apps,,module,0.0,,155
apps,,"from django.apps import AppConfig


class CorecodeConfig(AppConfig):
    name = 'apps.corecode'

    def ready(self):
        import apps.corecode.signals
",../../Django-School-Management-System/apps/corecode/apps.py,apps,,module,0.0,,155
apps,,"from django.apps import AppConfig


class FinanceConfig(AppConfig):
    name = 'apps.finance'

    def ready(self):
        import apps.finance.signals
",../../Django-School-Management-System/apps/finance/apps.py,apps,,module,0.0,,152
AcademicTermForm,,"class AcademicTermForm(ModelForm):
    prefix = 'Academic Term'


    class Meta:
        model = AcademicTerm
        fields = ['name', 'current']
",../../Django-School-Management-System/apps/corecode/forms.py,forms,forms,class,,,148
__str__,,"def __str__(self):
    return (
        f'{self.surname} {self.firstname} {self.other_name} ({self.registration_number})'
        )
",../../Django-School-Management-System/apps/students/models.py,models,models,function,,,132
StudentClassForm,,"class StudentClassForm(ModelForm):
    prefix = 'Class'


    class Meta:
        model = StudentClass
        fields = ['name']
",../../Django-School-Management-System/apps/corecode/forms.py,forms,forms,class,,,129
ReceiptDeleteView,,"class ReceiptDeleteView(LoginRequiredMixin, DeleteView):
    model = Receipt
    success_url = reverse_lazy('invoice-list')
",../../Django-School-Management-System/apps/finance/views.py,views,views,class,,,124
StudentDeleteView,,"class StudentDeleteView(LoginRequiredMixin, DeleteView):
    model = Student
    success_url = reverse_lazy('student-list')
",../../Django-School-Management-System/apps/students/views.py,views,views,class,,,124
InvoiceDeleteView,,"class InvoiceDeleteView(LoginRequiredMixin, DeleteView):
    model = Invoice
    success_url = reverse_lazy('invoice-list')
",../../Django-School-Management-System/apps/finance/views.py,views,views,class,,,124
balance,,"def balance(self):
    payable = self.total_amount_payable()
    paid = self.total_amount_paid()
    return payable - paid
",../../Django-School-Management-System/apps/finance/models.py,models,models,function,,,123
StudentListView,,"class StudentListView(LoginRequiredMixin, ListView):
    model = Student
    template_name = 'students/student_list.html'
",../../Django-School-Management-System/apps/students/views.py,views,views,class,,,122
SubjectForm,,"class SubjectForm(ModelForm):
    prefix = 'Subject'


    class Meta:
        model = Subject
        fields = ['name']
",../../Django-School-Management-System/apps/corecode/forms.py,forms,forms,class,,,121
StudentsConfig,,"class StudentsConfig(AppConfig):
    name = 'apps.students'

    def ready(self):
        import apps.students.signals
",../../Django-School-Management-System/apps/students/apps.py,apps,apps,class,,,119
CorecodeConfig,,"class CorecodeConfig(AppConfig):
    name = 'apps.corecode'

    def ready(self):
        import apps.corecode.signals
",../../Django-School-Management-System/apps/corecode/apps.py,apps,apps,class,,,119
_delete_file,Deletes file from filesystem.,"def _delete_file(path):
    """"""Deletes file from filesystem.""""""
    if os.path.isfile(path):
        os.remove(path)
",../../Django-School-Management-System/apps/students/signals.py,signals,signals,function,,,117
FinanceConfig,,"class FinanceConfig(AppConfig):
    name = 'apps.finance'

    def ready(self):
        import apps.finance.signals
",../../Django-School-Management-System/apps/finance/apps.py,apps,apps,class,,,116
StaffDetailView,,"class StaffDetailView(DetailView):
    model = Staff
    template_name = 'staffs/staff_detail.html'
",../../Django-School-Management-System/apps/staffs/views.py,views,views,class,,,100
bulk_invoice,,"@login_required
def bulk_invoice(request):
    return render(request, 'finance/bulk_invoice.html')
",../../Django-School-Management-System/apps/finance/views.py,views,views,function,,,99
Meta,,"class Meta:
    verbose_name = 'Class'
    verbose_name_plural = 'Classes'
    ordering = ['name']
",../../Django-School-Management-System/apps/corecode/models.py,models,models,class,,,99
total_amount_payable,,"def total_amount_payable(self):
    return self.balance_from_previous_term + self.amount_payable()
",../../Django-School-Management-System/apps/finance/models.py,models,models,function,,,99
StaffDeleteView,,"class StaffDeleteView(DeleteView):
    model = Staff
    success_url = reverse_lazy('staff-list')
",../../Django-School-Management-System/apps/staffs/views.py,views,views,class,,,98
apps,,"from django.apps import AppConfig


class ResultConfig(AppConfig):
    name = 'apps.result'
",../../Django-School-Management-System/apps/result/apps.py,apps,,module,0.0,,92
apps,,"from django.apps import AppConfig


class StaffsConfig(AppConfig):
    name = 'apps.staffs'
",../../Django-School-Management-System/apps/staffs/apps.py,apps,,module,0.0,,92
__str__,,"def __str__(self):
    return f'{self.student} {self.session} {self.term} {self.subject}'
",../../Django-School-Management-System/apps/result/models.py,models,models,function,,,90
get_absolute_url,,"def get_absolute_url(self):
    return reverse('student-detail', kwargs={'pk': self.pk})
",../../Django-School-Management-System/apps/students/models.py,models,models,function,,,89
get_absolute_url,,"def get_absolute_url(self):
    return reverse('invoice-detail', kwargs={'pk': self.pk})
",../../Django-School-Management-System/apps/finance/models.py,models,models,function,,,89
IndexView,,"class IndexView(LoginRequiredMixin, TemplateView):
    template_name = 'index.html'
",../../Django-School-Management-System/apps/corecode/views.py,views,views,class,,,84
InvoiceListView,,"class InvoiceListView(LoginRequiredMixin, ListView):
    model = Invoice
",../../Django-School-Management-System/apps/finance/views.py,views,views,class,,,73
total_score,,"def total_score(self):
    return self.test_score + self.exam_score
",../../Django-School-Management-System/apps/result/models.py,models,models,function,,,68
Meta,,"class Meta:
    ordering = ['surname', 'firstname', 'other_name']
",../../Django-School-Management-System/apps/students/models.py,models,models,class,,,66
score_grade,,"def score_grade(score):
    if score <= 10:
        return 'A'
",../../Django-School-Management-System/apps/result/utils.py,utils,utils,function,,,63
utils,,"def score_grade(score):
    if score <= 10:
        return 'A'
",../../Django-School-Management-System/apps/result/utils.py,utils,,module,0.0,,63
grade,,"def grade(self):
    return score_grade(self.total_score())
",../../Django-School-Management-System/apps/result/models.py,models,models,function,,,60
Meta,,"class Meta:
    model = StudentClass
    fields = ['name']
",../../Django-School-Management-System/apps/corecode/forms.py,forms,forms,class,,,59
__init__,,"default_app_config = 'apps.students.apps.StudentsConfig'
",../../Django-School-Management-System/apps/students/__init__.py,__init__,,module,0.0,,57
__init__,,"default_app_config = 'apps.corecode.apps.CorecodeConfig'
",../../Django-School-Management-System/apps/corecode/__init__.py,__init__,,module,0.0,,57
ResultConfig,,"class ResultConfig(AppConfig):
    name = 'apps.result'
",../../Django-School-Management-System/apps/result/apps.py,apps,apps,class,,,56
StaffsConfig,,"class StaffsConfig(AppConfig):
    name = 'apps.staffs'
",../../Django-School-Management-System/apps/staffs/apps.py,apps,apps,class,,,56
__init__,,"default_app_config = 'apps.finance.apps.FinanceConfig'
",../../Django-School-Management-System/apps/finance/__init__.py,__init__,,module,0.0,,55
StaffListView,,"class StaffListView(ListView):
    model = Staff
",../../Django-School-Management-System/apps/staffs/views.py,views,views,class,,,49
__str__,,"def __str__(self):
    return f'{self.student}'
",../../Django-School-Management-System/apps/finance/models.py,models,models,function,,,48
Meta,,"class Meta:
    ordering = ['student', 'term']
",../../Django-School-Management-System/apps/finance/models.py,models,models,class,,,47
__str__,,"def __str__(self):
    return self.name
",../../Django-School-Management-System/apps/corecode/models.py,models,models,function,,,40
Meta,,"class Meta:
    ordering = ['subject']
",../../Django-School-Management-System/apps/result/models.py,models,models,class,,,39
admin,,"from django.contrib import admin
",../../Django-School-Management-System/apps/result/admin.py,admin,,module,0.0,,33
admin,,"from django.contrib import admin
",../../Django-School-Management-System/apps/finance/admin.py,admin,,module,0.0,,33
admin,,"from django.contrib import admin
",../../Django-School-Management-System/apps/staffs/admin.py,admin,,module,0.0,,33
admin,,"from django.contrib import admin
",../../Django-School-Management-System/apps/students/admin.py,admin,,module,0.0,,33
__init__,,,../../Django-School-Management-System/apps/result/__init__.py,__init__,,module,0.0,,0
__init__,,,../../Django-School-Management-System/school_app/__init__.py,__init__,,module,0.0,,0
__init__,,,../../Django-School-Management-System/apps/staffs/__init__.py,__init__,,module,0.0,,0
__init__,,,../../Django-School-Management-System/apps/__init__.py,__init__,,module,0.0,,0
