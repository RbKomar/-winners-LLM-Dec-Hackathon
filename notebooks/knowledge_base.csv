docstring,code,code_start_line,code_end_line,file,module,name,parent,type,len
,"from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.messages.views import SuccessMessageMixin
from django.shortcuts import HttpResponseRedirect, redirect, render
from django.urls import reverse_lazy
from django.views.generic import ListView, TemplateView, View
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from .forms import AcademicSessionForm, AcademicTermForm, CurrentSessionForm, SiteConfigForm, StudentClassForm, SubjectForm
from .models import AcademicSession, AcademicTerm, SiteConfig, StudentClass, Subject


class IndexView(LoginRequiredMixin, TemplateView):
    template_name = 'index.html'


class SiteConfigView(LoginRequiredMixin, View):
    """"""Site Config View""""""
    form_class = SiteConfigForm
    template_name = 'corecode/siteconfig.html'

    def get(self, request, *args, **kwargs):
        formset = self.form_class(queryset=SiteConfig.objects.all())
        context = {'formset': formset}
        return render(request, self.template_name, context)

    def post(self, request, *args, **kwargs):
        formset = self.form_class(request.POST)
        if formset.is_valid():
            formset.save()
            messages.success(request, 'Configurations successfully updated')
        context = {'formset': formset, 'title': 'Configuration'}
        return render(request, self.template_name, context)


class SessionListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = AcademicSession
    template_name = 'corecode/session_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = AcademicSessionForm()
        return context


class SessionCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = AcademicSession
    form_class = AcademicSessionForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('sessions')
    success_message = 'New session successfully added'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Add new session'
        return context


class SessionUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = AcademicSession
    form_class = AcademicSessionForm
    success_url = reverse_lazy('sessions')
    success_message = 'Session successfully updated.'
    template_name = 'corecode/mgt_form.html'

    def form_valid(self, form):
        obj = self.object
        if obj.current == False:
            terms = AcademicSession.objects.filter(current=True).exclude(name
                =obj.name).exists()
            if not terms:
                messages.warning(self.request,
                    'You must set a session to current.')
                return redirect('session-list')
        return super().form_valid(form)


class SessionDeleteView(LoginRequiredMixin, DeleteView):
    model = AcademicSession
    success_url = reverse_lazy('sessions')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The session {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        if obj.current == True:
            messages.warning(request,
                'Cannot delete session as it is set to current')
            return redirect('sessions')
        messages.success(self.request, self.success_message.format(obj.name))
        return super(SessionDeleteView, self).delete(request, *args, **kwargs)


class TermListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = AcademicTerm
    template_name = 'corecode/term_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = AcademicTermForm()
        return context


class TermCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = AcademicTerm
    form_class = AcademicTermForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('terms')
    success_message = 'New term successfully added'


class TermUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = AcademicTerm
    form_class = AcademicTermForm
    success_url = reverse_lazy('terms')
    success_message = 'Term successfully updated.'
    template_name = 'corecode/mgt_form.html'

    def form_valid(self, form):
        obj = self.object
        if obj.current == False:
            terms = AcademicTerm.objects.filter(current=True).exclude(name=
                obj.name).exists()
            if not terms:
                messages.warning(self.request,
                    'You must set a term to current.')
                return redirect('term')
        return super().form_valid(form)


class TermDeleteView(LoginRequiredMixin, DeleteView):
    model = AcademicTerm
    success_url = reverse_lazy('terms')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The term {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        if obj.current == True:
            messages.warning(request,
                'Cannot delete term as it is set to current')
            return redirect('terms')
        messages.success(self.request, self.success_message.format(obj.name))
        return super(TermDeleteView, self).delete(request, *args, **kwargs)


class ClassListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = StudentClass
    template_name = 'corecode/class_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = StudentClassForm()
        return context


class ClassCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = StudentClass
    form_class = StudentClassForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('classes')
    success_message = 'New class successfully added'


class ClassUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = StudentClass
    fields = ['name']
    success_url = reverse_lazy('classes')
    success_message = 'class successfully updated.'
    template_name = 'corecode/mgt_form.html'


class ClassDeleteView(LoginRequiredMixin, DeleteView):
    model = StudentClass
    success_url = reverse_lazy('classes')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The class {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        print(obj.name)
        messages.success(self.request, self.success_message.format(obj.name))
        return super(ClassDeleteView, self).delete(request, *args, **kwargs)


class SubjectListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = Subject
    template_name = 'corecode/subject_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = SubjectForm()
        return context


class SubjectCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Subject
    form_class = SubjectForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('subjects')
    success_message = 'New subject successfully added'


class SubjectUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Subject
    fields = ['name']
    success_url = reverse_lazy('subjects')
    success_message = 'Subject successfully updated.'
    template_name = 'corecode/mgt_form.html'


class SubjectDeleteView(LoginRequiredMixin, DeleteView):
    model = Subject
    success_url = reverse_lazy('subjects')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The subject {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        messages.success(self.request, self.success_message.format(obj.name))
        return super(SubjectDeleteView, self).delete(request, *args, **kwargs)


class CurrentSessionAndTermView(LoginRequiredMixin, View):
    """"""Current SEssion and Term""""""
    form_class = CurrentSessionForm
    template_name = 'corecode/current_session.html'

    def get(self, request, *args, **kwargs):
        form = self.form_class(initial={'current_session': AcademicSession.
            objects.get(current=True), 'current_term': AcademicTerm.objects
            .get(current=True)})
        return render(request, self.template_name, {'form': form})

    def post(self, request, *args, **kwargs):
        form = self.form_class(request.POST, initial={'current_session':
            AcademicSession.objects.get(current=True), 'current_term':
            AcademicTerm.objects.get(current=True)})
        if form.is_valid():
            session = form.cleaned_data['current_session']
            term = form.cleaned_data['current_term']
            AcademicSession.objects.filter(name=session).update(current=True)
            AcademicSession.objects.exclude(name=session).update(current=False)
            AcademicTerm.objects.filter(name=term).update(current=True)
        return render(request, self.template_name, {'form': form})
",0,,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,views,,module,9495
,"from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import redirect, render
from django.urls import reverse_lazy
from django.views.generic import DetailView, ListView
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from apps.students.models import Student
from .forms import InvoiceItemFormset, InvoiceReceiptFormSet, Invoices
from .models import Invoice, InvoiceItem, Receipt


class InvoiceListView(LoginRequiredMixin, ListView):
    model = Invoice


class InvoiceCreateView(LoginRequiredMixin, CreateView):
    model = Invoice
    fields = '__all__'
    success_url = '/finance/list'

    def get_context_data(self, **kwargs):
        context = super(InvoiceCreateView, self).get_context_data(**kwargs)
        if self.request.POST:
            context['items'] = InvoiceItemFormset(self.request.POST, prefix
                ='invoiceitem_set')
        else:
            context['items'] = InvoiceItemFormset(prefix='invoiceitem_set')
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        formset = context['items']
        self.object = form.save()
        if self.object.id != None:
            if form.is_valid() and formset.is_valid():
                formset.instance = self.object
                formset.save()
        return super().form_valid(form)


class InvoiceDetailView(LoginRequiredMixin, DetailView):
    model = Invoice
    fields = '__all__'

    def get_context_data(self, **kwargs):
        context = super(InvoiceDetailView, self).get_context_data(**kwargs)
        context['receipts'] = Receipt.objects.filter(invoice=self.object)
        context['items'] = InvoiceItem.objects.filter(invoice=self.object)
        return context


class InvoiceUpdateView(LoginRequiredMixin, UpdateView):
    model = Invoice
    fields = ['student', 'session', 'term', 'class_for',
        'balance_from_previous_term']

    def get_context_data(self, **kwargs):
        context = super(InvoiceUpdateView, self).get_context_data(**kwargs)
        if self.request.POST:
            context['receipts'] = InvoiceReceiptFormSet(self.request.POST,
                instance=self.object)
            context['items'] = InvoiceItemFormset(self.request.POST,
                instance=self.object)
        else:
            context['receipts'] = InvoiceReceiptFormSet(instance=self.object)
            context['items'] = InvoiceItemFormset(instance=self.object)
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        formset = context['receipts']
        itemsformset = context['items']
        if form.is_valid() and formset.is_valid() and itemsformset.is_valid():
            form.save()
            formset.save()
            itemsformset.save()
        return super().form_valid(form)


class InvoiceDeleteView(LoginRequiredMixin, DeleteView):
    model = Invoice
    success_url = reverse_lazy('invoice-list')


class ReceiptCreateView(LoginRequiredMixin, CreateView):
    model = Receipt
    fields = ['amount_paid', 'date_paid', 'comment']
    success_url = reverse_lazy('invoice-list')

    def form_valid(self, form):
        obj = form.save(commit=False)
        invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
        obj.invoice = invoice
        obj.save()
        return redirect('invoice-list')

    def get_context_data(self, **kwargs):
        context = super(ReceiptCreateView, self).get_context_data(**kwargs)
        invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
        context['invoice'] = invoice
        return context


class ReceiptUpdateView(LoginRequiredMixin, UpdateView):
    model = Receipt
    fields = ['amount_paid', 'date_paid', 'comment']
    success_url = reverse_lazy('invoice-list')


class ReceiptDeleteView(LoginRequiredMixin, DeleteView):
    model = Receipt
    success_url = reverse_lazy('invoice-list')


@login_required
def bulk_invoice(request):
    return render(request, 'finance/bulk_invoice.html')
",0,,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,views,,module,4093
,"from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import redirect, render
from django.views.generic import DetailView, ListView, View
from apps.students.models import Student
from .forms import CreateResults, EditResults
from .models import Result


@login_required
def create_result(request):
    students = Student.objects.all()
    if request.method == 'POST':
        if 'finish' in request.POST:
            form = CreateResults(request.POST)
            if form.is_valid():
                subjects = form.cleaned_data['subjects']
                session = form.cleaned_data['session']
                term = form.cleaned_data['term']
                students = request.POST['students']
                results = []
                for student in students.split(','):
                    stu = Student.objects.get(pk=student)
                    if stu.current_class:
                        for subject in subjects:
                            check = Result.objects.filter(session=session,
                                term=term, current_class=stu.current_class,
                                subject=subject, student=stu).first()
                            if not check:
                                results.append(Result(session=session, term
                                    =term, current_class=stu.current_class,
                                    subject=subject, student=stu))
                Result.objects.bulk_create(results)
                return redirect('edit-results')
        id_list = request.POST.getlist('students')
        if id_list:
            form = CreateResults(initial={'session': request.
                current_session, 'term': request.current_term})
            studentlist = ','.join(id_list)
            return render(request, 'result/create_result_page2.html', {
                'students': studentlist, 'form': form, 'count': len(id_list)})
        else:
            messages.warning(request, 'You didnt select any student.')
    return render(request, 'result/create_result.html', {'students': students})


@login_required
def edit_results(request):
    if request.method == 'POST':
        form = EditResults(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Results successfully updated')
            return redirect('edit-results')
    else:
        results = Result.objects.filter(session=request.current_session,
            term=request.current_term)
        form = EditResults(queryset=results)
    return render(request, 'result/edit_results.html', {'formset': form})


class ResultListView(LoginRequiredMixin, View):

    def get(self, request, *args, **kwargs):
        results = Result.objects.filter(session=request.current_session,
            term=request.current_term)
        bulk = {}
        for result in results:
            test_total = 0
            exam_total = 0
            subjects = []
            for subject in results:
                if subject.student == result.student:
                    subjects.append(subject)
                    test_total += subject.test_score
                    exam_total += subject.exam_score
            bulk[result.student.id] = {'student': result.student,
                'subjects': subjects, 'test_total': test_total,
                'exam_total': exam_total, 'total_total': test_total +
                exam_total}
        context = {'results': bulk}
        return render(request, 'result/all_results.html', context)
",0,,../../dziwne/Django-School-Management-System/apps/result/views.py,views,views,,module,3621
"Django settings for school_app project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/","""""""
Django settings for school_app project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
""""""
import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SECRET_KEY = '__$1ud47e&nyso5h5o3fwnqu4+hfqcply9h$k*h2s34)hn5@nc'
DEBUG = True
ALLOWED_HOSTS = []
INSTALLED_APPS = ['django.contrib.auth', 'django.contrib.contenttypes',
    'django.contrib.sessions', 'django.contrib.messages',
    'django.contrib.staticfiles', 'django.contrib.humanize',
    'widget_tweaks', 'apps.corecode', 'apps.students', 'apps.staffs',
    'apps.finance', 'apps.result']
MIDDLEWARE = ['django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.corecode.middleware.SiteWideConfigs']
ROOT_URLCONF = 'school_app.urls'
TEMPLATES = [{'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [os.path.join(BASE_DIR, 'templates')], 'APP_DIRS': True,
    'OPTIONS': {'context_processors': [
    'django.template.context_processors.debug',
    'django.template.context_processors.request',
    'django.contrib.auth.context_processors.auth',
    'django.contrib.messages.context_processors.messages',
    'apps.corecode.context_processors.site_defaults']}}]
WSGI_APPLICATION = 'school_app.wsgi.application'
DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': os
    .path.join(BASE_DIR, 'db.sqlite3')}}
AUTH_PASSWORD_VALIDATORS = [{'NAME':
    'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'
    }, {'NAME':
    'django.contrib.auth.password_validation.MinimumLengthValidator'}, {
    'NAME':
    'django.contrib.auth.password_validation.CommonPasswordValidator'}, {
    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}
    ]
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240
STATIC_URL = '/static/'
STATICFILES_DIRS = os.path.join(BASE_DIR, 'static'),
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 10800
LOGGING = {'version': 1, 'disable_existing_loggers': False, 'formatters': {
    'verbose': {'format': '{levelname} {asctime} {message}', 'style': '{'}},
    'handlers': {'file': {'level': 'INFO', 'class':
    'logging.handlers.TimedRotatingFileHandler', 'when': 'W6', 'interval': 
    4, 'backupCount': 3, 'encoding': 'utf8', 'filename': os.path.join(
    BASE_DIR, 'debug.log'), 'formatter': 'verbose'}}, 'loggers': {'django':
    {'handlers': ['file'], 'level': 'INFO', 'propagate': True}}}
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
",0,,../../dziwne/Django-School-Management-System/school_app/settings.py,settings,settings,,module,3281
,"import csv
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.messages.views import SuccessMessageMixin
from django.forms import widgets
from django.http import HttpResponse
from django.urls import reverse_lazy
from django.views.generic import DetailView, ListView, View
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from apps.finance.models import Invoice
from .models import Student, StudentBulkUpload


class StudentListView(LoginRequiredMixin, ListView):
    model = Student
    template_name = 'students/student_list.html'


class StudentDetailView(LoginRequiredMixin, DetailView):
    model = Student
    template_name = 'students/student_detail.html'

    def get_context_data(self, **kwargs):
        context = super(StudentDetailView, self).get_context_data(**kwargs)
        context['payments'] = Invoice.objects.filter(student=self.object)
        return context


class StudentCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Student
    fields = '__all__'
    success_message = 'New student successfully added.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StudentCreateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
        return form


class StudentUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Student
    fields = '__all__'
    success_message = 'Record successfully updated.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StudentUpdateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
        return form


class StudentDeleteView(LoginRequiredMixin, DeleteView):
    model = Student
    success_url = reverse_lazy('student-list')


class StudentBulkUploadView(LoginRequiredMixin, SuccessMessageMixin, CreateView
    ):
    model = StudentBulkUpload
    template_name = 'students/students_upload.html'
    fields = ['csv_file']
    success_url = '/student/list'
    success_message = 'Successfully uploaded students'


class DownloadCSVViewdownloadcsv(LoginRequiredMixin, View):

    def get(self, request, *args, **kwargs):
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'
            ] = 'attachment; filename=""student_template.csv""'
        writer = csv.writer(response)
        writer.writerow(['registration_number', 'surname', 'firstname',
            'other_names', 'gender', 'parent_number', 'address',
            'current_class'])
        return response
",0,,../../dziwne/Django-School-Management-System/apps/students/views.py,views,views,,module,3081
,"import csv
import os
from io import StringIO
from django.db.models.signals import post_delete, post_save
from django.dispatch import receiver
from apps.corecode.models import StudentClass
from .models import Student, StudentBulkUpload


@receiver(post_save, sender=StudentBulkUpload)
def create_bulk_student(sender, created, instance, *args, **kwargs):
    if created:
        opened = StringIO(instance.csv_file.read().decode())
        reading = csv.DictReader(opened, delimiter=',')
        students = []
        for row in reading:
            if 'registration_number' in row and row['registration_number']:
                reg = row['registration_number']
                surname = row['surname'] if 'surname' in row and row['surname'
                    ] else ''
                firstname = row['firstname'] if 'firstname' in row and row[
                    'firstname'] else ''
                other_names = row['other_names'
                    ] if 'other_names' in row and row['other_names'] else ''
                gender = row['gender'].lower() if 'gender' in row and row[
                    'gender'] else ''
                phone = row['parent_number'] if 'parent_number' in row and row[
                    'parent_number'] else ''
                address = row['address'] if 'address' in row and row['address'
                    ] else ''
                current_class = row['current_class'
                    ] if 'current_class' in row and row['current_class'
                    ] else ''
                if current_class:
                    theclass, kind = StudentClass.objects.get_or_create(name
                        =current_class)
                check = Student.objects.filter(registration_number=reg).exists(
                    )
                if not check:
                    students.append(Student(registration_number=reg,
                        surname=surname, firstname=firstname, other_name=
                        other_names, gender=gender, current_class=theclass,
                        parent_mobile_number=phone, address=address,
                        current_status='active'))
        Student.objects.bulk_create(students)
        instance.csv_file.close()
        instance.delete()


def _delete_file(path):
    """"""Deletes file from filesystem.""""""
    if os.path.isfile(path):
        os.remove(path)


@receiver(post_delete, sender=StudentBulkUpload)
def delete_csv_file(sender, instance, *args, **kwargs):
    if instance.csv_file:
        _delete_file(instance.csv_file.path)


@receiver(post_delete, sender=Student)
def delete_passport_on_delete(sender, instance, *args, **kwargs):
    if instance.passport:
        _delete_file(instance.passport.path)
",0,,../../dziwne/Django-School-Management-System/apps/students/signals.py,signals,signals,,module,2715
,"from django.db import models
from django.urls import reverse
from django.utils import timezone
from apps.corecode.models import AcademicSession, AcademicTerm, StudentClass
from apps.students.models import Student


class Invoice(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)
    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)
    class_for = models.ForeignKey(StudentClass, on_delete=models.CASCADE)
    balance_from_previous_term = models.IntegerField(default=0)
    status = models.CharField(max_length=20, choices=[('active', 'Active'),
        ('closed', 'Closed')], default='active')


    class Meta:
        ordering = ['student', 'term']

    def __str__(self):
        return f'{self.student}'

    def balance(self):
        payable = self.total_amount_payable()
        paid = self.total_amount_paid()
        return payable - paid

    def amount_payable(self):
        items = InvoiceItem.objects.filter(invoice=self)
        total = 0
        for item in items:
            total += item.amount
        return total

    def total_amount_payable(self):
        return self.balance_from_previous_term + self.amount_payable()

    def total_amount_paid(self):
        receipts = Receipt.objects.filter(invoice=self)
        amount = 0
        for receipt in receipts:
            amount += receipt.amount_paid
        return amount

    def get_absolute_url(self):
        return reverse('invoice-detail', kwargs={'pk': self.pk})


class InvoiceItem(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)
    description = models.CharField(max_length=200)
    amount = models.IntegerField()


class Receipt(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)
    amount_paid = models.IntegerField()
    date_paid = models.DateField(default=timezone.now)
    comment = models.CharField(max_length=200, blank=True)

    def __str__(self):
        return f'Receipt on {self.date_paid}'
",0,,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,models,,module,2081
,"from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True
    dependencies = [('students', '0001_initial'), ('corecode', '0001_initial')]
    operations = [migrations.CreateModel(name='Invoice', fields=[('id',
        models.AutoField(auto_created=True, primary_key=True, serialize=
        False, verbose_name='ID')), ('balance_from_previous_term', models.
        IntegerField(default=0)), ('status', models.CharField(choices=[(
        'active', 'Active'), ('closed', 'Closed')], default='active',
        max_length=20)), ('class_for', models.ForeignKey(on_delete=django.
        db.models.deletion.CASCADE, to='corecode.StudentClass')), (
        'session', models.ForeignKey(on_delete=django.db.models.deletion.
        CASCADE, to='corecode.AcademicSession')), ('student', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'students.Student')), ('term', models.ForeignKey(on_delete=django.
        db.models.deletion.CASCADE, to='corecode.AcademicTerm'))], options=
        {'ordering': ['student', 'term']}), migrations.CreateModel(name=
        'Receipt', fields=[('id', models.AutoField(auto_created=True,
        primary_key=True, serialize=False, verbose_name='ID')), (
        'amount_paid', models.IntegerField()), ('date_paid', models.
        DateField(default=django.utils.timezone.now)), ('comment', models.
        CharField(blank=True, max_length=200)), ('invoice', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'finance.Invoice'))]), migrations.CreateModel(name='InvoiceItem',
        fields=[('id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('description', models.
        CharField(max_length=200)), ('amount', models.IntegerField()), (
        'invoice', models.ForeignKey(on_delete=django.db.models.deletion.
        CASCADE, to='finance.Invoice'))])]
",0,,../../dziwne/Django-School-Management-System/apps/finance/migrations/0001_initial.py,0001_initial,0001_initial,,module,2012
,"@receiver(post_save, sender=StudentBulkUpload)
def create_bulk_student(sender, created, instance, *args, **kwargs):
    if created:
        opened = StringIO(instance.csv_file.read().decode())
        reading = csv.DictReader(opened, delimiter=',')
        students = []
        for row in reading:
            if 'registration_number' in row and row['registration_number']:
                reg = row['registration_number']
                surname = row['surname'] if 'surname' in row and row['surname'
                    ] else ''
                firstname = row['firstname'] if 'firstname' in row and row[
                    'firstname'] else ''
                other_names = row['other_names'
                    ] if 'other_names' in row and row['other_names'] else ''
                gender = row['gender'].lower() if 'gender' in row and row[
                    'gender'] else ''
                phone = row['parent_number'] if 'parent_number' in row and row[
                    'parent_number'] else ''
                address = row['address'] if 'address' in row and row['address'
                    ] else ''
                current_class = row['current_class'
                    ] if 'current_class' in row and row['current_class'
                    ] else ''
                if current_class:
                    theclass, kind = StudentClass.objects.get_or_create(name
                        =current_class)
                check = Student.objects.filter(registration_number=reg).exists(
                    )
                if not check:
                    students.append(Student(registration_number=reg,
                        surname=surname, firstname=firstname, other_name=
                        other_names, gender=gender, current_class=theclass,
                        parent_mobile_number=phone, address=address,
                        current_status='active'))
        Student.objects.bulk_create(students)
        instance.csv_file.close()
        instance.delete()
",14,68.0,../../dziwne/Django-School-Management-System/apps/students/signals.py,signals,create_bulk_student,signals,function,2003
,"from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True
    dependencies = [('corecode', '0001_initial')]
    operations = [migrations.CreateModel(name='StudentBulkUpload', fields=[
        ('id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('date_uploaded', models.
        DateTimeField(auto_now=True)), ('csv_file', models.FileField(
        upload_to='students/bulkupload/'))]), migrations.CreateModel(name=
        'Student', fields=[('id', models.AutoField(auto_created=True,
        primary_key=True, serialize=False, verbose_name='ID')), (
        'current_status', models.CharField(choices=[('active', 'Active'), (
        'inactive', 'Inactive')], default='active', max_length=10)), (
        'registration_number', models.CharField(max_length=200, unique=True
        )), ('surname', models.CharField(max_length=200)), ('firstname',
        models.CharField(max_length=200)), ('other_name', models.CharField(
        blank=True, max_length=200)), ('gender', models.CharField(choices=[
        ('male', 'Male'), ('female', 'Female')], default='male', max_length
        =10)), ('date_of_birth', models.DateField(default=django.utils.
        timezone.now)), ('date_of_admission', models.DateField(default=
        django.utils.timezone.now)), ('parent_mobile_number', models.
        CharField(blank=True, max_length=15)), ('address', models.TextField
        (blank=True)), ('others', models.TextField(blank=True)), (
        'passport', models.ImageField(blank=True, upload_to=
        'students/passports/')), ('current_class', models.ForeignKey(blank=
        True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=
        'corecode.StudentClass'))], options={'ordering': ['surname',
        'firstname', 'other_name']})]
",0,,../../dziwne/Django-School-Management-System/apps/students/migrations/0001_initial.py,0001_initial,0001_initial,,module,1911
,"class Migration(migrations.Migration):
    initial = True
    dependencies = [('students', '0001_initial'), ('corecode', '0001_initial')]
    operations = [migrations.CreateModel(name='Invoice', fields=[('id',
        models.AutoField(auto_created=True, primary_key=True, serialize=
        False, verbose_name='ID')), ('balance_from_previous_term', models.
        IntegerField(default=0)), ('status', models.CharField(choices=[(
        'active', 'Active'), ('closed', 'Closed')], default='active',
        max_length=20)), ('class_for', models.ForeignKey(on_delete=django.
        db.models.deletion.CASCADE, to='corecode.StudentClass')), (
        'session', models.ForeignKey(on_delete=django.db.models.deletion.
        CASCADE, to='corecode.AcademicSession')), ('student', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'students.Student')), ('term', models.ForeignKey(on_delete=django.
        db.models.deletion.CASCADE, to='corecode.AcademicTerm'))], options=
        {'ordering': ['student', 'term']}), migrations.CreateModel(name=
        'Receipt', fields=[('id', models.AutoField(auto_created=True,
        primary_key=True, serialize=False, verbose_name='ID')), (
        'amount_paid', models.IntegerField()), ('date_paid', models.
        DateField(default=django.utils.timezone.now)), ('comment', models.
        CharField(blank=True, max_length=200)), ('invoice', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'finance.Invoice'))]), migrations.CreateModel(name='InvoiceItem',
        fields=[('id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('description', models.
        CharField(max_length=200)), ('amount', models.IntegerField()), (
        'invoice', models.ForeignKey(on_delete=django.db.models.deletion.
        CASCADE, to='finance.Invoice'))])]
",8,119.0,../../dziwne/Django-School-Management-System/apps/finance/migrations/0001_initial.py,0001_initial,Migration,,class,1907
,"from django.core.validators import RegexValidator
from django.db import models
from django.urls import reverse
from django.utils import timezone
from apps.corecode.models import StudentClass


class Student(models.Model):
    STATUS_CHOICES = [('active', 'Active'), ('inactive', 'Inactive')]
    GENDER_CHOICES = [('male', 'Male'), ('female', 'Female')]
    current_status = models.CharField(max_length=10, choices=STATUS_CHOICES,
        default='active')
    registration_number = models.CharField(max_length=200, unique=True)
    surname = models.CharField(max_length=200)
    firstname = models.CharField(max_length=200)
    other_name = models.CharField(max_length=200, blank=True)
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES,
        default='male')
    date_of_birth = models.DateField(default=timezone.now)
    current_class = models.ForeignKey(StudentClass, on_delete=models.
        SET_NULL, blank=True, null=True)
    date_of_admission = models.DateField(default=timezone.now)
    mobile_num_regex = RegexValidator(regex='^[0-9]{10,15}$', message=
        ""Entered mobile number isn't in a right format!"")
    parent_mobile_number = models.CharField(validators=[mobile_num_regex],
        max_length=13, blank=True)
    address = models.TextField(blank=True)
    others = models.TextField(blank=True)
    passport = models.ImageField(blank=True, upload_to='students/passports/')


    class Meta:
        ordering = ['surname', 'firstname', 'other_name']

    def __str__(self):
        return (
            f'{self.surname} {self.firstname} {self.other_name} ({self.registration_number})'
            )

    def get_absolute_url(self):
        return reverse('student-detail', kwargs={'pk': self.pk})


class StudentBulkUpload(models.Model):
    date_uploaded = models.DateTimeField(auto_now=True)
    csv_file = models.FileField(upload_to='students/bulkupload/')
",0,,../../dziwne/Django-School-Management-System/apps/students/models.py,models,models,,module,1901
,"from django.urls import path
from .views import ClassCreateView, ClassDeleteView, ClassListView, ClassUpdateView, CurrentSessionAndTermView, IndexView, SessionCreateView, SessionDeleteView, SessionListView, SessionUpdateView, SiteConfigView, SubjectCreateView, SubjectDeleteView, SubjectListView, SubjectUpdateView, TermCreateView, TermDeleteView, TermListView, TermUpdateView
urlpatterns = [path('', IndexView.as_view(), name='home'), path(
    'site-config', SiteConfigView.as_view(), name='configs'), path(
    'current-session/', CurrentSessionAndTermView.as_view(), name=
    'current-session'), path('session/list/', SessionListView.as_view(),
    name='sessions'), path('session/create/', SessionCreateView.as_view(),
    name='session-create'), path('session/<int:pk>/update/',
    SessionUpdateView.as_view(), name='session-update'), path(
    'session/<int:pk>/delete/', SessionDeleteView.as_view(), name=
    'session-delete'), path('term/list/', TermListView.as_view(), name=
    'terms'), path('term/create/', TermCreateView.as_view(), name=
    'term-create'), path('term/<int:pk>/update/', TermUpdateView.as_view(),
    name='term-update'), path('term/<int:pk>/delete/', TermDeleteView.
    as_view(), name='term-delete'), path('class/list/', ClassListView.
    as_view(), name='classes'), path('class/create/', ClassCreateView.
    as_view(), name='class-create'), path('class/<int:pk>/update/',
    ClassUpdateView.as_view(), name='class-update'), path(
    'class/<int:pk>/delete/', ClassDeleteView.as_view(), name=
    'class-delete'), path('subject/list/', SubjectListView.as_view(), name=
    'subjects'), path('subject/create/', SubjectCreateView.as_view(), name=
    'subject-create'), path('subject/<int:pk>/update/', SubjectUpdateView.
    as_view(), name='subject-update'), path('subject/<int:pk>/delete/',
    SubjectDeleteView.as_view(), name='subject-delete')]
",0,,../../dziwne/Django-School-Management-System/apps/corecode/urls.py,urls,urls,,module,1890
,"from django.contrib.messages.views import SuccessMessageMixin
from django.forms import widgets
from django.shortcuts import render
from django.urls import reverse_lazy
from django.views.generic import DetailView, ListView
from django.views.generic.edit import CreateView, DeleteView, UpdateView
from .models import Staff


class StaffListView(ListView):
    model = Staff


class StaffDetailView(DetailView):
    model = Staff
    template_name = 'staffs/staff_detail.html'


class StaffCreateView(SuccessMessageMixin, CreateView):
    model = Staff
    fields = '__all__'
    success_message = 'New staff successfully added'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StaffCreateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
        return form


class StaffUpdateView(SuccessMessageMixin, UpdateView):
    model = Staff
    fields = '__all__'
    success_message = 'Record successfully updated.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StaffUpdateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
        return form


class StaffDeleteView(DeleteView):
    model = Staff
    success_url = reverse_lazy('staff-list')
",0,,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,views,,module,1870
,"@login_required
def create_result(request):
    students = Student.objects.all()
    if request.method == 'POST':
        if 'finish' in request.POST:
            form = CreateResults(request.POST)
            if form.is_valid():
                subjects = form.cleaned_data['subjects']
                session = form.cleaned_data['session']
                term = form.cleaned_data['term']
                students = request.POST['students']
                results = []
                for student in students.split(','):
                    stu = Student.objects.get(pk=student)
                    if stu.current_class:
                        for subject in subjects:
                            check = Result.objects.filter(session=session,
                                term=term, current_class=stu.current_class,
                                subject=subject, student=stu).first()
                            if not check:
                                results.append(Result(session=session, term
                                    =term, current_class=stu.current_class,
                                    subject=subject, student=stu))
                Result.objects.bulk_create(results)
                return redirect('edit-results')
        id_list = request.POST.getlist('students')
        if id_list:
            form = CreateResults(initial={'session': request.
                current_session, 'term': request.current_term})
            studentlist = ','.join(id_list)
            return render(request, 'result/create_result_page2.html', {
                'students': studentlist, 'form': form, 'count': len(id_list)})
        else:
            messages.warning(request, 'You didnt select any student.')
    return render(request, 'result/create_result.html', {'students': students})
",14,69.0,../../dziwne/Django-School-Management-System/apps/result/views.py,views,create_result,views,function,1812
,"class Migration(migrations.Migration):
    initial = True
    dependencies = [('corecode', '0001_initial')]
    operations = [migrations.CreateModel(name='StudentBulkUpload', fields=[
        ('id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('date_uploaded', models.
        DateTimeField(auto_now=True)), ('csv_file', models.FileField(
        upload_to='students/bulkupload/'))]), migrations.CreateModel(name=
        'Student', fields=[('id', models.AutoField(auto_created=True,
        primary_key=True, serialize=False, verbose_name='ID')), (
        'current_status', models.CharField(choices=[('active', 'Active'), (
        'inactive', 'Inactive')], default='active', max_length=10)), (
        'registration_number', models.CharField(max_length=200, unique=True
        )), ('surname', models.CharField(max_length=200)), ('firstname',
        models.CharField(max_length=200)), ('other_name', models.CharField(
        blank=True, max_length=200)), ('gender', models.CharField(choices=[
        ('male', 'Male'), ('female', 'Female')], default='male', max_length
        =10)), ('date_of_birth', models.DateField(default=django.utils.
        timezone.now)), ('date_of_admission', models.DateField(default=
        django.utils.timezone.now)), ('parent_mobile_number', models.
        CharField(blank=True, max_length=15)), ('address', models.TextField
        (blank=True)), ('others', models.TextField(blank=True)), (
        'passport', models.ImageField(blank=True, upload_to=
        'students/passports/')), ('current_class', models.ForeignKey(blank=
        True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=
        'corecode.StudentClass'))], options={'ordering': ['surname',
        'firstname', 'other_name']})]
",8,91.0,../../dziwne/Django-School-Management-System/apps/students/migrations/0001_initial.py,0001_initial,Migration,,class,1806
,"from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True
    dependencies = []
    operations = [migrations.CreateModel(name='AcademicSession', fields=[(
        'id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('name', models.CharField(
        max_length=200, unique=True)), ('current', models.BooleanField())],
        options={'ordering': ['-name']}), migrations.CreateModel(name=
        'AcademicTerm', fields=[('id', models.AutoField(auto_created=True,
        primary_key=True, serialize=False, verbose_name='ID')), ('name',
        models.CharField(max_length=20, unique=True)), ('current', models.
        BooleanField())], options={'ordering': ['name']}), migrations.
        CreateModel(name='SiteConfig', fields=[('id', models.AutoField(
        auto_created=True, primary_key=True, serialize=False, verbose_name=
        'ID')), ('key', models.SlugField()), ('value', models.CharField(
        max_length=200))]), migrations.CreateModel(name='StudentClass',
        fields=[('id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('name', models.CharField(
        max_length=200, unique=True))], options={'verbose_name': 'Class',
        'verbose_name_plural': 'Classes', 'ordering': ['name']}),
        migrations.CreateModel(name='Subject', fields=[('id', models.
        AutoField(auto_created=True, primary_key=True, serialize=False,
        verbose_name='ID')), ('name', models.CharField(max_length=200,
        unique=True))], options={'ordering': ['name']})]
",0,,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0001_initial.py,0001_initial,0001_initial,,module,1633
,"class Migration(migrations.Migration):
    initial = True
    dependencies = []
    operations = [migrations.CreateModel(name='AcademicSession', fields=[(
        'id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('name', models.CharField(
        max_length=200, unique=True)), ('current', models.BooleanField())],
        options={'ordering': ['-name']}), migrations.CreateModel(name=
        'AcademicTerm', fields=[('id', models.AutoField(auto_created=True,
        primary_key=True, serialize=False, verbose_name='ID')), ('name',
        models.CharField(max_length=20, unique=True)), ('current', models.
        BooleanField())], options={'ordering': ['name']}), migrations.
        CreateModel(name='SiteConfig', fields=[('id', models.AutoField(
        auto_created=True, primary_key=True, serialize=False, verbose_name=
        'ID')), ('key', models.SlugField()), ('value', models.CharField(
        max_length=200))]), migrations.CreateModel(name='StudentClass',
        fields=[('id', models.AutoField(auto_created=True, primary_key=True,
        serialize=False, verbose_name='ID')), ('name', models.CharField(
        max_length=200, unique=True))], options={'verbose_name': 'Class',
        'verbose_name_plural': 'Classes', 'ordering': ['name']}),
        migrations.CreateModel(name='Subject', fields=[('id', models.
        AutoField(auto_created=True, primary_key=True, serialize=False,
        verbose_name='ID')), ('name', models.CharField(max_length=200,
        unique=True))], options={'ordering': ['name']})]
",6,105.0,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0001_initial.py,0001_initial,Migration,,class,1590
,"class Student(models.Model):
    STATUS_CHOICES = [('active', 'Active'), ('inactive', 'Inactive')]
    GENDER_CHOICES = [('male', 'Male'), ('female', 'Female')]
    current_status = models.CharField(max_length=10, choices=STATUS_CHOICES,
        default='active')
    registration_number = models.CharField(max_length=200, unique=True)
    surname = models.CharField(max_length=200)
    firstname = models.CharField(max_length=200)
    other_name = models.CharField(max_length=200, blank=True)
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES,
        default='male')
    date_of_birth = models.DateField(default=timezone.now)
    current_class = models.ForeignKey(StudentClass, on_delete=models.
        SET_NULL, blank=True, null=True)
    date_of_admission = models.DateField(default=timezone.now)
    mobile_num_regex = RegexValidator(regex='^[0-9]{10,15}$', message=
        ""Entered mobile number isn't in a right format!"")
    parent_mobile_number = models.CharField(validators=[mobile_num_regex],
        max_length=13, blank=True)
    address = models.TextField(blank=True)
    others = models.TextField(blank=True)
    passport = models.ImageField(blank=True, upload_to='students/passports/')


    class Meta:
        ordering = ['surname', 'firstname', 'other_name']

    def __str__(self):
        return (
            f'{self.surname} {self.firstname} {self.other_name} ({self.registration_number})'
            )

    def get_absolute_url(self):
        return reverse('student-detail', kwargs={'pk': self.pk})
",9,46.0,../../dziwne/Django-School-Management-System/apps/students/models.py,models,Student,,class,1545
,"class Invoice(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)
    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)
    class_for = models.ForeignKey(StudentClass, on_delete=models.CASCADE)
    balance_from_previous_term = models.IntegerField(default=0)
    status = models.CharField(max_length=20, choices=[('active', 'Active'),
        ('closed', 'Closed')], default='active')


    class Meta:
        ordering = ['student', 'term']

    def __str__(self):
        return f'{self.student}'

    def balance(self):
        payable = self.total_amount_payable()
        paid = self.total_amount_paid()
        return payable - paid

    def amount_payable(self):
        items = InvoiceItem.objects.filter(invoice=self)
        total = 0
        for item in items:
            total += item.amount
        return total

    def total_amount_payable(self):
        return self.balance_from_previous_term + self.amount_payable()

    def total_amount_paid(self):
        receipts = Receipt.objects.filter(invoice=self)
        amount = 0
        for receipt in receipts:
            amount += receipt.amount_paid
        return amount

    def get_absolute_url(self):
        return reverse('invoice-detail', kwargs={'pk': self.pk})
",9,50.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,Invoice,,class,1356
,"from django.db import migrations
from django.contrib.auth.models import User


def default_site_config(apps, schema_editor):
    """"""Default site configurations""""""
    User.objects.create_superuser('admin', 'admin@schoolapp.com', 'admin123')
    Config = apps.get_model('corecode', 'SiteConfig')
    Config.objects.bulk_create([Config(key='school_name', value='My School'
        ), Config(key='school_slogan', value='A great school'), Config(key=
        'school_address', value='Lagos, Nigeria')])
    Session = apps.get_model('corecode', 'AcademicSession')
    Session.objects.bulk_create([Session(name='2019/2020', current=True)])
    Term = apps.get_model('corecode', 'AcademicTerm')
    Term.objects.bulk_create([Term(name='1st Term', current=True), Term(
        name='2nd Term', current=False), Term(name='3rd Term', current=False)])
    Subject = apps.get_model('corecode', 'Subject')
    Subject.objects.bulk_create([Subject(name='Mathematics'), Subject(name=
        'English')])
    StudentClass = apps.get_model('corecode', 'StudentClass')
    StudentClass.objects.bulk_create([StudentClass(name='JSS 1'),
        StudentClass(name='JSS 2')])


class Migration(migrations.Migration):
    dependencies = [('corecode', '0001_initial')]
    operations = [migrations.RunPython(default_site_config)]
",0,,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0002_auto_20200506_1520.py,0002_auto_20200506_1520,0002_auto_20200506_1520,,module,1307
,"from django import forms
from django.forms import ModelForm, modelformset_factory
from .models import AcademicSession, AcademicTerm, SiteConfig, StudentClass, Subject
SiteConfigForm = modelformset_factory(SiteConfig, fields=('key', 'value'),
    extra=0)


class AcademicSessionForm(ModelForm):
    prefix = 'Academic Session'


    class Meta:
        model = AcademicSession
        fields = ['name', 'current']


class AcademicTermForm(ModelForm):
    prefix = 'Academic Term'


    class Meta:
        model = AcademicTerm
        fields = ['name', 'current']


class SubjectForm(ModelForm):
    prefix = 'Subject'


    class Meta:
        model = Subject
        fields = ['name']


class StudentClassForm(ModelForm):
    prefix = 'Class'


    class Meta:
        model = StudentClass
        fields = ['name']


class CurrentSessionForm(forms.Form):
    current_session = forms.ModelChoiceField(queryset=AcademicSession.
        objects.all(), help_text=
        'Click <a href=""/session/create/?next=current-session/"">here</a> to add new session'
        )
    current_term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all
        (), help_text=
        'Click <a href=""/term/create/?next=current-session/"">here</a> to add new term'
        )
",0,,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,forms,,module,1262
,"from django.core.validators import RegexValidator
from django.db import models
from django.urls import reverse
from django.utils import timezone


class Staff(models.Model):
    STATUS = [('active', 'Active'), ('inactive', 'Inactive')]
    GENDER = [('male', 'Male'), ('female', 'Female')]
    current_status = models.CharField(max_length=10, choices=STATUS,
        default='active')
    surname = models.CharField(max_length=200)
    firstname = models.CharField(max_length=200)
    other_name = models.CharField(max_length=200, blank=True)
    gender = models.CharField(max_length=10, choices=GENDER, default='male')
    date_of_birth = models.DateField(default=timezone.now)
    date_of_admission = models.DateField(default=timezone.now)
    mobile_num_regex = RegexValidator(regex='^[0-9]{10,15}$', message=
        ""Entered mobile number isn't in a right format!"")
    mobile_number = models.CharField(validators=[mobile_num_regex],
        max_length=13, blank=True)
    address = models.TextField(blank=True)
    others = models.TextField(blank=True)

    def __str__(self):
        return f'{self.surname} {self.firstname} {self.other_name}'

    def get_absolute_url(self):
        return reverse('staff-detail', kwargs={'pk': self.pk})
",0,,../../dziwne/Django-School-Management-System/apps/staffs/models.py,models,models,,module,1247
,"from django.db import models


class SiteConfig(models.Model):
    """"""Site Configurations""""""
    key = models.SlugField()
    value = models.CharField(max_length=200)

    def __str__(self):
        return self.key


class AcademicSession(models.Model):
    """"""Academic Session""""""
    name = models.CharField(max_length=200, unique=True)
    current = models.BooleanField(default=True)


    class Meta:
        ordering = ['-name']

    def __str__(self):
        return self.name


class AcademicTerm(models.Model):
    """"""Academic Term""""""
    name = models.CharField(max_length=20, unique=True)
    current = models.BooleanField(default=True)


    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name


class Subject(models.Model):
    """"""Subject""""""
    name = models.CharField(max_length=200, unique=True)


    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name


class StudentClass(models.Model):
    name = models.CharField(max_length=200, unique=True)


    class Meta:
        verbose_name = 'Class'
        verbose_name_plural = 'Classes'
        ordering = ['name']

    def __str__(self):
        return self.name
",0,,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,models,,module,1201
Current SEssion and Term,"class CurrentSessionAndTermView(LoginRequiredMixin, View):
    """"""Current SEssion and Term""""""
    form_class = CurrentSessionForm
    template_name = 'corecode/current_session.html'

    def get(self, request, *args, **kwargs):
        form = self.form_class(initial={'current_session': AcademicSession.
            objects.get(current=True), 'current_term': AcademicTerm.objects
            .get(current=True)})
        return render(request, self.template_name, {'form': form})

    def post(self, request, *args, **kwargs):
        form = self.form_class(request.POST, initial={'current_session':
            AcademicSession.objects.get(current=True), 'current_term':
            AcademicTerm.objects.get(current=True)})
        if form.is_valid():
            session = form.cleaned_data['current_session']
            term = form.cleaned_data['current_term']
            AcademicSession.objects.filter(name=session).update(current=True)
            AcademicSession.objects.exclude(name=session).update(current=False)
            AcademicTerm.objects.filter(name=term).update(current=True)
        return render(request, self.template_name, {'form': form})
",241,271.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,CurrentSessionAndTermView,,class,1161
,"from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True
    dependencies = [('students', '0001_initial'), ('corecode', '0001_initial')]
    operations = [migrations.CreateModel(name='Result', fields=[('id',
        models.AutoField(auto_created=True, primary_key=True, serialize=
        False, verbose_name='ID')), ('test_score', models.IntegerField(
        default=0)), ('exam_score', models.IntegerField(default=0)), (
        'current_class', models.ForeignKey(on_delete=django.db.models.
        deletion.CASCADE, to='corecode.StudentClass')), ('session', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'corecode.AcademicSession')), ('student', models.ForeignKey(
        on_delete=django.db.models.deletion.CASCADE, to='students.Student')
        ), ('subject', models.ForeignKey(on_delete=django.db.models.
        deletion.CASCADE, to='corecode.Subject')), ('term', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'corecode.AcademicTerm'))], options={'ordering': ['subject']})]
",0,,../../dziwne/Django-School-Management-System/apps/result/migrations/0001_initial.py,0001_initial,0001_initial,,module,1138
"newapp URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))","""""""newapp URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
""""""
from django.conf import settings
from django.conf.urls.static import static
from django.urls import include, path
urlpatterns = [path('accounts/', include('django.contrib.auth.urls')), path
    ('', include('apps.corecode.urls')), path('student/', include(
    'apps.students.urls')), path('staff/', include('apps.staffs.urls')),
    path('finance/', include('apps.finance.urls')), path('result/', include
    ('apps.result.urls'))] + static(settings.MEDIA_URL, document_root=
    settings.MEDIA_ROOT)
",0,,../../dziwne/Django-School-Management-System/school_app/urls.py,urls,urls,,module,1132
,"from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True
    dependencies = []
    operations = [migrations.CreateModel(name='Staff', fields=[('id',
        models.AutoField(auto_created=True, primary_key=True, serialize=
        False, verbose_name='ID')), ('current_status', models.CharField(
        choices=[('active', 'Active'), ('inactive', 'Inactive')], default=
        'active', max_length=10)), ('surname', models.CharField(max_length=
        200)), ('firstname', models.CharField(max_length=200)), (
        'other_name', models.CharField(blank=True, max_length=200)), (
        'gender', models.CharField(choices=[('male', 'Male'), ('female',
        'Female')], default='male', max_length=10)), ('date_of_birth',
        models.DateField(default=django.utils.timezone.now)), (
        'date_of_admission', models.DateField(default=django.utils.timezone
        .now)), ('mobile_number', models.CharField(blank=True, max_length=
        15)), ('address', models.TextField(blank=True)), ('others', models.
        TextField(blank=True))])]
",0,,../../dziwne/Django-School-Management-System/apps/staffs/migrations/0001_initial.py,0001_initial,0001_initial,,module,1125
,"class Staff(models.Model):
    STATUS = [('active', 'Active'), ('inactive', 'Inactive')]
    GENDER = [('male', 'Male'), ('female', 'Female')]
    current_status = models.CharField(max_length=10, choices=STATUS,
        default='active')
    surname = models.CharField(max_length=200)
    firstname = models.CharField(max_length=200)
    other_name = models.CharField(max_length=200, blank=True)
    gender = models.CharField(max_length=10, choices=GENDER, default='male')
    date_of_birth = models.DateField(default=timezone.now)
    date_of_admission = models.DateField(default=timezone.now)
    mobile_num_regex = RegexValidator(regex='^[0-9]{10,15}$', message=
        ""Entered mobile number isn't in a right format!"")
    mobile_number = models.CharField(validators=[mobile_num_regex],
        max_length=13, blank=True)
    address = models.TextField(blank=True)
    others = models.TextField(blank=True)

    def __str__(self):
        return f'{self.surname} {self.firstname} {self.other_name}'

    def get_absolute_url(self):
        return reverse('staff-detail', kwargs={'pk': self.pk})
",7,34.0,../../dziwne/Django-School-Management-System/apps/staffs/models.py,models,Staff,,class,1100
,"class InvoiceUpdateView(LoginRequiredMixin, UpdateView):
    model = Invoice
    fields = ['student', 'session', 'term', 'class_for',
        'balance_from_previous_term']

    def get_context_data(self, **kwargs):
        context = super(InvoiceUpdateView, self).get_context_data(**kwargs)
        if self.request.POST:
            context['receipts'] = InvoiceReceiptFormSet(self.request.POST,
                instance=self.object)
            context['items'] = InvoiceItemFormset(self.request.POST,
                instance=self.object)
        else:
            context['receipts'] = InvoiceReceiptFormSet(instance=self.object)
            context['items'] = InvoiceItemFormset(instance=self.object)
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        formset = context['receipts']
        itemsformset = context['items']
        if form.is_valid() and formset.is_valid() and itemsformset.is_valid():
            form.save()
            formset.save()
            itemsformset.save()
        return super().form_valid(form)
",55,81.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,InvoiceUpdateView,,class,1083
Default site configurations,"def default_site_config(apps, schema_editor):
    """"""Default site configurations""""""
    User.objects.create_superuser('admin', 'admin@schoolapp.com', 'admin123')
    Config = apps.get_model('corecode', 'SiteConfig')
    Config.objects.bulk_create([Config(key='school_name', value='My School'
        ), Config(key='school_slogan', value='A great school'), Config(key=
        'school_address', value='Lagos, Nigeria')])
    Session = apps.get_model('corecode', 'AcademicSession')
    Session.objects.bulk_create([Session(name='2019/2020', current=True)])
    Term = apps.get_model('corecode', 'AcademicTerm')
    Term.objects.bulk_create([Term(name='1st Term', current=True), Term(
        name='2nd Term', current=False), Term(name='3rd Term', current=False)])
    Subject = apps.get_model('corecode', 'Subject')
    Subject.objects.bulk_create([Subject(name='Mathematics'), Subject(name=
        'English')])
    StudentClass = apps.get_model('corecode', 'StudentClass')
    StudentClass.objects.bulk_create([StudentClass(name='JSS 1'),
        StudentClass(name='JSS 2')])
",7,51.0,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0002_auto_20200506_1520.py,0002_auto_20200506_1520,default_site_config,0002_auto_20200506_1520,function,1076
,"class Migration(migrations.Migration):
    initial = True
    dependencies = [('students', '0001_initial'), ('corecode', '0001_initial')]
    operations = [migrations.CreateModel(name='Result', fields=[('id',
        models.AutoField(auto_created=True, primary_key=True, serialize=
        False, verbose_name='ID')), ('test_score', models.IntegerField(
        default=0)), ('exam_score', models.IntegerField(default=0)), (
        'current_class', models.ForeignKey(on_delete=django.db.models.
        deletion.CASCADE, to='corecode.StudentClass')), ('session', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'corecode.AcademicSession')), ('student', models.ForeignKey(
        on_delete=django.db.models.deletion.CASCADE, to='students.Student')
        ), ('subject', models.ForeignKey(on_delete=django.db.models.
        deletion.CASCADE, to='corecode.Subject')), ('term', models.
        ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=
        'corecode.AcademicTerm'))], options={'ordering': ['subject']})]
",7,71.0,../../dziwne/Django-School-Management-System/apps/result/migrations/0001_initial.py,0001_initial,Migration,,class,1062
,"class Migration(migrations.Migration):
    initial = True
    dependencies = []
    operations = [migrations.CreateModel(name='Staff', fields=[('id',
        models.AutoField(auto_created=True, primary_key=True, serialize=
        False, verbose_name='ID')), ('current_status', models.CharField(
        choices=[('active', 'Active'), ('inactive', 'Inactive')], default=
        'active', max_length=10)), ('surname', models.CharField(max_length=
        200)), ('firstname', models.CharField(max_length=200)), (
        'other_name', models.CharField(blank=True, max_length=200)), (
        'gender', models.CharField(choices=[('male', 'Male'), ('female',
        'Female')], default='male', max_length=10)), ('date_of_birth',
        models.DateField(default=django.utils.timezone.now)), (
        'date_of_admission', models.DateField(default=django.utils.timezone
        .now)), ('mobile_number', models.CharField(blank=True, max_length=
        15)), ('address', models.TextField(blank=True)), ('others', models.
        TextField(blank=True))])]
",7,55.0,../../dziwne/Django-School-Management-System/apps/staffs/migrations/0001_initial.py,0001_initial,Migration,,class,1053
,"from django.db import models
from apps.corecode.models import AcademicSession, AcademicTerm, StudentClass, Subject
from apps.students.models import Student
from .utils import score_grade


class Result(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)
    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)
    current_class = models.ForeignKey(StudentClass, on_delete=models.CASCADE)
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)
    test_score = models.IntegerField(default=0)
    exam_score = models.IntegerField(default=0)


    class Meta:
        ordering = ['subject']

    def __str__(self):
        return f'{self.student} {self.session} {self.term} {self.subject}'

    def total_score(self):
        return self.test_score + self.exam_score

    def grade(self):
        return score_grade(self.total_score())
",0,,../../dziwne/Django-School-Management-System/apps/result/models.py,models,models,,module,963
,"class ResultListView(LoginRequiredMixin, View):

    def get(self, request, *args, **kwargs):
        results = Result.objects.filter(session=request.current_session,
            term=request.current_term)
        bulk = {}
        for result in results:
            test_total = 0
            exam_total = 0
            subjects = []
            for subject in results:
                if subject.student == result.student:
                    subjects.append(subject)
                    test_total += subject.test_score
                    exam_total += subject.exam_score
            bulk[result.student.id] = {'student': result.student,
                'subjects': subjects, 'test_total': test_total,
                'exam_total': exam_total, 'total_total': test_total +
                exam_total}
        context = {'results': bulk}
        return render(request, 'result/all_results.html', context)
",88,114.0,../../dziwne/Django-School-Management-System/apps/result/views.py,views,ResultListView,,class,907
,"from django.test import TestCase
from apps.corecode.models import AcademicSession, AcademicTerm, SiteConfig, Subject


class SiteConfigTest(TestCase):

    def test_siteconfig(self):
        site_config = SiteConfig.objects.create(key='akey', value='aname')
        self.assertEqual(str(site_config), 'akey')


class AcademicSessionTest(TestCase):

    def test_academicsession(self):
        session = AcademicSession.objects.create(name='test session',
            current=True)
        self.assertEqual(str(session), 'test session')


class AcademicTermTest(TestCase):

    def test_academicterm(self):
        term = AcademicTerm.objects.create(name='test Term', current=True)
        self.assertEqual(str(term), 'test Term')


class SubjectTest(TestCase):

    def test_subject(self):
        subject = Subject.objects.create(name='a_subject')
        self.assertEqual(str(subject), 'a_subject')
",0,,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,test_models,,module,901
,"class InvoiceCreateView(LoginRequiredMixin, CreateView):
    model = Invoice
    fields = '__all__'
    success_url = '/finance/list'

    def get_context_data(self, **kwargs):
        context = super(InvoiceCreateView, self).get_context_data(**kwargs)
        if self.request.POST:
            context['items'] = InvoiceItemFormset(self.request.POST, prefix
                ='invoiceitem_set')
        else:
            context['items'] = InvoiceItemFormset(prefix='invoiceitem_set')
        return context

    def form_valid(self, form):
        context = self.get_context_data()
        formset = context['items']
        self.object = form.save()
        if self.object.id != None:
            if form.is_valid() and formset.is_valid():
                formset.instance = self.object
                formset.save()
        return super().form_valid(form)
",18,41.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,InvoiceCreateView,,class,860
,"from django.urls import path
from .views import InvoiceCreateView, InvoiceDeleteView, InvoiceDetailView, InvoiceListView, InvoiceUpdateView, ReceiptCreateView, ReceiptUpdateView, bulk_invoice
urlpatterns = [path('list/', InvoiceListView.as_view(), name='invoice-list'
    ), path('create/', InvoiceCreateView.as_view(), name='invoice-create'),
    path('<int:pk>/detail/', InvoiceDetailView.as_view(), name=
    'invoice-detail'), path('<int:pk>/update/', InvoiceUpdateView.as_view(),
    name='invoice-update'), path('<int:pk>/delete/', InvoiceDeleteView.
    as_view(), name='invoice-delete'), path('receipt/create',
    ReceiptCreateView.as_view(), name='receipt-create'), path(
    'receipt/<int:pk>/update/', ReceiptUpdateView.as_view(), name=
    'receipt-update'), path('bulk-invoice/', bulk_invoice, name='bulk-invoice')
    ]
",0,,../../dziwne/Django-School-Management-System/apps/finance/urls.py,urls,urls,,module,835
,"class Result(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)
    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)
    current_class = models.ForeignKey(StudentClass, on_delete=models.CASCADE)
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE)
    test_score = models.IntegerField(default=0)
    exam_score = models.IntegerField(default=0)


    class Meta:
        ordering = ['subject']

    def __str__(self):
        return f'{self.student} {self.session} {self.term} {self.subject}'

    def total_score(self):
        return self.test_score + self.exam_score

    def grade(self):
        return score_grade(self.total_score())
",15,34.0,../../dziwne/Django-School-Management-System/apps/result/models.py,models,Result,,class,774
,"def get(self, request, *args, **kwargs):
    results = Result.objects.filter(session=request.current_session, term=
        request.current_term)
    bulk = {}
    for result in results:
        test_total = 0
        exam_total = 0
        subjects = []
        for subject in results:
            if subject.student == result.student:
                subjects.append(subject)
                test_total += subject.test_score
                exam_total += subject.exam_score
        bulk[result.student.id] = {'student': result.student, 'subjects':
            subjects, 'test_total': test_total, 'exam_total': exam_total,
            'total_total': test_total + exam_total}
    context = {'results': bulk}
    return render(request, 'result/all_results.html', context)
",89,114.0,../../dziwne/Django-School-Management-System/apps/result/views.py,views,get,ResultListView,method,771
,"from django.urls import path
from .views import DownloadCSVViewdownloadcsv, StudentBulkUploadView, StudentCreateView, StudentDeleteView, StudentDetailView, StudentListView, StudentUpdateView
urlpatterns = [path('list', StudentListView.as_view(), name='student-list'),
    path('<int:pk>/', StudentDetailView.as_view(), name='student-detail'),
    path('create/', StudentCreateView.as_view(), name='student-create'),
    path('<int:pk>/update/', StudentUpdateView.as_view(), name=
    'student-update'), path('delete/<int:pk>/', StudentDeleteView.as_view(),
    name='student-delete'), path('upload/', StudentBulkUploadView.as_view(),
    name='student-upload'), path('download-csv/',
    DownloadCSVViewdownloadcsv.as_view(), name='download-csv')]
",0,,../../dziwne/Django-School-Management-System/apps/students/urls.py,urls,urls,,module,748
Site Config View,"class SiteConfigView(LoginRequiredMixin, View):
    """"""Site Config View""""""
    form_class = SiteConfigForm
    template_name = 'corecode/siteconfig.html'

    def get(self, request, *args, **kwargs):
        formset = self.form_class(queryset=SiteConfig.objects.all())
        context = {'formset': formset}
        return render(request, self.template_name, context)

    def post(self, request, *args, **kwargs):
        formset = self.form_class(request.POST)
        if formset.is_valid():
            formset.save()
            messages.success(request, 'Configurations successfully updated')
        context = {'formset': formset, 'title': 'Configuration'}
        return render(request, self.template_name, context)
",31,48.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SiteConfigView,,class,723
,"class SessionUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = AcademicSession
    form_class = AcademicSessionForm
    success_url = reverse_lazy('sessions')
    success_message = 'Session successfully updated.'
    template_name = 'corecode/mgt_form.html'

    def form_valid(self, form):
        obj = self.object
        if obj.current == False:
            terms = AcademicSession.objects.filter(current=True).exclude(name
                =obj.name).exists()
            if not terms:
                messages.warning(self.request,
                    'You must set a session to current.')
                return redirect('session-list')
        return super().form_valid(form)
",74,92.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SessionUpdateView,,class,710
,"from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import AcademicSession, AcademicTerm


@receiver(post_save, sender=AcademicSession)
def after_saving_session(sender, created, instance, *args, **kwargs):
    """"""Change all academic sessions to false if this is true""""""
    if instance.current is True:
        AcademicSession.objects.exclude(pk=instance.id).update(current=False)


@receiver(post_save, sender=AcademicTerm)
def after_saving_term(sender, created, instance, *args, **kwargs):
    """"""Change all academic terms to false if this is true.""""""
    if instance.current is True:
        AcademicTerm.objects.exclude(pk=instance.id).update(current=False)
",0,,../../dziwne/Django-School-Management-System/apps/corecode/signals.py,signals,signals,,module,707
,"class SessionDeleteView(LoginRequiredMixin, DeleteView):
    model = AcademicSession
    success_url = reverse_lazy('sessions')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The session {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        if obj.current == True:
            messages.warning(request,
                'Cannot delete session as it is set to current')
            return redirect('sessions')
        messages.success(self.request, self.success_message.format(obj.name))
        return super(SessionDeleteView, self).delete(request, *args, **kwargs)
",95,107.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SessionDeleteView,,class,694
,"class TermUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = AcademicTerm
    form_class = AcademicTermForm
    success_url = reverse_lazy('terms')
    success_message = 'Term successfully updated.'
    template_name = 'corecode/mgt_form.html'

    def form_valid(self, form):
        obj = self.object
        if obj.current == False:
            terms = AcademicTerm.objects.filter(current=True).exclude(name=
                obj.name).exists()
            if not terms:
                messages.warning(self.request,
                    'You must set a term to current.')
                return redirect('term')
        return super().form_valid(form)
",128,146.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,TermUpdateView,,class,681
,"class TermDeleteView(LoginRequiredMixin, DeleteView):
    model = AcademicTerm
    success_url = reverse_lazy('terms')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The term {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        if obj.current == True:
            messages.warning(request,
                'Cannot delete term as it is set to current')
            return redirect('terms')
        messages.success(self.request, self.success_message.format(obj.name))
        return super(TermDeleteView, self).delete(request, *args, **kwargs)
",149,161.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,TermDeleteView,,class,673
,"class StudentUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Student
    fields = '__all__'
    success_message = 'Record successfully updated.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StudentUpdateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
        return form
",45,60.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,StudentUpdateView,,class,672
,"class ReceiptCreateView(LoginRequiredMixin, CreateView):
    model = Receipt
    fields = ['amount_paid', 'date_paid', 'comment']
    success_url = reverse_lazy('invoice-list')

    def form_valid(self, form):
        obj = form.save(commit=False)
        invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
        obj.invoice = invoice
        obj.save()
        return redirect('invoice-list')

    def get_context_data(self, **kwargs):
        context = super(ReceiptCreateView, self).get_context_data(**kwargs)
        invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
        context['invoice'] = invoice
        return context
",89,105.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,ReceiptCreateView,,class,656
,"class StaffCreateView(SuccessMessageMixin, CreateView):
    model = Staff
    fields = '__all__'
    success_message = 'New staff successfully added'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StaffCreateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
        return form
",20,34.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,StaffCreateView,,class,646
,"class StaffUpdateView(SuccessMessageMixin, UpdateView):
    model = Staff
    fields = '__all__'
    success_message = 'Record successfully updated.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StaffUpdateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
        return form
",37,51.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,StaffUpdateView,,class,646
,"def post(self, request, *args, **kwargs):
    form = self.form_class(request.POST, initial={'current_session':
        AcademicSession.objects.get(current=True), 'current_term':
        AcademicTerm.objects.get(current=True)})
    if form.is_valid():
        session = form.cleaned_data['current_session']
        term = form.cleaned_data['current_term']
        AcademicSession.objects.filter(name=session).update(current=True)
        AcademicSession.objects.exclude(name=session).update(current=False)
        AcademicTerm.objects.filter(name=term).update(current=True)
    return render(request, self.template_name, {'form': form})
",256,271.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,post,CurrentSessionAndTermView,method,636
,"from django import forms
from django.forms import modelformset_factory
from apps.corecode.models import AcademicSession, AcademicTerm, Subject
from .models import Result


class CreateResults(forms.Form):
    session = forms.ModelChoiceField(queryset=AcademicSession.objects.all())
    term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all())
    subjects = forms.ModelMultipleChoiceField(queryset=Subject.objects.all(
        ), widget=forms.CheckboxSelectMultiple)


EditResults = modelformset_factory(Result, fields=('test_score',
    'exam_score'), extra=0, can_delete=True)
",0,,../../dziwne/Django-School-Management-System/apps/result/forms.py,forms,forms,,module,589
Django's command-line utility for administrative tasks.,"""""""Django's command-line utility for administrative tasks.""""""
import os
import sys


def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_app.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            ""Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?""
            ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
",0,,../../dziwne/Django-School-Management-System/manage.py,manage,manage,,module,582
,"class StudentCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Student
    fields = '__all__'
    success_message = 'New student successfully added.'

    def get_form(self):
        """"""add date picker in forms""""""
        form = super(StudentCreateView, self).get_form()
        form.fields['date_of_birth'].widget = widgets.DateInput(attrs={
            'type': 'date'})
        form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
        form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
        return form
",31,42.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,StudentCreateView,,class,570
,"from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import Invoice


@receiver(post_save, sender=Invoice)
def after_creating_invoice(sender, instance, created, **kwargs):
    if created:
        previous_inv = Invoice.objects.filter(student=instance.student
            ).exclude(id=instance.id).last()
        if previous_inv:
            previous_inv.status = 'closed'
            previous_inv.save()
            instance.balance_from_previous_term = previous_inv.balance()
            instance.save()
",0,,../../dziwne/Django-School-Management-System/apps/finance/signals.py,signals,signals,,module,549
,"class ClassDeleteView(LoginRequiredMixin, DeleteView):
    model = StudentClass
    success_url = reverse_lazy('classes')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The class {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        print(obj.name)
        messages.success(self.request, self.success_message.format(obj.name))
        return super(ClassDeleteView, self).delete(request, *args, **kwargs)
",190,200.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,ClassDeleteView,,class,533
,"@login_required
def edit_results(request):
    if request.method == 'POST':
        form = EditResults(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Results successfully updated')
            return redirect('edit-results')
    else:
        results = Result.objects.filter(session=request.current_session,
            term=request.current_term)
        form = EditResults(queryset=results)
    return render(request, 'result/edit_results.html', {'formset': form})
",73,85.0,../../dziwne/Django-School-Management-System/apps/result/views.py,views,edit_results,views,function,524
,"def get_context_data(self, **kwargs):
    context = super(InvoiceUpdateView, self).get_context_data(**kwargs)
    if self.request.POST:
        context['receipts'] = InvoiceReceiptFormSet(self.request.POST,
            instance=self.object)
        context['items'] = InvoiceItemFormset(self.request.POST, instance=
            self.object)
    else:
        context['receipts'] = InvoiceReceiptFormSet(instance=self.object)
        context['items'] = InvoiceItemFormset(instance=self.object)
    return context
",59,71.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,get_context_data,InvoiceUpdateView,method,512
,"class SubjectDeleteView(LoginRequiredMixin, DeleteView):
    model = Subject
    success_url = reverse_lazy('subjects')
    template_name = 'corecode/core_confirm_delete.html'
    success_message = (
        'The subject {} has been deleted with all its attached content')

    def delete(self, request, *args, **kwargs):
        obj = self.get_object()
        messages.success(self.request, self.success_message.format(obj.name))
        return super(SubjectDeleteView, self).delete(request, *args, **kwargs)
",229,238.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SubjectDeleteView,,class,511
,"from django.urls import path
from .views import StaffCreateView, StaffDeleteView, StaffDetailView, StaffListView, StaffUpdateView
urlpatterns = [path('list/', StaffListView.as_view(), name='staff-list'),
    path('<int:pk>/', StaffDetailView.as_view(), name='staff-detail'), path
    ('create/', StaffCreateView.as_view(), name='staff-create'), path(
    '<int:pk>/update/', StaffUpdateView.as_view(), name='staff-update'),
    path('<int:pk>/delete/', StaffDeleteView.as_view(), name='staff-delete')]
",0,,../../dziwne/Django-School-Management-System/apps/staffs/urls.py,urls,urls,,module,502
,"class DownloadCSVViewdownloadcsv(LoginRequiredMixin, View):

    def get(self, request, *args, **kwargs):
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'
            ] = 'attachment; filename=""student_template.csv""'
        writer = csv.writer(response)
        writer.writerow(['registration_number', 'surname', 'firstname',
            'other_names', 'gender', 'parent_number', 'address',
            'current_class'])
        return response
",76,95.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,DownloadCSVViewdownloadcsv,,class,493
,"from .models import AcademicSession, AcademicTerm


class SiteWideConfigs:

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        current_session = AcademicSession.objects.get(current=True)
        current_term = AcademicTerm.objects.get(current=True)
        request.current_session = current_session
        request.current_term = current_term
        response = self.get_response(request)
        return response
",0,,../../dziwne/Django-School-Management-System/apps/corecode/middleware.py,middleware,middleware,,module,483
,"import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [('students', '0001_initial')]
    operations = [migrations.AlterField(model_name='student', name=
        'parent_mobile_number', field=models.CharField(blank=True,
        max_length=13, validators=[django.core.validators.RegexValidator(
        message=""Entered mobile number isn't in a right format!"", regex=
        '^[0-9]{10,15}$')]))]
",0,,../../dziwne/Django-School-Management-System/apps/students/migrations/0002_auto_20201124_0614.py,0002_auto_20201124_0614,0002_auto_20201124_0614,,module,474
,"import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [('staffs', '0001_initial')]
    operations = [migrations.AlterField(model_name='staff', name=
        'mobile_number', field=models.CharField(blank=True, max_length=13,
        validators=[django.core.validators.RegexValidator(message=
        ""Entered mobile number isn't in a right format!"", regex=
        '^[0-9]{10,15}$')]))]
",0,,../../dziwne/Django-School-Management-System/apps/staffs/migrations/0002_auto_20201124_0614.py,0002_auto_20201124_0614,0002_auto_20201124_0614,,module,463
,"def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_app.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            ""Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?""
            ) from exc
    execute_from_command_line(sys.argv)
",7,17.0,../../dziwne/Django-School-Management-System/manage.py,manage,main,manage,function,457
add date picker in forms,"def get_form(self):
    """"""add date picker in forms""""""
    form = super(StudentUpdateView, self).get_form()
    form.fields['date_of_birth'].widget = widgets.DateInput(attrs={'type':
        'date'})
    form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
        'type': 'date'})
    form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
    form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
    return form
",50,60.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,get_form,StudentUpdateView,method,456
add date picker in forms,"def get_form(self):
    """"""add date picker in forms""""""
    form = super(StaffCreateView, self).get_form()
    form.fields['date_of_birth'].widget = widgets.DateInput(attrs={'type':
        'date'})
    form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
        'type': 'date'})
    form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
    form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
    return form
",25,34.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,get_form,StaffCreateView,method,454
,"from django.forms import inlineformset_factory, modelformset_factory
from .models import Invoice, InvoiceItem, Receipt
InvoiceItemFormset = inlineformset_factory(Invoice, InvoiceItem, fields=[
    'description', 'amount'], extra=1, can_delete=True)
InvoiceReceiptFormSet = inlineformset_factory(Invoice, Receipt, fields=(
    'amount_paid', 'date_paid', 'comment'), extra=0, can_delete=True)
Invoices = modelformset_factory(Invoice, exclude=(), extra=4)
",0,,../../dziwne/Django-School-Management-System/apps/finance/forms.py,forms,forms,,module,454
add date picker in forms,"def get_form(self):
    """"""add date picker in forms""""""
    form = super(StaffUpdateView, self).get_form()
    form.fields['date_of_birth'].widget = widgets.DateInput(attrs={'type':
        'date'})
    form.fields['date_of_admission'].widget = widgets.DateInput(attrs={
        'type': 'date'})
    form.fields['address'].widget = widgets.Textarea(attrs={'rows': 1})
    form.fields['others'].widget = widgets.Textarea(attrs={'rows': 1})
    return form
",42,51.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,get_form,StaffUpdateView,method,454
,"class SessionCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = AcademicSession
    form_class = AcademicSessionForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('sessions')
    success_message = 'New session successfully added'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = 'Add new session'
        return context
",61,71.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SessionCreateView,,class,450
,"class CurrentSessionForm(forms.Form):
    current_session = forms.ModelChoiceField(queryset=AcademicSession.
        objects.all(), help_text=
        'Click <a href=""/session/create/?next=current-session/"">here</a> to add new session'
        )
    current_term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all
        (), help_text=
        'Click <a href=""/term/create/?next=current-session/"">here</a> to add new term'
        )
",54,62.0,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,CurrentSessionForm,,class,442
,"@receiver(post_save, sender=Invoice)
def after_creating_invoice(sender, instance, created, **kwargs):
    if created:
        previous_inv = Invoice.objects.filter(student=instance.student
            ).exclude(id=instance.id).last()
        if previous_inv:
            previous_inv.status = 'closed'
            previous_inv.save()
            instance.balance_from_previous_term = previous_inv.balance()
            instance.save()
",8,19.0,../../dziwne/Django-School-Management-System/apps/finance/signals.py,signals,after_creating_invoice,signals,function,435
,"class SiteWideConfigs:

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        current_session = AcademicSession.objects.get(current=True)
        current_term = AcademicTerm.objects.get(current=True)
        request.current_session = current_session
        request.current_term = current_term
        response = self.get_response(request)
        return response
",4,17.0,../../dziwne/Django-School-Management-System/apps/corecode/middleware.py,middleware,SiteWideConfigs,,class,431
,"from .models import AcademicSession, AcademicTerm, SiteConfig


def site_defaults(request):
    current_session = AcademicSession.objects.get(current=True)
    current_term = AcademicTerm.objects.get(current=True)
    vals = SiteConfig.objects.all()
    contexts = {'current_session': current_session.name, 'current_term':
        current_term.name}
    for val in vals:
        contexts[val.key] = val.value
    return contexts
",0,,../../dziwne/Django-School-Management-System/apps/corecode/context_processors.py,context_processors,context_processors,,module,429
,"from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [('corecode', '0002_auto_20200506_1520')]
    operations = [migrations.AlterField(model_name='academicsession', name=
        'current', field=models.BooleanField(default=False, null=True)),
        migrations.AlterField(model_name='academicterm', name='current',
        field=models.BooleanField(default=False, null=True))]
",0,,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0003_auto_20200726_0925.py,0003_auto_20200726_0925,0003_auto_20200726_0925,,module,427
,"from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [('corecode', '0003_auto_20200726_0925')]
    operations = [migrations.AlterField(model_name='academicsession', name=
        'current', field=models.BooleanField(default=True)), migrations.
        AlterField(model_name='academicterm', name='current', field=models.
        BooleanField(default=True))]
",0,,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0004_auto_20201124_0614.py,0004_auto_20201124_0614,0004_auto_20201124_0614,,module,405
,"class Migration(migrations.Migration):
    dependencies = [('students', '0001_initial')]
    operations = [migrations.AlterField(model_name='student', name=
        'parent_mobile_number', field=models.CharField(blank=True,
        max_length=13, validators=[django.core.validators.RegexValidator(
        message=""Entered mobile number isn't in a right format!"", regex=
        '^[0-9]{10,15}$')]))]
",7,28.0,../../dziwne/Django-School-Management-System/apps/students/migrations/0002_auto_20201124_0614.py,0002_auto_20201124_0614,Migration,,class,401
"WSGI config for school_app project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/","""""""
WSGI config for school_app project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/
""""""
import os
from django.core.wsgi import get_wsgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school_app.settings')
application = get_wsgi_application()
",0,,../../dziwne/Django-School-Management-System/school_app/wsgi.py,wsgi,wsgi,,module,393
,"class InvoiceDetailView(LoginRequiredMixin, DetailView):
    model = Invoice
    fields = '__all__'

    def get_context_data(self, **kwargs):
        context = super(InvoiceDetailView, self).get_context_data(**kwargs)
        context['receipts'] = Receipt.objects.filter(invoice=self.object)
        context['items'] = InvoiceItem.objects.filter(invoice=self.object)
        return context
",44,52.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,InvoiceDetailView,,class,391
,"class Migration(migrations.Migration):
    dependencies = [('staffs', '0001_initial')]
    operations = [migrations.AlterField(model_name='staff', name=
        'mobile_number', field=models.CharField(blank=True, max_length=13,
        validators=[django.core.validators.RegexValidator(message=
        ""Entered mobile number isn't in a right format!"", regex=
        '^[0-9]{10,15}$')]))]
",7,28.0,../../dziwne/Django-School-Management-System/apps/staffs/migrations/0002_auto_20201124_0614.py,0002_auto_20201124_0614,Migration,,class,390
,"def get(self, request, *args, **kwargs):
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'
        ] = 'attachment; filename=""student_template.csv""'
    writer = csv.writer(response)
    writer.writerow(['registration_number', 'surname', 'firstname',
        'other_names', 'gender', 'parent_number', 'address', 'current_class'])
    return response
",77,95.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,get,DownloadCSVViewdownloadcsv,method,388
"ASGI config for newapp project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/","""""""
ASGI config for newapp project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/
""""""
import os
from django.core.asgi import get_asgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'newapp.settings')
application = get_asgi_application()
",0,,../../dziwne/Django-School-Management-System/school_app/asgi.py,asgi,asgi,,module,385
,"def form_valid(self, form):
    obj = self.object
    if obj.current == False:
        terms = AcademicSession.objects.filter(current=True).exclude(name=
            obj.name).exists()
        if not terms:
            messages.warning(self.request, 'You must set a session to current.'
                )
            return redirect('session-list')
    return super().form_valid(form)
",81,92.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,form_valid,SessionUpdateView,method,385
,"class Migration(migrations.Migration):
    dependencies = [('corecode', '0002_auto_20200506_1520')]
    operations = [migrations.AlterField(model_name='academicsession', name=
        'current', field=models.BooleanField(default=False, null=True)),
        migrations.AlterField(model_name='academicterm', name='current',
        field=models.BooleanField(default=False, null=True))]
",6,23.0,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0003_auto_20200726_0925.py,0003_auto_20200726_0925,Migration,,class,384
,"def delete(self, request, *args, **kwargs):
    obj = self.get_object()
    if obj.current == True:
        messages.warning(request,
            'Cannot delete session as it is set to current')
        return redirect('sessions')
    messages.success(self.request, self.success_message.format(obj.name))
    return super(SessionDeleteView, self).delete(request, *args, **kwargs)
",101,107.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,delete,SessionDeleteView,method,380
,"def site_defaults(request):
    current_session = AcademicSession.objects.get(current=True)
    current_term = AcademicTerm.objects.get(current=True)
    vals = SiteConfig.objects.all()
    contexts = {'current_session': current_session.name, 'current_term':
        current_term.name}
    for val in vals:
        contexts[val.key] = val.value
    return contexts
",4,15.0,../../dziwne/Django-School-Management-System/apps/corecode/context_processors.py,context_processors,site_defaults,context_processors,function,365
,"class Migration(migrations.Migration):
    dependencies = [('corecode', '0003_auto_20200726_0925')]
    operations = [migrations.AlterField(model_name='academicsession', name=
        'current', field=models.BooleanField(default=True)), migrations.
        AlterField(model_name='academicterm', name='current', field=models.
        BooleanField(default=True))]
",6,23.0,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0004_auto_20201124_0614.py,0004_auto_20201124_0614,Migration,,class,362
add date picker in forms,"def get_form(self):
    """"""add date picker in forms""""""
    form = super(StudentCreateView, self).get_form()
    form.fields['date_of_birth'].widget = widgets.DateInput(attrs={'type':
        'date'})
    form.fields['address'].widget = widgets.Textarea(attrs={'rows': 2})
    form.fields['others'].widget = widgets.Textarea(attrs={'rows': 2})
    return form
",36,42.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,get_form,StudentCreateView,method,359
,"def delete(self, request, *args, **kwargs):
    obj = self.get_object()
    if obj.current == True:
        messages.warning(request, 'Cannot delete term as it is set to current')
        return redirect('terms')
    messages.success(self.request, self.success_message.format(obj.name))
    return super(TermDeleteView, self).delete(request, *args, **kwargs)
",155,161.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,delete,TermDeleteView,method,359
,"def form_valid(self, form):
    obj = self.object
    if obj.current == False:
        terms = AcademicTerm.objects.filter(current=True).exclude(name=obj.name
            ).exists()
        if not terms:
            messages.warning(self.request, 'You must set a term to current.')
            return redirect('term')
    return super().form_valid(form)
",135,146.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,form_valid,TermUpdateView,method,354
,"class StudentDetailView(LoginRequiredMixin, DetailView):
    model = Student
    template_name = 'students/student_detail.html'

    def get_context_data(self, **kwargs):
        context = super(StudentDetailView, self).get_context_data(**kwargs)
        context['payments'] = Invoice.objects.filter(student=self.object)
        return context
",21,28.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,StudentDetailView,,class,344
,"def get_context_data(self, **kwargs):
    context = super(InvoiceCreateView, self).get_context_data(**kwargs)
    if self.request.POST:
        context['items'] = InvoiceItemFormset(self.request.POST, prefix=
            'invoiceitem_set')
    else:
        context['items'] = InvoiceItemFormset(prefix='invoiceitem_set')
    return context
",23,31.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,get_context_data,InvoiceCreateView,method,341
,"def post(self, request, *args, **kwargs):
    formset = self.form_class(request.POST)
    if formset.is_valid():
        formset.save()
        messages.success(request, 'Configurations successfully updated')
    context = {'formset': formset, 'title': 'Configuration'}
    return render(request, self.template_name, context)
",42,48.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,post,SiteConfigView,method,326
,"class Receipt(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)
    amount_paid = models.IntegerField()
    date_paid = models.DateField(default=timezone.now)
    comment = models.CharField(max_length=200, blank=True)

    def __str__(self):
        return f'Receipt on {self.date_paid}'
",59,66.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,Receipt,,class,320
,"def form_valid(self, form):
    context = self.get_context_data()
    formset = context['receipts']
    itemsformset = context['items']
    if form.is_valid() and formset.is_valid() and itemsformset.is_valid():
        form.save()
        formset.save()
        itemsformset.save()
    return super().form_valid(form)
",73,81.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,form_valid,InvoiceUpdateView,method,318
,"class SessionListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = AcademicSession
    template_name = 'corecode/session_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = AcademicSessionForm()
        return context
",51,58.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SessionListView,,class,318
,"def form_valid(self, form):
    context = self.get_context_data()
    formset = context['items']
    self.object = form.save()
    if self.object.id != None:
        if form.is_valid() and formset.is_valid():
            formset.instance = self.object
            formset.save()
    return super().form_valid(form)
",33,41.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,form_valid,InvoiceCreateView,method,315
,"class ClassListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = StudentClass
    template_name = 'corecode/class_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = StudentClassForm()
        return context
",164,171.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,ClassListView,,class,308
,"class TermListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = AcademicTerm
    template_name = 'corecode/term_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = AcademicTermForm()
        return context
",110,117.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,TermListView,,class,306
,"class CreateResults(forms.Form):
    session = forms.ModelChoiceField(queryset=AcademicSession.objects.all())
    term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all())
    subjects = forms.ModelMultipleChoiceField(queryset=Subject.objects.all(
        ), widget=forms.CheckboxSelectMultiple)
",9,14.0,../../dziwne/Django-School-Management-System/apps/result/forms.py,forms,CreateResults,,class,305
,"class SubjectListView(LoginRequiredMixin, SuccessMessageMixin, ListView):
    model = Subject
    template_name = 'corecode/subject_list.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = SubjectForm()
        return context
",203,210.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SubjectListView,,class,302
,"def __call__(self, request):
    current_session = AcademicSession.objects.get(current=True)
    current_term = AcademicTerm.objects.get(current=True)
    request.current_session = current_session
    request.current_term = current_term
    response = self.get_response(request)
    return response
",8,17.0,../../dziwne/Django-School-Management-System/apps/corecode/middleware.py,middleware,__call__,SiteWideConfigs,method,299
,"from django.urls import path
from .views import ResultListView, create_result, edit_results
urlpatterns = [path('create/', create_result, name='create-result'), path(
    'edit-results/', edit_results, name='edit-results'), path('view/all',
    ResultListView.as_view(), name='view-results')]
",0,,../../dziwne/Django-School-Management-System/apps/result/urls.py,urls,urls,,module,293
Change all academic sessions to false if this is true,"@receiver(post_save, sender=AcademicSession)
def after_saving_session(sender, created, instance, *args, **kwargs):
    """"""Change all academic sessions to false if this is true""""""
    if instance.current is True:
        AcademicSession.objects.exclude(pk=instance.id).update(current=False)
",8,11.0,../../dziwne/Django-School-Management-System/apps/corecode/signals.py,signals,after_saving_session,signals,function,290
,"class StudentBulkUploadView(LoginRequiredMixin, SuccessMessageMixin, CreateView
    ):
    model = StudentBulkUpload
    template_name = 'students/students_upload.html'
    fields = ['csv_file']
    success_url = '/student/list'
    success_message = 'Successfully uploaded students'
",68,73.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,StudentBulkUploadView,,class,284
Change all academic terms to false if this is true.,"@receiver(post_save, sender=AcademicTerm)
def after_saving_term(sender, created, instance, *args, **kwargs):
    """"""Change all academic terms to false if this is true.""""""
    if instance.current is True:
        AcademicTerm.objects.exclude(pk=instance.id).update(current=False)
",15,18.0,../../dziwne/Django-School-Management-System/apps/corecode/signals.py,signals,after_saving_term,signals,function,279
,"def get(self, request, *args, **kwargs):
    form = self.form_class(initial={'current_session': AcademicSession.
        objects.get(current=True), 'current_term': AcademicTerm.objects.get
        (current=True)})
    return render(request, self.template_name, {'form': form})
",247,254.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get,CurrentSessionAndTermView,method,277
,"class ClassCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = StudentClass
    form_class = StudentClassForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('classes')
    success_message = 'New class successfully added'
",174,179.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,ClassCreateView,,class,275
,"class TermCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = AcademicTerm
    form_class = AcademicTermForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('terms')
    success_message = 'New term successfully added'
",120,125.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,TermCreateView,,class,271
,"def get_context_data(self, **kwargs):
    context = super(InvoiceDetailView, self).get_context_data(**kwargs)
    context['receipts'] = Receipt.objects.filter(invoice=self.object)
    context['items'] = InvoiceItem.objects.filter(invoice=self.object)
    return context
",48,52.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,get_context_data,InvoiceDetailView,method,270
,"class SubjectCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Subject
    form_class = SubjectForm
    template_name = 'corecode/mgt_form.html'
    success_url = reverse_lazy('subjects')
    success_message = 'New subject successfully added'
",213,218.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SubjectCreateView,,class,270
Academic Session,"class AcademicSession(models.Model):
    """"""Academic Session""""""
    name = models.CharField(max_length=200, unique=True)
    current = models.BooleanField(default=True)


    class Meta:
        ordering = ['-name']

    def __str__(self):
        return self.name
",16,26.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,AcademicSession,,class,265
,"class ClassUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = StudentClass
    fields = ['name']
    success_url = reverse_lazy('classes')
    success_message = 'class successfully updated.'
    template_name = 'corecode/mgt_form.html'
",182,187.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,ClassUpdateView,,class,262
,"class SubjectUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Subject
    fields = ['name']
    success_url = reverse_lazy('subjects')
    success_message = 'Subject successfully updated.'
    template_name = 'corecode/mgt_form.html'
",221,226.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,SubjectUpdateView,,class,262
Academic Term,"class AcademicTerm(models.Model):
    """"""Academic Term""""""
    name = models.CharField(max_length=20, unique=True)
    current = models.BooleanField(default=True)


    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name
",29,39.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,AcademicTerm,,class,257
,"class StudentClass(models.Model):
    name = models.CharField(max_length=200, unique=True)


    class Meta:
        verbose_name = 'Class'
        verbose_name_plural = 'Classes'
        ordering = ['name']

    def __str__(self):
        return self.name
",54,63.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,StudentClass,,class,257
,"def delete(self, request, *args, **kwargs):
    obj = self.get_object()
    print(obj.name)
    messages.success(self.request, self.success_message.format(obj.name))
    return super(ClassDeleteView, self).delete(request, *args, **kwargs)
",196,200.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,delete,ClassDeleteView,method,239
,"def get_context_data(self, **kwargs):
    context = super(ReceiptCreateView, self).get_context_data(**kwargs)
    invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
    context['invoice'] = invoice
    return context
",101,105.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,get_context_data,ReceiptCreateView,method,228
,"class AcademicSessionTest(TestCase):

    def test_academicsession(self):
        session = AcademicSession.objects.create(name='test session',
            current=True)
        self.assertEqual(str(session), 'test session')
",17,20.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,AcademicSessionTest,,class,225
,"def delete(self, request, *args, **kwargs):
    obj = self.get_object()
    messages.success(self.request, self.success_message.format(obj.name))
    return super(SubjectDeleteView, self).delete(request, *args, **kwargs)
",235,238.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,delete,SubjectDeleteView,method,221
,"def form_valid(self, form):
    obj = form.save(commit=False)
    invoice = Invoice.objects.get(pk=self.request.GET['invoice'])
    obj.invoice = invoice
    obj.save()
    return redirect('invoice-list')
",94,99.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,form_valid,ReceiptCreateView,method,205
Subject,"class Subject(models.Model):
    """"""Subject""""""
    name = models.CharField(max_length=200, unique=True)


    class Meta:
        ordering = ['name']

    def __str__(self):
        return self.name
",42,51.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,Subject,,class,199
,"def get_context_data(self, **kwargs):
    context = super(StudentDetailView, self).get_context_data(**kwargs)
    context['payments'] = Invoice.objects.filter(student=self.object)
    return context
",25,28.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,get_context_data,StudentDetailView,method,199
,"def get(self, request, *args, **kwargs):
    formset = self.form_class(queryset=SiteConfig.objects.all())
    context = {'formset': formset}
    return render(request, self.template_name, context)
",37,40.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get,SiteConfigView,method,197
,"class AcademicTermTest(TestCase):

    def test_academicterm(self):
        term = AcademicTerm.objects.create(name='test Term', current=True)
        self.assertEqual(str(term), 'test Term')
",23,26.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,AcademicTermTest,,class,192
,"class SiteConfigTest(TestCase):

    def test_siteconfig(self):
        site_config = SiteConfig.objects.create(key='akey', value='aname')
        self.assertEqual(str(site_config), 'akey')
",11,14.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,SiteConfigTest,,class,190
,"class InvoiceItem(models.Model):
    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)
    description = models.CharField(max_length=200)
    amount = models.IntegerField()
",53,56.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,InvoiceItem,,class,186
Site Configurations,"class SiteConfig(models.Model):
    """"""Site Configurations""""""
    key = models.SlugField()
    value = models.CharField(max_length=200)

    def __str__(self):
        return self.key
",6,13.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,SiteConfig,,class,184
,"def total_amount_paid(self):
    receipts = Receipt.objects.filter(invoice=self)
    amount = 0
    for receipt in receipts:
        amount += receipt.amount_paid
    return amount
",42,47.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,total_amount_paid,models,function,181
,"class ReceiptUpdateView(LoginRequiredMixin, UpdateView):
    model = Receipt
    fields = ['amount_paid', 'date_paid', 'comment']
    success_url = reverse_lazy('invoice-list')
",108,111.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,ReceiptUpdateView,,class,177
,"@receiver(post_delete, sender=Student)
def delete_passport_on_delete(sender, instance, *args, **kwargs):
    if instance.passport:
        _delete_file(instance.passport.path)
",84,86.0,../../dziwne/Django-School-Management-System/apps/students/signals.py,signals,delete_passport_on_delete,signals,function,176
,"@receiver(post_delete, sender=StudentBulkUpload)
def delete_csv_file(sender, instance, *args, **kwargs):
    if instance.csv_file:
        _delete_file(instance.csv_file.path)
",78,80.0,../../dziwne/Django-School-Management-System/apps/students/signals.py,signals,delete_csv_file,signals,function,176
,"class SubjectTest(TestCase):

    def test_subject(self):
        subject = Subject.objects.create(name='a_subject')
        self.assertEqual(str(subject), 'a_subject')
",29,32.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,SubjectTest,,class,169
,"def test_academicsession(self):
    session = AcademicSession.objects.create(name='test session', current=True)
    self.assertEqual(str(session), 'test session')
",18,20.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,test_academicsession,AcademicSessionTest,method,163
,"def amount_payable(self):
    items = InvoiceItem.objects.filter(invoice=self)
    total = 0
    for item in items:
        total += item.amount
    return total
",32,37.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,amount_payable,models,function,162
,"class StudentBulkUpload(models.Model):
    date_uploaded = models.DateTimeField(auto_now=True)
    csv_file = models.FileField(upload_to='students/bulkupload/')
",49,51.0,../../dziwne/Django-School-Management-System/apps/students/models.py,models,StudentBulkUpload,,class,161
,"class AcademicSessionForm(ModelForm):
    prefix = 'Academic Session'


    class Meta:
        model = AcademicSession
        fields = ['name', 'current']
",22,27.0,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,AcademicSessionForm,,class,157
,"from django.apps import AppConfig


class CorecodeConfig(AppConfig):
    name = 'apps.corecode'

    def ready(self):
        import apps.corecode.signals
",0,,../../dziwne/Django-School-Management-System/apps/corecode/apps.py,apps,apps,,module,155
,"from django.apps import AppConfig


class StudentsConfig(AppConfig):
    name = 'apps.students'

    def ready(self):
        import apps.students.signals
",0,,../../dziwne/Django-School-Management-System/apps/students/apps.py,apps,apps,,module,155
,"from django.apps import AppConfig


class FinanceConfig(AppConfig):
    name = 'apps.finance'

    def ready(self):
        import apps.finance.signals
",0,,../../dziwne/Django-School-Management-System/apps/finance/apps.py,apps,apps,,module,152
,"def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context['form'] = AcademicSessionForm()
    return context
",55,58.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get_context_data,SessionListView,method,150
,"class Migration(migrations.Migration):
    dependencies = [('corecode', '0001_initial')]
    operations = [migrations.RunPython(default_site_config)]
",54,62.0,../../dziwne/Django-School-Management-System/apps/corecode/migrations/0002_auto_20200506_1520.py,0002_auto_20200506_1520,Migration,,class,150
,"class AcademicTermForm(ModelForm):
    prefix = 'Academic Term'


    class Meta:
        model = AcademicTerm
        fields = ['name', 'current']
",30,35.0,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,AcademicTermForm,,class,148
,"def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context['form'] = AcademicTermForm()
    return context
",114,117.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get_context_data,TermListView,method,147
,"def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context['title'] = 'Add new session'
    return context
",68,71.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get_context_data,SessionCreateView,method,147
,"def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context['form'] = StudentClassForm()
    return context
",168,171.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get_context_data,ClassListView,method,147
,"def test_academicterm(self):
    term = AcademicTerm.objects.create(name='test Term', current=True)
    self.assertEqual(str(term), 'test Term')
",24,26.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,test_academicterm,AcademicTermTest,method,145
,"def test_siteconfig(self):
    site_config = SiteConfig.objects.create(key='akey', value='aname')
    self.assertEqual(str(site_config), 'akey')
",12,14.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,test_siteconfig,SiteConfigTest,method,145
,"def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    context['form'] = SubjectForm()
    return context
",207,210.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,get_context_data,SubjectListView,method,142
,"def __str__(self):
    return (
        f'{self.surname} {self.firstname} {self.other_name} ({self.registration_number})'
        )
",42,43.0,../../dziwne/Django-School-Management-System/apps/students/models.py,models,__str__,models,function,132
,"class StudentClassForm(ModelForm):
    prefix = 'Class'


    class Meta:
        model = StudentClass
        fields = ['name']
",46,51.0,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,StudentClassForm,,class,129
,"def test_subject(self):
    subject = Subject.objects.create(name='a_subject')
    self.assertEqual(str(subject), 'a_subject')
",30,32.0,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_models.py,test_models,test_subject,SubjectTest,method,127
,"class StudentDeleteView(LoginRequiredMixin, DeleteView):
    model = Student
    success_url = reverse_lazy('student-list')
",63,65.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,StudentDeleteView,,class,124
,"class ReceiptDeleteView(LoginRequiredMixin, DeleteView):
    model = Receipt
    success_url = reverse_lazy('invoice-list')
",114,116.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,ReceiptDeleteView,,class,124
,"class InvoiceDeleteView(LoginRequiredMixin, DeleteView):
    model = Invoice
    success_url = reverse_lazy('invoice-list')
",84,86.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,InvoiceDeleteView,,class,124
,"def balance(self):
    payable = self.total_amount_payable()
    paid = self.total_amount_paid()
    return payable - paid
",27,30.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,balance,models,function,123
,"class StudentListView(LoginRequiredMixin, ListView):
    model = Student
    template_name = 'students/student_list.html'
",16,18.0,../../dziwne/Django-School-Management-System/apps/students/views.py,views,StudentListView,,class,122
,"class SubjectForm(ModelForm):
    prefix = 'Subject'


    class Meta:
        model = Subject
        fields = ['name']
",38,43.0,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,SubjectForm,,class,121
,"class StudentsConfig(AppConfig):
    name = 'apps.students'

    def ready(self):
        import apps.students.signals
",4,8.0,../../dziwne/Django-School-Management-System/apps/students/apps.py,apps,StudentsConfig,,class,119
,"class CorecodeConfig(AppConfig):
    name = 'apps.corecode'

    def ready(self):
        import apps.corecode.signals
",4,8.0,../../dziwne/Django-School-Management-System/apps/corecode/apps.py,apps,CorecodeConfig,,class,119
Deletes file from filesystem.,"def _delete_file(path):
    """"""Deletes file from filesystem.""""""
    if os.path.isfile(path):
        os.remove(path)
",71,74.0,../../dziwne/Django-School-Management-System/apps/students/signals.py,signals,_delete_file,signals,function,117
,"class FinanceConfig(AppConfig):
    name = 'apps.finance'

    def ready(self):
        import apps.finance.signals
",4,8.0,../../dziwne/Django-School-Management-System/apps/finance/apps.py,apps,FinanceConfig,,class,116
,"class StaffDetailView(DetailView):
    model = Staff
    template_name = 'staffs/staff_detail.html'
",15,17.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,StaffDetailView,,class,100
,"def total_amount_payable(self):
    return self.balance_from_previous_term + self.amount_payable()
",39,40.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,total_amount_payable,models,function,99
,"class Meta:
    verbose_name = 'Class'
    verbose_name_plural = 'Classes'
    ordering = ['name']
",57,60.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,Meta,,class,99
,"@login_required
def bulk_invoice(request):
    return render(request, 'finance/bulk_invoice.html')
",120,121.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,bulk_invoice,views,function,99
,"class StaffDeleteView(DeleteView):
    model = Staff
    success_url = reverse_lazy('staff-list')
",54,56.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,StaffDeleteView,,class,98
,"from django.apps import AppConfig


class ResultConfig(AppConfig):
    name = 'apps.result'
",0,,../../dziwne/Django-School-Management-System/apps/result/apps.py,apps,apps,,module,92
,"from django.apps import AppConfig


class StaffsConfig(AppConfig):
    name = 'apps.staffs'
",0,,../../dziwne/Django-School-Management-System/apps/staffs/apps.py,apps,apps,,module,92
,"def __str__(self):
    return f'{self.student} {self.session} {self.term} {self.subject}'
",27,28.0,../../dziwne/Django-School-Management-System/apps/result/models.py,models,__str__,models,function,90
,"def get_absolute_url(self):
    return reverse('invoice-detail', kwargs={'pk': self.pk})
",49,50.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,get_absolute_url,models,function,89
,"def get_absolute_url(self):
    return reverse('student-detail', kwargs={'pk': self.pk})
",45,46.0,../../dziwne/Django-School-Management-System/apps/students/models.py,models,get_absolute_url,models,function,89
,"def get_absolute_url(self):
    return reverse('staff-detail', kwargs={'pk': self.pk})
",33,34.0,../../dziwne/Django-School-Management-System/apps/staffs/models.py,models,get_absolute_url,Staff,method,87
,"class IndexView(LoginRequiredMixin, TemplateView):
    template_name = 'index.html'
",27,28.0,../../dziwne/Django-School-Management-System/apps/corecode/views.py,views,IndexView,,class,84
,"def __str__(self):
    return f'{self.surname} {self.firstname} {self.other_name}'
",30,31.0,../../dziwne/Django-School-Management-System/apps/staffs/models.py,models,__str__,Staff,method,83
,"class InvoiceListView(LoginRequiredMixin, ListView):
    model = Invoice
",14,15.0,../../dziwne/Django-School-Management-System/apps/finance/views.py,views,InvoiceListView,,class,73
,"def __init__(self, get_response):
    self.get_response = get_response
",5,6.0,../../dziwne/Django-School-Management-System/apps/corecode/middleware.py,middleware,__init__,SiteWideConfigs,method,71
,"def total_score(self):
    return self.test_score + self.exam_score
",30,31.0,../../dziwne/Django-School-Management-System/apps/result/models.py,models,total_score,models,function,68
,"class Meta:
    ordering = ['surname', 'firstname', 'other_name']
",39,40.0,../../dziwne/Django-School-Management-System/apps/students/models.py,models,Meta,,class,66
,"def score_grade(score):
    if score <= 10:
        return 'A'
",1,3.0,../../dziwne/Django-School-Management-System/apps/result/utils.py,utils,score_grade,utils,function,63
,"def score_grade(score):
    if score <= 10:
        return 'A'
",0,,../../dziwne/Django-School-Management-System/apps/result/utils.py,utils,utils,,module,63
,"def __str__(self):
    return f'Receipt on {self.date_paid}'
",65,66.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,__str__,Receipt,method,61
,"def grade(self):
    return score_grade(self.total_score())
",33,34.0,../../dziwne/Django-School-Management-System/apps/result/models.py,models,grade,models,function,60
,"class Meta:
    model = StudentClass
    fields = ['name']
",49,51.0,../../dziwne/Django-School-Management-System/apps/corecode/forms.py,forms,Meta,,class,59
,"default_app_config = 'apps.corecode.apps.CorecodeConfig'
",0,,../../dziwne/Django-School-Management-System/apps/corecode/__init__.py,__init__,__init__,,module,57
,"default_app_config = 'apps.students.apps.StudentsConfig'
",0,,../../dziwne/Django-School-Management-System/apps/students/__init__.py,__init__,__init__,,module,57
,"class StaffsConfig(AppConfig):
    name = 'apps.staffs'
",4,5.0,../../dziwne/Django-School-Management-System/apps/staffs/apps.py,apps,StaffsConfig,,class,56
,"class ResultConfig(AppConfig):
    name = 'apps.result'
",4,5.0,../../dziwne/Django-School-Management-System/apps/result/apps.py,apps,ResultConfig,,class,56
,"default_app_config = 'apps.finance.apps.FinanceConfig'
",0,,../../dziwne/Django-School-Management-System/apps/finance/__init__.py,__init__,__init__,,module,55
,"def ready(self):
    import apps.students.signals
",7,8.0,../../dziwne/Django-School-Management-System/apps/students/apps.py,apps,ready,StudentsConfig,method,50
,"def ready(self):
    import apps.corecode.signals
",7,8.0,../../dziwne/Django-School-Management-System/apps/corecode/apps.py,apps,ready,CorecodeConfig,method,50
,"class StaffListView(ListView):
    model = Staff
",11,12.0,../../dziwne/Django-School-Management-System/apps/staffs/views.py,views,StaffListView,,class,49
,"def ready(self):
    import apps.finance.signals
",7,8.0,../../dziwne/Django-School-Management-System/apps/finance/apps.py,apps,ready,FinanceConfig,method,49
,"def __str__(self):
    return f'{self.student}'
",24,25.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,__str__,models,function,48
,"class Meta:
    ordering = ['student', 'term']
",21,22.0,../../dziwne/Django-School-Management-System/apps/finance/models.py,models,Meta,,class,47
,"def __str__(self):
    return self.name
",62,63.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,__str__,models,function,40
,"class Meta:
    ordering = ['subject']
",24,25.0,../../dziwne/Django-School-Management-System/apps/result/models.py,models,Meta,,class,39
,"def __str__(self):
    return self.key
",12,13.0,../../dziwne/Django-School-Management-System/apps/corecode/models.py,models,__str__,SiteConfig,method,39
,"from django.contrib import admin
",0,,../../dziwne/Django-School-Management-System/apps/finance/admin.py,admin,admin,,module,33
,"from django.test import TestCase
",0,,../../dziwne/Django-School-Management-System/apps/finance/tests.py,tests,tests,,module,33
,"from django.contrib import admin
",0,,../../dziwne/Django-School-Management-System/apps/result/admin.py,admin,admin,,module,33
,"from django.test import TestCase
",0,,../../dziwne/Django-School-Management-System/apps/result/tests.py,tests,tests,,module,33
,"from django.contrib import admin
",0,,../../dziwne/Django-School-Management-System/apps/staffs/admin.py,admin,admin,,module,33
,"from django.test import TestCase
",0,,../../dziwne/Django-School-Management-System/apps/staffs/tests.py,tests,tests,,module,33
,"from django.test import TestCase
",0,,../../dziwne/Django-School-Management-System/apps/students/tests.py,tests,tests,,module,33
,"from django.contrib import admin
",0,,../../dziwne/Django-School-Management-System/apps/students/admin.py,admin,admin,,module,33
,,0,,../../dziwne/Django-School-Management-System/apps/__init__.py,__init__,__init__,,module,0
,,0,,../../dziwne/Django-School-Management-System/apps/staffs/__init__.py,__init__,__init__,,module,0
,,0,,../../dziwne/Django-School-Management-System/apps/staffs/migrations/__init__.py,__init__,__init__,,module,0
,,0,,../../dziwne/Django-School-Management-System/apps/finance/migrations/__init__.py,__init__,__init__,,module,0
,,0,,../../dziwne/Django-School-Management-System/apps/corecode/migrations/__init__.py,__init__,__init__,,module,0
,,0,,../../dziwne/Django-School-Management-System/apps/corecode/tests/test_views.py,test_views,test_views,,module,0
,,0,,../../dziwne/Django-School-Management-System/apps/corecode/tests/__init__.py,__init__,__init__,,module,0
,,0,,../../dziwne/Django-School-Management-System/apps/result/migrations/__init__.py,__init__,__init__,,module,0
,,0,,../../dziwne/Django-School-Management-System/school_app/__init__.py,__init__,__init__,,module,0
,,0,,../../dziwne/Django-School-Management-System/apps/result/__init__.py,__init__,__init__,,module,0
,,0,,../../dziwne/Django-School-Management-System/apps/students/migrations/__init__.py,__init__,__init__,,module,0
